// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: a7d1e510640cbe9d45eed7d2de09bbbd141f45507283fae1e546701952f9cdae
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	"github.com/attestantio/go-eth2-client/spec/capella"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionPayloadWithdrawals) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ExecutionPayloadWithdrawals) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(ExecutionPayloadWithdrawals)
	}
	dstlen := len(dst)
	// Offset #0 'Withdrawals'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #0 'Withdrawals'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.Withdrawals
		vlen := len(t)
		if vlen > 16 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(capella.Withdrawal)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *ExecutionPayloadWithdrawals) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 4 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'Withdrawals' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 != 4 {
		return sszutils.ErrOffset
	}
	{ // Field #0 'Withdrawals' (dynamic)
		buf := buf[offset0:]
		val1 := t.Withdrawals
		itemCount := len(buf) / 44
		if len(buf)%44 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val1 = sszutils.ExpandSlice(val1, itemCount)
		for i := 0; i < itemCount; i++ {
			if val1[i] == nil {
				val1[i] = new(capella.Withdrawal)
			}
			buf := buf[44*i : 44*(i+1)]
			if err = val1[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.Withdrawals = val1
	}
	return nil
}

func (t *ExecutionPayloadWithdrawals) SizeSSZ() (size int) {
	if t == nil {
		t = new(ExecutionPayloadWithdrawals)
	}
	// Field #0 'Withdrawals' offset (4 bytes)
	size += 4
	{ // Dynamic field #0 'Withdrawals'
		size += len(t.Withdrawals) * 44
	}
	return size
}

func (t *ExecutionPayloadWithdrawals) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ExecutionPayloadWithdrawals) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(ExecutionPayloadWithdrawals)
	}
	idx := hh.Index()
	{ // Field #0 'Withdrawals'
		t := t.Withdrawals
		vlen := uint64(len(t))
		if vlen > 16 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(capella.Withdrawal)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(16, vlen, 32))
	}
	hh.Merkleize(idx)
	return nil
}

