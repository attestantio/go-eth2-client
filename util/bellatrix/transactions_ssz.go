// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: fbf53b59f57a94dece9255542731d2f2bddd2c5fb04952c20f684023cd8f8a09
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package bellatrix

import (
	"github.com/attestantio/go-eth2-client/spec/bellatrix"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionPayloadTransactions) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *ExecutionPayloadTransactions) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t []bellatrix.Transaction) (err error) { // []bellatrix.Transaction
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			dst = append(dst, t[i][:]...)
		}
		return err
	}
	fn2 := func(t *ExecutionPayloadTransactions) (err error) { // *bellatrix.ExecutionPayloadTransactions
		dstlen := len(dst)
		// Offset #0 'Transactions'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #0 'Transactions'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn1(t.Transactions); err != nil {
			return err
		}
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *ExecutionPayloadTransactions) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *ExecutionPayloadTransactions) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *ExecutionPayloadTransactions) SizeSSZ() (size int) {
	sfn1 := func(t bellatrix.Transaction) (size int) { // bellatrix.Transaction
		size += len(t)
		return size
	}
	sfn2 := func(t []bellatrix.Transaction) (size int) { // []bellatrix.Transaction
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn1(t[i])
		}
		return size
	}
	sfn3 := func(t *ExecutionPayloadTransactions) (size int) { // *ExecutionPayloadTransactions
		size = 0
		size += 4 + sfn2(t.Transactions)
		return size
	}
	return sfn3(t)
}

func (t *ExecutionPayloadTransactions) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *ExecutionPayloadTransactions) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t []bellatrix.Transaction, buf []byte) ([]bellatrix.Transaction, error) { // []bellatrix.Transaction
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]bellatrix.Transaction, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if len(t[i]) < len(buf[offset:endOffset]) {
				t[i] = make(bellatrix.Transaction, len(buf[offset:endOffset]))
			} else {
				t[i] = t[i][:len(buf[offset:endOffset])]
			}
			copy(t[i][:], buf[offset:endOffset])
			offset = endOffset
		}
		return t, err
	}
	fn2 := func(t *ExecutionPayloadTransactions, buf []byte) (*ExecutionPayloadTransactions, error) { // *ExecutionPayloadTransactions
		var err error
		if t == nil {
			t = new(ExecutionPayloadTransactions)
		}
		bufpos := 4
		buflen := len(buf)
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'Transactions'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Dynamic Field #0 'Transactions'
		if offset0 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:]
			if t.Transactions, err = fn1(t.Transactions, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *ExecutionPayloadTransactions) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *ExecutionPayloadTransactions) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t bellatrix.Transaction) (err error) { // bellatrix.Transaction:1073741824:pack
		maxLen := 1073741824
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t []bellatrix.Transaction) (err error) { // []bellatrix.Transaction:1048576
		maxLen := 1048576
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn1(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn3 := func(t *ExecutionPayloadTransactions) (err error) { // *bellatrix.ExecutionPayloadTransactions
		idx := hh.Index()
		// Field #0 'Transactions'
		if err = fn2(t.Transactions); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn3(t)
}
func (t *ExecutionPayloadTransactions) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ExecutionPayloadTransactions) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
