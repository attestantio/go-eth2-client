// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 04fa7e5d456af8782705abb482a50276a413a1db9894d2016a90177121f6e7c2
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package bellatrix

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionPayloadTransactions) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ExecutionPayloadTransactions) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(ExecutionPayloadTransactions)
	}
	dstlen := len(dst)
	// Offset #0 'Transactions'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #0 'Transactions'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.Transactions
		vlen := len(t)
		if vlen > 1048576 {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			vlen := len(t)
			if vlen > 1073741824 {
				return dst, sszutils.ErrListTooBig
			}
			dst = append(dst, []byte(t[:])...)
		}
	}
	return dst, nil
}

func (t *ExecutionPayloadTransactions) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 4 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'Transactions' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 4 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #0 'Transactions' (dynamic)
		buf := buf[offset0:]
		val1 := t.Transactions
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset / 4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		val1 = sszutils.ExpandSlice(val1, itemCount)
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val2 := val1[i]
			val2 = sszutils.ExpandSlice(val2, len(buf))
			copy(val2[:], buf)
			val1[i] = val2
		}
		t.Transactions = val1
	}
	return nil
}

func (t *ExecutionPayloadTransactions) SizeSSZ() (size int) {
	if t == nil {
		t = new(ExecutionPayloadTransactions)
	}
	// Field #0 'Transactions' offset (4 bytes)
	size += 4
	{ // Dynamic field #0 'Transactions'
		t := t.Transactions
		vlen := len(t)
		size += vlen * 4 // Offsets
		for i1 := 0; i1 < vlen; i1++ {
			size += len(t[i1])
		}
	}
	return size
}

func (t *ExecutionPayloadTransactions) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ExecutionPayloadTransactions) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(ExecutionPayloadTransactions)
	}
	idx := hh.Index()
	{ // Field #0 'Transactions'
		t := t.Transactions
		vlen := uint64(len(t))
		if vlen > 1048576 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			vlen := uint64(len(t))
			if vlen > 1073741824 {
				return sszutils.ErrListTooBig
			}
			idx := hh.Index()
			hh.PutBytes(t[:])
			limit := sszutils.CalculateLimit(1073741824, vlen, 1)
			hh.MerkleizeWithMixin(idx, vlen, limit)
		}
		limit := sszutils.CalculateLimit(1048576, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	hh.Merkleize(idx)
	return nil
}

