// Code generated by fastssz. DO NOT EDIT.
// Hash: bd021322a0585214e3e2b5d17c3251ad136909024b45304057c72b6c80c84729
// Version: 0.1.3
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/electra"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ExecutionPayloadWithdrawalRequests object
func (e *WithdrawalRequests) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionPayloadWithdrawalRequests object to a target array
func (e *WithdrawalRequests) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'WithdrawalRequests'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.WithdrawalRequests) * 76

	// Field (0) 'WithdrawalRequests'
	if size := len(e.WithdrawalRequests); size > 16 {
		err = ssz.ErrListTooBigFn("ExecutionPayloadWithdrawalRequests.WithdrawalRequests", size, 16)
		return
	}
	for ii := 0; ii < len(e.WithdrawalRequests); ii++ {
		if dst, err = e.WithdrawalRequests[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionPayloadWithdrawalRequests object
func (e *WithdrawalRequests) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'WithdrawalRequests'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'WithdrawalRequests'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 76, 16)
		if err != nil {
			return err
		}
		e.WithdrawalRequests = make([]*electra.WithdrawalRequest, num)
		for ii := 0; ii < num; ii++ {
			if e.WithdrawalRequests[ii] == nil {
				e.WithdrawalRequests[ii] = new(electra.WithdrawalRequest)
			}
			if err = e.WithdrawalRequests[ii].UnmarshalSSZ(buf[ii*76 : (ii+1)*76]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionPayloadWithdrawalRequests object
func (e *WithdrawalRequests) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'WithdrawalRequests'
	size += len(e.WithdrawalRequests) * 76

	return
}

// HashTreeRoot ssz hashes the ExecutionPayloadWithdrawalRequests object
func (e *WithdrawalRequests) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionPayloadWithdrawalRequests object with a hasher
func (e *WithdrawalRequests) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'WithdrawalRequests'
	{
		subIndx := hh.Index()
		num := uint64(len(e.WithdrawalRequests))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.WithdrawalRequests {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ExecutionPayloadWithdrawalRequests object
func (e *WithdrawalRequests) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}
