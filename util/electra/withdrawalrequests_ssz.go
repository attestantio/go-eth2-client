// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 468249a045fa920c16099f92ae25d616dff26cfd0e89204e14614bf20df2d13b
// Version: v1.1.1 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/electra"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *WithdrawalRequests) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *WithdrawalRequests) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(WithdrawalRequests)
	}
	dstlen := len(dst)
	// Offset #0 'WithdrawalRequests'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #0 'WithdrawalRequests'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.WithdrawalRequests
		vlen := len(t)
		if vlen > 16 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(electra.WithdrawalRequest)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *WithdrawalRequests) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 4 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'WithdrawalRequests' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 != 4 {
		return sszutils.ErrOffset
	}
	{ // Field #0 'WithdrawalRequests' (dynamic)
		buf := buf[offset0:]
		val1 := t.WithdrawalRequests
		itemCount := len(buf) / 76
		if len(buf)%76 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val1 = sszutils.ExpandSlice(val1, itemCount)
		for i := 0; i < itemCount; i++ {
			if val1[i] == nil {
				val1[i] = new(electra.WithdrawalRequest)
			}
			buf := buf[76*i : 76*(i+1)]
			if err = val1[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.WithdrawalRequests = val1
	}
	return nil
}

func (t *WithdrawalRequests) SizeSSZ() (size int) {
	if t == nil {
		t = new(WithdrawalRequests)
	}
	// Field #0 'WithdrawalRequests' offset (4 bytes)
	size += 4
	{ // Dynamic field #0 'WithdrawalRequests'
		size += len(t.WithdrawalRequests) * 76
	}
	return size
}

func (t *WithdrawalRequests) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *WithdrawalRequests) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(WithdrawalRequests)
	}
	idx := hh.Index()
	{ // Field #0 'WithdrawalRequests'
		t := t.WithdrawalRequests
		vlen := uint64(len(t))
		if vlen > 16 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(electra.WithdrawalRequest)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(16, vlen, 32))
	}
	hh.Merkleize(idx)
	return nil
}

