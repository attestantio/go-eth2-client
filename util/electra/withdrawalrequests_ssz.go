// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: f19e81346950786c43f78e96cbeaff99346f05d63564935ba3ae294d064436e2
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/electra"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *WithdrawalRequests) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *electra.WithdrawalRequest) (err error) { // *electra.WithdrawalRequest
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t []*electra.WithdrawalRequest) (err error) { // []*electra.WithdrawalRequest
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn1(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn3 := func(t *WithdrawalRequests) (err error) { // *electra.WithdrawalRequests
		dstlen := len(dst)
		// Offset #0 'WithdrawalRequests'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #0 'WithdrawalRequests'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn2(t.WithdrawalRequests); err != nil {
			return err
		}
		return err
	}
	err = fn3(t)
	return dst, err
}
func (t *WithdrawalRequests) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *WithdrawalRequests) SizeSSZ() (size int) {
	sfn1 := func(t []*electra.WithdrawalRequest) (size int) { // []*electra.WithdrawalRequest
		size += len(t) * 76
		return size
	}
	sfn2 := func(t *WithdrawalRequests) (size int) { // *WithdrawalRequests
		size = 0
		size += 4 + sfn1(t.WithdrawalRequests)
		return size
	}
	return sfn2(t)
}

func (t *WithdrawalRequests) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *electra.WithdrawalRequest, buf []byte) (*electra.WithdrawalRequest, error) { // *electra.WithdrawalRequest
		var err error
		if t == nil {
			t = new(electra.WithdrawalRequest)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t []*electra.WithdrawalRequest, buf []byte) ([]*electra.WithdrawalRequest, error) { // []*electra.WithdrawalRequest
		var err error
		buflen := len(buf)
		itemsize := 76
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*electra.WithdrawalRequest, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn1(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn3 := func(t *WithdrawalRequests, buf []byte) (*WithdrawalRequests, error) { // *WithdrawalRequests
		var err error
		if t == nil {
			t = new(WithdrawalRequests)
		}
		bufpos := 4
		buflen := len(buf)
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'WithdrawalRequests'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Dynamic Field #0 'WithdrawalRequests'
		if offset0 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:]
			if t.WithdrawalRequests, err = fn2(t.WithdrawalRequests, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn3(t, buf)
	return err
}

func (t *WithdrawalRequests) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t []*electra.WithdrawalRequest) (err error) { // []*electra.WithdrawalRequest:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t *WithdrawalRequests) (err error) { // *electra.WithdrawalRequests
		idx := hh.Index()
		// Field #0 'WithdrawalRequests'
		if err = fn1(t.WithdrawalRequests); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *WithdrawalRequests) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
