// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: f61034e88bf80370152ca0bd5dbfaa110d609a263322f5daa00b389ab6ca3652
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/electra"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ConsolidationRequests) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	// Offset #0 'ConsolidationRequests'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #0 'ConsolidationRequests'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.ConsolidationRequests
		max := 1
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *ConsolidationRequests) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ConsolidationRequests) SizeSSZ() (size int) {
	size += 4 // Offset for field #0 'ConsolidationRequests'
	{ // Dynamic field #0 'ConsolidationRequests'
		vlen := len(t.ConsolidationRequests)
		size += vlen * 116
	}
	return size
}

func (t *ConsolidationRequests) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 4 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'ConsolidationRequests' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 4 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #0 'ConsolidationRequests' (dynamic)
		buf := buf[offset0:]
		val1 := t.ConsolidationRequests
		itemCount := len(buf)/116
		if len(buf)%116 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val1) < itemCount) {
			val1 = make([]*electra.ConsolidationRequest, itemCount)
		} else if(len(val1) > itemCount) {
			val1 = val1[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val2 := val1[i]
			if val2 == nil {
				val2 = new(electra.ConsolidationRequest)
			}
			buf := buf[116*i:116*(i+1)]
			if err = val2.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val1[i] = val2
		}
		t.ConsolidationRequests = val1
	}
	return nil
}

func (t *ConsolidationRequests) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'ConsolidationRequests'
		t := t.ConsolidationRequests
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(1, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *ConsolidationRequests) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
