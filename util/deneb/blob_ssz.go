// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 751408d419fb93cadeb315c44afb5d1d6e7b1a69f0b5a5c7e771f03c8873b125
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package deneb

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconBlockBlob) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *BeaconBlockBlob) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *BeaconBlockBlob) (err error) { // *deneb.BeaconBlockBlob
		// Field #0 'Blob'
		dst = append(dst, t.Blob[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *BeaconBlockBlob) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *BeaconBlockBlob) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *BeaconBlockBlob) SizeSSZ() (size int) {
	sfn1 := func(t *BeaconBlockBlob) (size int) { // *BeaconBlockBlob
		size = 131072
		return size
	}
	return sfn1(t)
}

func (t *BeaconBlockBlob) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *BeaconBlockBlob) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *BeaconBlockBlob, buf []byte) (*BeaconBlockBlob, error) { // *BeaconBlockBlob
		var err error
		if t == nil {
			t = new(BeaconBlockBlob)
		}
		buflen := len(buf)
		if buflen < 131072 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Blob'
		copy(t.Blob[:], buf[0:131072])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *BeaconBlockBlob) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *BeaconBlockBlob) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *BeaconBlockBlob) (err error) { // *deneb.BeaconBlockBlob
		idx := hh.Index()
		// Field #0 'Blob'
		hh.PutBytes(t.Blob[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *BeaconBlockBlob) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *BeaconBlockBlob) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
