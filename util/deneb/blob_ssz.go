// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: a0acbe95c6fb0b153e729206172caccef798f9afcbbb57525b689189f4c4e2e1
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package deneb

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconBlockBlob) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BeaconBlockBlob) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(BeaconBlockBlob)
	}
	{ // Field #0 'Blob'
		t := &t.Blob
		dst = append(dst, []byte(t[:131072])...)
	}
	return dst, nil
}

func (t *BeaconBlockBlob) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 131072 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Blob' (static)
		buf := buf[0:131072]
		copy(t.Blob[:], buf)
	}
	return nil
}

func (t *BeaconBlockBlob) SizeSSZ() (size int) {
	return 131072
}

func (t *BeaconBlockBlob) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *BeaconBlockBlob) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(BeaconBlockBlob)
	}
	idx := hh.Index()
	{ // Field #0 'Blob'
		t := &t.Blob
		hh.PutBytes(t[:131072])
	}
	hh.Merkleize(idx)
	return nil
}

