// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 8e9e67472e59ef07262b3c0e1918ddeea7586546dbf1d996f9846ea005c4c628
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconState) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BeaconState) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(BeaconState)
	}
	dstlen := len(dst)
	{ // Field #0 'GenesisTime'
		t := t.GenesisTime
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'GenesisValidatorsRoot'
		t := t.GenesisValidatorsRoot
		dst = append(dst, []byte(t[:32])...)
	}
	{ // Field #2 'Slot'
		t := t.Slot
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #3 'Fork'
		t := t.Fork
		if t == nil {
			t = new(phase0.Fork)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #4 'LatestBlockHeader'
		t := t.LatestBlockHeader
		if t == nil {
			t = new(phase0.BeaconBlockHeader)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #5 'BlockRoots'
		t := t.BlockRoots
		vlen := len(t)
		if vlen > 8192 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = append(dst, []byte(t[:32])...)
		}
		if vlen < 8192 {
			dst = sszutils.AppendZeroPadding(dst, (8192-vlen)*32)
		}
	}
	{ // Field #6 'StateRoots'
		t := t.StateRoots
		vlen := len(t)
		if vlen > 8192 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = append(dst, []byte(t[:32])...)
		}
		if vlen < 8192 {
			dst = sszutils.AppendZeroPadding(dst, (8192-vlen)*32)
		}
	}
	// Offset #7 'HistoricalRoots'
	offset7 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #8 'ETH1Data'
		t := t.ETH1Data
		if t == nil {
			t = new(phase0.ETH1Data)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	// Offset #9 'ETH1DataVotes'
	offset9 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #10 'ETH1DepositIndex'
		t := t.ETH1DepositIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	// Offset #11 'Validators'
	offset11 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #12 'Balances'
	offset12 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #13 'RANDAOMixes'
		t := t.RANDAOMixes
		vlen := len(t)
		if vlen > 65536 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = append(dst, []byte(t[:32])...)
		}
		if vlen < 65536 {
			dst = sszutils.AppendZeroPadding(dst, (65536-vlen)*32)
		}
	}
	{ // Field #14 'Slashings'
		t := t.Slashings
		vlen := len(t)
		if vlen > 8192 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint64(dst, uint64(t))
		}
		if vlen < 8192 {
			dst = sszutils.AppendZeroPadding(dst, (8192-vlen)*8)
		}
	}
	// Offset #15 'PreviousEpochParticipation'
	offset15 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #16 'CurrentEpochParticipation'
	offset16 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #17 'JustificationBits'
		t := t.JustificationBits
		vlen := len(t)
		if vlen > 1 {
			return dst, sszutils.ErrVectorLength
		}
		dst = append(dst, []byte(t[:vlen])...)
		if vlen < 1 {
			dst = sszutils.AppendZeroPadding(dst, (1-vlen)*1)
		}
	}
	{ // Field #18 'PreviousJustifiedCheckpoint'
		t := t.PreviousJustifiedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #19 'CurrentJustifiedCheckpoint'
		t := t.CurrentJustifiedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #20 'FinalizedCheckpoint'
		t := t.FinalizedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	// Offset #21 'InactivityScores'
	offset21 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #22 'CurrentSyncCommittee'
		t := t.CurrentSyncCommittee
		if t == nil {
			t = new(SyncCommittee)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #23 'NextSyncCommittee'
		t := t.NextSyncCommittee
		if t == nil {
			t = new(SyncCommittee)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #7 'HistoricalRoots'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		t := t.HistoricalRoots
		vlen := len(t)
		if vlen > 16777216 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = append(dst, []byte(t[:32])...)
		}
	}
	{ // Dynamic Field #9 'ETH1DataVotes'
		sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
		t := t.ETH1DataVotes
		vlen := len(t)
		if vlen > 2048 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.ETH1Data)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #11 'Validators'
		sszutils.UpdateOffset(dst[offset11:offset11+4], len(dst)-dstlen)
		t := t.Validators
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.Validator)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #12 'Balances'
		sszutils.UpdateOffset(dst[offset12:offset12+4], len(dst)-dstlen)
		t := t.Balances
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint64(dst, uint64(t))
		}
	}
	{ // Dynamic Field #15 'PreviousEpochParticipation'
		sszutils.UpdateOffset(dst[offset15:offset15+4], len(dst)-dstlen)
		t := t.PreviousEpochParticipation
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint8(dst, uint8(t))
		}
	}
	{ // Dynamic Field #16 'CurrentEpochParticipation'
		sszutils.UpdateOffset(dst[offset16:offset16+4], len(dst)-dstlen)
		t := t.CurrentEpochParticipation
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint8(dst, uint8(t))
		}
	}
	{ // Dynamic Field #21 'InactivityScores'
		sszutils.UpdateOffset(dst[offset21:offset21+4], len(dst)-dstlen)
		t := t.InactivityScores
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint64(dst, uint64(t))
		}
	}
	return dst, nil
}

func (t *BeaconState) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 2736629 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'GenesisTime' (static)
		buf := buf[0:8]
		t.GenesisTime = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'GenesisValidatorsRoot' (static)
		buf := buf[8:40]
		copy(t.GenesisValidatorsRoot[:], buf)
	}
	{ // Field #2 'Slot' (static)
		buf := buf[40:48]
		t.Slot = phase0.Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #3 'Fork' (static)
		buf := buf[48:64]
		if t.Fork == nil {
			t.Fork = new(phase0.Fork)
		}
		if err = t.Fork.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #4 'LatestBlockHeader' (static)
		buf := buf[64:176]
		if t.LatestBlockHeader == nil {
			t.LatestBlockHeader = new(phase0.BeaconBlockHeader)
		}
		if err = t.LatestBlockHeader.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #5 'BlockRoots' (static)
		buf := buf[176:262320]
		val1 := t.BlockRoots
		val1 = sszutils.ExpandSlice(val1, 8192)
		for i := 0; i < 8192; i++ {
			buf := buf[32*i : 32*(i+1)]
			copy(val1[i][:], buf)
		}
		t.BlockRoots = val1
	}
	{ // Field #6 'StateRoots' (static)
		buf := buf[262320:524464]
		val2 := t.StateRoots
		val2 = sszutils.ExpandSlice(val2, 8192)
		for i := 0; i < 8192; i++ {
			buf := buf[32*i : 32*(i+1)]
			copy(val2[i][:], buf)
		}
		t.StateRoots = val2
	}
	// Field #7 'HistoricalRoots' (offset)
	offset7 := int(sszutils.UnmarshallUint32(buf[524464:524468]))
	if offset7 != 2736629 {
		return sszutils.ErrOffset
	}
	{ // Field #8 'ETH1Data' (static)
		buf := buf[524468:524540]
		if t.ETH1Data == nil {
			t.ETH1Data = new(phase0.ETH1Data)
		}
		if err = t.ETH1Data.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	// Field #9 'ETH1DataVotes' (offset)
	offset9 := int(sszutils.UnmarshallUint32(buf[524540:524544]))
	if offset9 < offset7 || offset9 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #10 'ETH1DepositIndex' (static)
		buf := buf[524544:524552]
		t.ETH1DepositIndex = uint64(sszutils.UnmarshallUint64(buf))
	}
	// Field #11 'Validators' (offset)
	offset11 := int(sszutils.UnmarshallUint32(buf[524552:524556]))
	if offset11 < offset9 || offset11 > buflen {
		return sszutils.ErrOffset
	}
	// Field #12 'Balances' (offset)
	offset12 := int(sszutils.UnmarshallUint32(buf[524556:524560]))
	if offset12 < offset11 || offset12 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #13 'RANDAOMixes' (static)
		buf := buf[524560:2621712]
		val3 := t.RANDAOMixes
		val3 = sszutils.ExpandSlice(val3, 65536)
		for i := 0; i < 65536; i++ {
			buf := buf[32*i : 32*(i+1)]
			copy(val3[i][:], buf)
		}
		t.RANDAOMixes = val3
	}
	{ // Field #14 'Slashings' (static)
		buf := buf[2621712:2687248]
		val4 := t.Slashings
		val4 = sszutils.ExpandSlice(val4, 8192)
		for i := 0; i < 8192; i++ {
			buf := buf[8*i : 8*(i+1)]
			val4[i] = phase0.Gwei(sszutils.UnmarshallUint64(buf))
		}
		t.Slashings = val4
	}
	// Field #15 'PreviousEpochParticipation' (offset)
	offset15 := int(sszutils.UnmarshallUint32(buf[2687248:2687252]))
	if offset15 < offset12 || offset15 > buflen {
		return sszutils.ErrOffset
	}
	// Field #16 'CurrentEpochParticipation' (offset)
	offset16 := int(sszutils.UnmarshallUint32(buf[2687252:2687256]))
	if offset16 < offset15 || offset16 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #17 'JustificationBits' (static)
		buf := buf[2687256:2687257]
		t.JustificationBits = sszutils.ExpandSlice(t.JustificationBits, 1)
		copy(t.JustificationBits[:], buf)
	}
	{ // Field #18 'PreviousJustifiedCheckpoint' (static)
		buf := buf[2687257:2687297]
		if t.PreviousJustifiedCheckpoint == nil {
			t.PreviousJustifiedCheckpoint = new(phase0.Checkpoint)
		}
		if err = t.PreviousJustifiedCheckpoint.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #19 'CurrentJustifiedCheckpoint' (static)
		buf := buf[2687297:2687337]
		if t.CurrentJustifiedCheckpoint == nil {
			t.CurrentJustifiedCheckpoint = new(phase0.Checkpoint)
		}
		if err = t.CurrentJustifiedCheckpoint.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #20 'FinalizedCheckpoint' (static)
		buf := buf[2687337:2687377]
		if t.FinalizedCheckpoint == nil {
			t.FinalizedCheckpoint = new(phase0.Checkpoint)
		}
		if err = t.FinalizedCheckpoint.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	// Field #21 'InactivityScores' (offset)
	offset21 := int(sszutils.UnmarshallUint32(buf[2687377:2687381]))
	if offset21 < offset16 || offset21 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #22 'CurrentSyncCommittee' (static)
		buf := buf[2687381:2712005]
		if t.CurrentSyncCommittee == nil {
			t.CurrentSyncCommittee = new(SyncCommittee)
		}
		if err = t.CurrentSyncCommittee.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #23 'NextSyncCommittee' (static)
		buf := buf[2712005:2736629]
		if t.NextSyncCommittee == nil {
			t.NextSyncCommittee = new(SyncCommittee)
		}
		if err = t.NextSyncCommittee.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #7 'HistoricalRoots' (dynamic)
		buf := buf[offset7:offset9]
		val5 := t.HistoricalRoots
		itemCount := len(buf) / 32
		if len(buf)%32 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val5 = sszutils.ExpandSlice(val5, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[32*i : 32*(i+1)]
			copy(val5[i][:], buf)
		}
		t.HistoricalRoots = val5
	}
	{ // Field #9 'ETH1DataVotes' (dynamic)
		buf := buf[offset9:offset11]
		val6 := t.ETH1DataVotes
		itemCount := len(buf) / 72
		if len(buf)%72 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val6 = sszutils.ExpandSlice(val6, itemCount)
		for i := 0; i < itemCount; i++ {
			if val6[i] == nil {
				val6[i] = new(phase0.ETH1Data)
			}
			buf := buf[72*i : 72*(i+1)]
			if err = val6[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.ETH1DataVotes = val6
	}
	{ // Field #11 'Validators' (dynamic)
		buf := buf[offset11:offset12]
		val7 := t.Validators
		itemCount := len(buf) / 121
		if len(buf)%121 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val7 = sszutils.ExpandSlice(val7, itemCount)
		for i := 0; i < itemCount; i++ {
			if val7[i] == nil {
				val7[i] = new(phase0.Validator)
			}
			buf := buf[121*i : 121*(i+1)]
			if err = val7[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.Validators = val7
	}
	{ // Field #12 'Balances' (dynamic)
		buf := buf[offset12:offset15]
		val8 := t.Balances
		itemCount := len(buf) / 8
		if len(buf)%8 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val8 = sszutils.ExpandSlice(val8, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[8*i : 8*(i+1)]
			val8[i] = phase0.Gwei(sszutils.UnmarshallUint64(buf))
		}
		t.Balances = val8
	}
	{ // Field #15 'PreviousEpochParticipation' (dynamic)
		buf := buf[offset15:offset16]
		val9 := t.PreviousEpochParticipation
		itemCount := len(buf)
		val9 = sszutils.ExpandSlice(val9, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[1*i : 1*(i+1)]
			val9[i] = ParticipationFlags(sszutils.UnmarshallUint8(buf))
		}
		t.PreviousEpochParticipation = val9
	}
	{ // Field #16 'CurrentEpochParticipation' (dynamic)
		buf := buf[offset16:offset21]
		val10 := t.CurrentEpochParticipation
		itemCount := len(buf)
		val10 = sszutils.ExpandSlice(val10, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[1*i : 1*(i+1)]
			val10[i] = ParticipationFlags(sszutils.UnmarshallUint8(buf))
		}
		t.CurrentEpochParticipation = val10
	}
	{ // Field #21 'InactivityScores' (dynamic)
		buf := buf[offset21:]
		val11 := t.InactivityScores
		itemCount := len(buf) / 8
		if len(buf)%8 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val11 = sszutils.ExpandSlice(val11, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[8*i : 8*(i+1)]
			val11[i] = uint64(sszutils.UnmarshallUint64(buf))
		}
		t.InactivityScores = val11
	}
	return nil
}

func (t *BeaconState) SizeSSZ() (size int) {
	if t == nil {
		t = new(BeaconState)
	}
	// Field #0 'GenesisTime' static (8 bytes)
	// Field #1 'GenesisValidatorsRoot' static (32 bytes)
	// Field #2 'Slot' static (8 bytes)
	// Field #3 'Fork' static (16 bytes)
	// Field #4 'LatestBlockHeader' static (112 bytes)
	// Field #5 'BlockRoots' static (262144 bytes)
	// Field #6 'StateRoots' static (262144 bytes)
	// Field #7 'HistoricalRoots' offset (4 bytes)
	// Field #8 'ETH1Data' static (72 bytes)
	// Field #9 'ETH1DataVotes' offset (4 bytes)
	// Field #10 'ETH1DepositIndex' static (8 bytes)
	// Field #11 'Validators' offset (4 bytes)
	// Field #12 'Balances' offset (4 bytes)
	// Field #13 'RANDAOMixes' static (2097152 bytes)
	// Field #14 'Slashings' static (65536 bytes)
	// Field #15 'PreviousEpochParticipation' offset (4 bytes)
	// Field #16 'CurrentEpochParticipation' offset (4 bytes)
	// Field #17 'JustificationBits' static (1 bytes)
	// Field #18 'PreviousJustifiedCheckpoint' static (40 bytes)
	// Field #19 'CurrentJustifiedCheckpoint' static (40 bytes)
	// Field #20 'FinalizedCheckpoint' static (40 bytes)
	// Field #21 'InactivityScores' offset (4 bytes)
	// Field #22 'CurrentSyncCommittee' static (24624 bytes)
	// Field #23 'NextSyncCommittee' static (24624 bytes)
	size += 2736629
	{ // Dynamic field #7 'HistoricalRoots'
		size += len(t.HistoricalRoots) * 32
	}
	{ // Dynamic field #9 'ETH1DataVotes'
		size += len(t.ETH1DataVotes) * 72
	}
	{ // Dynamic field #11 'Validators'
		size += len(t.Validators) * 121
	}
	{ // Dynamic field #12 'Balances'
		size += len(t.Balances) * 8
	}
	{ // Dynamic field #15 'PreviousEpochParticipation'
		size += len(t.PreviousEpochParticipation)
	}
	{ // Dynamic field #16 'CurrentEpochParticipation'
		size += len(t.CurrentEpochParticipation)
	}
	{ // Dynamic field #21 'InactivityScores'
		size += len(t.InactivityScores) * 8
	}
	return size
}

func (t *BeaconState) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *BeaconState) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(BeaconState)
	}
	idx := hh.Index()
	{ // Field #0 'GenesisTime'
		t := t.GenesisTime
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'GenesisValidatorsRoot'
		t := t.GenesisValidatorsRoot
		hh.PutBytes(t[:32])
	}
	{ // Field #2 'Slot'
		t := t.Slot
		hh.PutUint64(uint64(t))
	}
	{ // Field #3 'Fork'
		t := t.Fork
		if t == nil {
			t = new(phase0.Fork)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #4 'LatestBlockHeader'
		t := t.LatestBlockHeader
		if t == nil {
			t = new(phase0.BeaconBlockHeader)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #5 'BlockRoots'
		t := t.BlockRoots
		vlen := len(t)
		if vlen > 8192 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		for i := 0; i < 8192; i++ {
			var val1 phase0.Root
			if i < vlen {
				val1 = t[i]
			}
			hh.PutBytes(val1[:32])
		}
		hh.Merkleize(idx)
	}
	{ // Field #6 'StateRoots'
		t := t.StateRoots
		vlen := len(t)
		if vlen > 8192 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		for i := 0; i < 8192; i++ {
			var val2 phase0.Root
			if i < vlen {
				val2 = t[i]
			}
			hh.PutBytes(val2[:32])
		}
		hh.Merkleize(idx)
	}
	{ // Field #7 'HistoricalRoots'
		t := t.HistoricalRoots
		vlen := uint64(len(t))
		if vlen > 16777216 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			hh.PutBytes(t[:32])
		}
		limit := sszutils.CalculateLimit(16777216, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #8 'ETH1Data'
		t := t.ETH1Data
		if t == nil {
			t = new(phase0.ETH1Data)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #9 'ETH1DataVotes'
		t := t.ETH1DataVotes
		vlen := uint64(len(t))
		if vlen > 2048 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.ETH1Data)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(2048, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #10 'ETH1DepositIndex'
		t := t.ETH1DepositIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #11 'Validators'
		t := t.Validators
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.Validator)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(1099511627776, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #12 'Balances'
		t := t.Balances
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			hh.AppendUint64(uint64(t))
		}
		hh.FillUpTo32()
		limit := sszutils.CalculateLimit(1099511627776, vlen, 8)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #13 'RANDAOMixes'
		t := t.RANDAOMixes
		vlen := len(t)
		if vlen > 65536 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		for i := 0; i < 65536; i++ {
			var val3 phase0.Root
			if i < vlen {
				val3 = t[i]
			}
			hh.PutBytes(val3[:32])
		}
		hh.Merkleize(idx)
	}
	{ // Field #14 'Slashings'
		t := t.Slashings
		vlen := len(t)
		if vlen > 8192 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		for i := 0; i < 8192; i++ {
			var val4 phase0.Gwei
			if i < vlen {
				val4 = t[i]
			}
			hh.AppendUint64(uint64(val4))
		}
		hh.FillUpTo32()
		hh.Merkleize(idx)
	}
	{ // Field #15 'PreviousEpochParticipation'
		t := t.PreviousEpochParticipation
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			hh.AppendUint8(uint8(t))
		}
		hh.FillUpTo32()
		limit := sszutils.CalculateLimit(1099511627776, vlen, 1)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #16 'CurrentEpochParticipation'
		t := t.CurrentEpochParticipation
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			hh.AppendUint8(uint8(t))
		}
		hh.FillUpTo32()
		limit := sszutils.CalculateLimit(1099511627776, vlen, 1)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #17 'JustificationBits'
		t := t.JustificationBits
		vlen := len(t)
		if vlen > 1 {
			return sszutils.ErrVectorLength
		}
		val := t[:]
		if vlen < 1 {
			val = sszutils.AppendZeroPadding(val, (1-vlen)*1)
		}
		hh.PutBytes(val[:1])
	}
	{ // Field #18 'PreviousJustifiedCheckpoint'
		t := t.PreviousJustifiedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #19 'CurrentJustifiedCheckpoint'
		t := t.CurrentJustifiedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #20 'FinalizedCheckpoint'
		t := t.FinalizedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #21 'InactivityScores'
		t := t.InactivityScores
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			hh.AppendUint64(uint64(t))
		}
		hh.FillUpTo32()
		limit := sszutils.CalculateLimit(1099511627776, vlen, 8)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #22 'CurrentSyncCommittee'
		t := t.CurrentSyncCommittee
		if t == nil {
			t = new(SyncCommittee)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #23 'NextSyncCommittee'
		t := t.NextSyncCommittee
		if t == nil {
			t = new(SyncCommittee)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

