// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: f41c74e86b35cb08f608a4859080876c7ea406bf45eac8c8bd4e78f2e2da197e
// Version: v1.1.1 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SignedContributionAndProof) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SignedContributionAndProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(SignedContributionAndProof)
	}
	{ // Field #0 'Message'
		t := t.Message
		if t == nil {
			t = new(ContributionAndProof)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #1 'Signature'
		dst = append(dst, []byte(t.Signature[:96])...)
	}
	return dst, nil
}

func (t *SignedContributionAndProof) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 360 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Message' (static)
		buf := buf[0:264]
		if t.Message == nil {
			t.Message = new(ContributionAndProof)
		}
		if err = t.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #1 'Signature' (static)
		buf := buf[264:360]
		copy(t.Signature[:], buf)
	}
	return nil
}

func (t *SignedContributionAndProof) SizeSSZ() (size int) {
	return 360
}

func (t *SignedContributionAndProof) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *SignedContributionAndProof) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(SignedContributionAndProof)
	}
	idx := hh.Index()
	{ // Field #0 'Message'
		t := t.Message
		if t == nil {
			t = new(ContributionAndProof)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #1 'Signature'
		hh.PutBytes(t.Signature[:96])
	}
	hh.Merkleize(idx)
	return nil
}

