// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: f43b96d053ad522c73c8151e8080003c7dcd892cd0fd238a2bb3df9f25d72fa4
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SignedContributionAndProof) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *ContributionAndProof) (err error) { // *altair.ContributionAndProof
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn2 := func(t *SignedContributionAndProof) (err error) { // *altair.SignedContributionAndProof
		// Field #0 'Message'
		if err = fn1(t.Message); err != nil {
			return err
		}
		// Field #1 'Signature'
		dst = append(dst, t.Signature[:]...)
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *SignedContributionAndProof) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SignedContributionAndProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *SignedContributionAndProof) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t *ContributionAndProof) (size int) { // *ContributionAndProof
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn2 := func(t *SignedContributionAndProof) (size int) { // *SignedContributionAndProof
		size = 96
		size += sfn1(t.Message)
		return size
	}
	return sfn2(t)
}
func (t *SignedContributionAndProof) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *SignedContributionAndProof) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	sfn1 := func() (size int) { // go_bitfield.Bitvector128:16:SYNC_COMMITTEE_SIZE/SYNC_COMMITTEE_SUBNET_COUNT
		hasLimit, limit, _ := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/SYNC_COMMITTEE_SUBNET_COUNT")
		if !hasLimit {
			limit = 16
		}
		size += int(limit) * 1
		return size
	}()
	sfn2 := func() (size int) { // *SyncCommitteeContribution
		size = 144
		size += sfn1
		return size
	}()
	sfn3 := func() (size int) { // *ContributionAndProof
		size = 104
		size += sfn2
		return size
	}()
	fn1 := func(t *ContributionAndProof, buf []byte) (*ContributionAndProof, error) { // *ContributionAndProof
		var err error
		if t == nil {
			t = new(ContributionAndProof)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn2 := func(t *SignedContributionAndProof, buf []byte) (*SignedContributionAndProof, error) { // *SignedContributionAndProof
		var err error
		if t == nil {
			t = new(SignedContributionAndProof)
		}
		bufpos := 0
		buflen := len(buf)
		minsize := 96
		if buflen < minsize {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Message'
		{
			fieldsize := sfn3
			minsize += fieldsize
			if buflen < minsize {
				return t, sszutils.ErrUnexpectedEOF
			}
			if t.Message, err = fn1(t.Message, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Field #1 'Signature'
		{
			fieldsize := 96
			copy(t.Signature[:], buf[bufpos:bufpos+fieldsize])
			bufpos += fieldsize
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}
func (t *SignedContributionAndProof) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *SignedContributionAndProof) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t *ContributionAndProof) (err error) { // *altair.ContributionAndProof
		err = t.HashTreeRootWithDyn(ds, hh)
		return err
	}
	fn2 := func(t *SignedContributionAndProof) (err error) { // *altair.SignedContributionAndProof
		idx := hh.Index()
		// Field #0 'Message'
		if err = fn1(t.Message); err != nil {
			return err
		}
		// Field #1 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *SignedContributionAndProof) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *SignedContributionAndProof) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *SignedContributionAndProof) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
