// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 32b8d086f8b089aa3deecb0ce46c310273a3435a37eb7b751d4f216225163d6e
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SignedContributionAndProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'Message'
		t := t.Message
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #1 'Signature'
		t := t.Signature
		limit := 96
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *SignedContributionAndProof) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SignedContributionAndProof) SizeSSZ() (size int) {
	return 360
}

func (t *SignedContributionAndProof) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 360 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Message' (static)
		buf := buf[0:264]
		if t.Message == nil {
			t.Message = new(ContributionAndProof)
		}
		if err = t.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #1 'Signature' (static)
		buf := buf[264:360]
		copy(t.Signature[:], buf)
	}
	return nil
}

func (t *SignedContributionAndProof) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Message'
		t := t.Message
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #1 'Signature'
		t := t.Signature
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *SignedContributionAndProof) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
