// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: ae1b162c70448d3f1b09561f14f0a82fbda86f98b67103376271c44d5a6c86ee
// Version: v1.1.1 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ContributionAndProof) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ContributionAndProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(ContributionAndProof)
	}
	{ // Field #0 'AggregatorIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.AggregatorIndex))
	}
	{ // Field #1 'Contribution'
		t := t.Contribution
		if t == nil {
			t = new(SyncCommitteeContribution)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #2 'SelectionProof'
		dst = append(dst, []byte(t.SelectionProof[:96])...)
	}
	return dst, nil
}

func (t *ContributionAndProof) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 264 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'AggregatorIndex' (static)
		buf := buf[0:8]
		t.AggregatorIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'Contribution' (static)
		buf := buf[8:168]
		if t.Contribution == nil {
			t.Contribution = new(SyncCommitteeContribution)
		}
		if err = t.Contribution.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #2 'SelectionProof' (static)
		buf := buf[168:264]
		copy(t.SelectionProof[:], buf)
	}
	return nil
}

func (t *ContributionAndProof) SizeSSZ() (size int) {
	return 264
}

func (t *ContributionAndProof) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *ContributionAndProof) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(ContributionAndProof)
	}
	idx := hh.Index()
	{ // Field #0 'AggregatorIndex'
		hh.PutUint64(uint64(t.AggregatorIndex))
	}
	{ // Field #1 'Contribution'
		t := t.Contribution
		if t == nil {
			t = new(SyncCommitteeContribution)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #2 'SelectionProof'
		hh.PutBytes(t.SelectionProof[:96])
	}
	hh.Merkleize(idx)
	return nil
}

