// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 6224b6f630cdaf53780feb2006fd8c595febd5cf2d31c495c8ed949866c71c6f
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ContributionAndProof) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *SyncCommitteeContribution) (err error) { // *altair.SyncCommitteeContribution
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn2 := func(t *ContributionAndProof) (err error) { // *altair.ContributionAndProof
		// Field #0 'AggregatorIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.AggregatorIndex))
		// Field #1 'Contribution'
		if err = fn1(t.Contribution); err != nil {
			return err
		}
		// Field #2 'SelectionProof'
		dst = append(dst, t.SelectionProof[:]...)
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *ContributionAndProof) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ContributionAndProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *ContributionAndProof) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t *SyncCommitteeContribution) (size int) { // *SyncCommitteeContribution
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn2 := func(t *ContributionAndProof) (size int) { // *ContributionAndProof
		size = 104
		size += sfn1(t.Contribution)
		return size
	}
	return sfn2(t)
}
func (t *ContributionAndProof) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *ContributionAndProof) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	sfn1 := func() (size int) { // go_bitfield.Bitvector128:16:SYNC_COMMITTEE_SIZE/SYNC_COMMITTEE_SUBNET_COUNT
		hasLimit, limit, _ := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/SYNC_COMMITTEE_SUBNET_COUNT")
		if !hasLimit {
			limit = 16
		}
		size += int(limit) * 1
		return size
	}()
	sfn2 := func() (size int) { // *SyncCommitteeContribution
		size = 144
		size += sfn1
		return size
	}()
	fn1 := func(t *SyncCommitteeContribution, buf []byte) (*SyncCommitteeContribution, error) { // *SyncCommitteeContribution
		var err error
		if t == nil {
			t = new(SyncCommitteeContribution)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn2 := func(t *ContributionAndProof, buf []byte) (*ContributionAndProof, error) { // *ContributionAndProof
		var err error
		if t == nil {
			t = new(ContributionAndProof)
		}
		bufpos := 0
		buflen := len(buf)
		minsize := 104
		if buflen < minsize {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'AggregatorIndex'
		{
			fieldsize := 8
			t.AggregatorIndex = (phase0.ValidatorIndex)(sszutils.UnmarshallUint64(buf[bufpos : bufpos+fieldsize]))
			bufpos += fieldsize
		}
		// Field #1 'Contribution'
		{
			fieldsize := sfn2
			minsize += fieldsize
			if buflen < minsize {
				return t, sszutils.ErrUnexpectedEOF
			}
			if t.Contribution, err = fn1(t.Contribution, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Field #2 'SelectionProof'
		{
			fieldsize := 96
			copy(t.SelectionProof[:], buf[bufpos:bufpos+fieldsize])
			bufpos += fieldsize
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}
func (t *ContributionAndProof) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *ContributionAndProof) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t *SyncCommitteeContribution) (err error) { // *altair.SyncCommitteeContribution
		err = t.HashTreeRootWithDyn(ds, hh)
		return err
	}
	fn2 := func(t *ContributionAndProof) (err error) { // *altair.ContributionAndProof
		idx := hh.Index()
		// Field #0 'AggregatorIndex'
		hh.PutUint64(uint64(t.AggregatorIndex))
		// Field #1 'Contribution'
		if err = fn1(t.Contribution); err != nil {
			return err
		}
		// Field #2 'SelectionProof'
		hh.PutBytes(t.SelectionProof[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *ContributionAndProof) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ContributionAndProof) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *ContributionAndProof) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
