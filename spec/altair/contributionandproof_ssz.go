// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: b1bc8c615551197336f04cc1bf17724c4184313132eca46749c2980af29967c9
// Version: v0.0.0-20250924020059-826e7b1c49b5 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ContributionAndProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'AggregatorIndex'
		t := t.AggregatorIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'Contribution'
		t := t.Contribution
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #2 'SelectionProof'
		t := t.SelectionProof
		limit := 96
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *ContributionAndProof) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ContributionAndProof) SizeSSZ() (size int) {
	return 264
}

func (t *ContributionAndProof) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 264 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'AggregatorIndex' (static)
		buf := buf[0:8]
		t.AggregatorIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'Contribution' (static)
		buf := buf[8:168]
		if t.Contribution == nil {
			t.Contribution = new(SyncCommitteeContribution)
		}
		if err = t.Contribution.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #2 'SelectionProof' (static)
		buf := buf[168:264]
		copy(t.SelectionProof[:], buf)
	}
	return nil
}

func (t *ContributionAndProof) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'AggregatorIndex'
		t := t.AggregatorIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'Contribution'
		t := t.Contribution
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #2 'SelectionProof'
		t := t.SelectionProof
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *ContributionAndProof) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
