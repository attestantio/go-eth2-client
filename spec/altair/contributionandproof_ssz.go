// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: b1bc8c615551197336f04cc1bf17724c4184313132eca46749c2980af29967c9
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *ContributionAndProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t go_bitfield.Bitvector128) (err error) { // bitfield.Bitvector128:16
		limit := 16
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		vlimit := int(limit)
		if vlimit > vlen {
			vlimit = vlen
		}
		dst = append(dst, t[:vlimit]...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, int(limit)-vlen)
		}
		return err
	}
	fn2 := func(t *SyncCommitteeContribution) (err error) { // *altair.SyncCommitteeContribution
		// Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
		// Field #1 'BeaconBlockRoot'
		dst = append(dst, t.BeaconBlockRoot[:]...)
		// Field #2 'SubcommitteeIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.SubcommitteeIndex))
		// Field #3 'AggregationBits'
		if err = fn1(t.AggregationBits); err != nil {
			return err
		}
		// Field #4 'Signature'
		dst = append(dst, t.Signature[:]...)
		return err
	}
	fn3 := func(t *ContributionAndProof) (err error) { // *altair.ContributionAndProof
		// Field #0 'AggregatorIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.AggregatorIndex))
		// Field #1 'Contribution'
		if err = fn2(t.Contribution); err != nil {
			return err
		}
		// Field #2 'SelectionProof'
		dst = append(dst, t.SelectionProof[:]...)
		return err
	}
	err = fn3(t)
	return dst, err
}
func (t *ContributionAndProof) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *ContributionAndProof) SizeSSZ() (size int) {
	sfn1 := func(t go_bitfield.Bitvector128) (size int) { // go_bitfield.Bitvector128:16
		limit := 16
		size += int(limit) * 1
		return size
	}
	sfn2 := func(t *SyncCommitteeContribution) (size int) { // *SyncCommitteeContribution
		size = 144
		size += sfn1(t.AggregationBits)
		return size
	}
	sfn3 := func(t *ContributionAndProof) (size int) { // *ContributionAndProof
		size = 104
		size += sfn2(t.Contribution)
		return size
	}
	return sfn3(t)
}

func (t *ContributionAndProof) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t go_bitfield.Bitvector128, buf []byte) (go_bitfield.Bitvector128, error) { // go_bitfield.Bitvector128:16
		var err error
		itemsize := 1
		limit := 16
		if len(t) < int(limit) {
			t = make(go_bitfield.Bitvector128, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		copy(t[:], buf)
		return t, err
	}
	fn2 := func(t *SyncCommitteeContribution, buf []byte) (*SyncCommitteeContribution, error) { // *SyncCommitteeContribution
		var err error
		if t == nil {
			t = new(SyncCommitteeContribution)
		}
		buflen := len(buf)
		if buflen < 160 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Slot'
		t.Slot = (phase0.Slot)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'BeaconBlockRoot'
		copy(t.BeaconBlockRoot[:], buf[8:40])
		// Field #2 'SubcommitteeIndex'
		t.SubcommitteeIndex = (uint64)(sszutils.UnmarshallUint64(buf[40:48]))
		// Field #3 'AggregationBits'
		if t.AggregationBits, err = fn1(t.AggregationBits, buf[48:64]); err != nil {
			return t, err
		}
		// Field #4 'Signature'
		copy(t.Signature[:], buf[64:160])
		return t, err
	}
	fn3 := func(t *ContributionAndProof, buf []byte) (*ContributionAndProof, error) { // *ContributionAndProof
		var err error
		if t == nil {
			t = new(ContributionAndProof)
		}
		buflen := len(buf)
		if buflen < 264 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'AggregatorIndex'
		t.AggregatorIndex = (phase0.ValidatorIndex)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'Contribution'
		if t.Contribution, err = fn2(t.Contribution, buf[8:168]); err != nil {
			return t, err
		}
		// Field #2 'SelectionProof'
		copy(t.SelectionProof[:], buf[168:264])
		return t, err
	}
	_, err = fn3(t, buf)
	return err
}

func (t *ContributionAndProof) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t go_bitfield.Bitvector128) (err error) { // bitfield.Bitvector128:16
		limit := 16
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn2 := func(t *SyncCommitteeContribution) (err error) { // *altair.SyncCommitteeContribution
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'BeaconBlockRoot'
		hh.PutBytes(t.BeaconBlockRoot[:])
		// Field #2 'SubcommitteeIndex'
		hh.PutUint64(uint64(t.SubcommitteeIndex))
		// Field #3 'AggregationBits'
		if err = fn1(t.AggregationBits); err != nil {
			return err
		}
		// Field #4 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	fn3 := func(t *ContributionAndProof) (err error) { // *altair.ContributionAndProof
		idx := hh.Index()
		// Field #0 'AggregatorIndex'
		hh.PutUint64(uint64(t.AggregatorIndex))
		// Field #1 'Contribution'
		if err = fn2(t.Contribution); err != nil {
			return err
		}
		// Field #2 'SelectionProof'
		hh.PutBytes(t.SelectionProof[:])
		hh.Merkleize(idx)
		return err
	}
	return fn3(t)
}
func (t *ContributionAndProof) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
