// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 6ce06688d46c6e09e9d87b143e6a17e6e7d883048081eb03a41fcce6734a3eec
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SyncCommitteeMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *SyncCommitteeMessage) (err error) { // *altair.SyncCommitteeMessage
		// Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
		// Field #1 'BeaconBlockRoot'
		dst = append(dst, t.BeaconBlockRoot[:]...)
		// Field #2 'ValidatorIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ValidatorIndex))
		// Field #3 'Signature'
		dst = append(dst, t.Signature[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *SyncCommitteeMessage) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *SyncCommitteeMessage) SizeSSZ() (size int) {
	sfn1 := func(t *SyncCommitteeMessage) (size int) { // *SyncCommitteeMessage
		size = 144
		return size
	}
	return sfn1(t)
}

func (t *SyncCommitteeMessage) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *SyncCommitteeMessage, buf []byte) (*SyncCommitteeMessage, error) { // *SyncCommitteeMessage
		var err error
		if t == nil {
			t = new(SyncCommitteeMessage)
		}
		buflen := len(buf)
		if buflen < 144 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Slot'
		t.Slot = (phase0.Slot)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'BeaconBlockRoot'
		copy(t.BeaconBlockRoot[:], buf[8:40])
		// Field #2 'ValidatorIndex'
		t.ValidatorIndex = (phase0.ValidatorIndex)(sszutils.UnmarshallUint64(buf[40:48]))
		// Field #3 'Signature'
		copy(t.Signature[:], buf[48:144])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *SyncCommitteeMessage) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *SyncCommitteeMessage) (err error) { // *altair.SyncCommitteeMessage
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'BeaconBlockRoot'
		hh.PutBytes(t.BeaconBlockRoot[:])
		// Field #2 'ValidatorIndex'
		hh.PutUint64(uint64(t.ValidatorIndex))
		// Field #3 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *SyncCommitteeMessage) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
