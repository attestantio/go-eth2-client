// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 059b38c5c0053c1b5ca2f6e9e22f0a7325334b1c803666fe7d0f04b783d6a8a7
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SyncCommitteeMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(SyncCommitteeMessage)
	}
	{ // Field #0 'Slot'
		t := t.Slot
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'BeaconBlockRoot'
		t := t.BeaconBlockRoot
		dst = append(dst, []byte(t[:32])...)
	}
	{ // Field #2 'ValidatorIndex'
		t := t.ValidatorIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #3 'Signature'
		t := &t.Signature
		dst = append(dst, []byte(t[:96])...)
	}
	return dst, nil
}

func (t *SyncCommitteeMessage) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SyncCommitteeMessage) SizeSSZ() (size int) {
	return 144
}

func (t *SyncCommitteeMessage) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 144 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Slot' (static)
		buf := buf[0:8]
		t.Slot = phase0.Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'BeaconBlockRoot' (static)
		buf := buf[8:40]
		copy(t.BeaconBlockRoot[:], buf)
	}
	{ // Field #2 'ValidatorIndex' (static)
		buf := buf[40:48]
		t.ValidatorIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #3 'Signature' (static)
		buf := buf[48:144]
		copy(t.Signature[:], buf)
	}
	return nil
}

func (t *SyncCommitteeMessage) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(SyncCommitteeMessage)
	}
	idx := hh.Index()
	{ // Field #0 'Slot'
		t := t.Slot
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'BeaconBlockRoot'
		t := t.BeaconBlockRoot
		hh.PutBytes(t[:32])
	}
	{ // Field #2 'ValidatorIndex'
		t := t.ValidatorIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #3 'Signature'
		t := &t.Signature
		hh.PutBytes(t[:96])
	}
	hh.Merkleize(idx)
	return nil
}

func (t *SyncCommitteeMessage) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
