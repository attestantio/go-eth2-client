// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 575221f667dad10fb156105bca5a29188711d6a3ed9ab3a2fb7c5ba8bebd22da
// Version: v1.0.1 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SyncAggregatorSelectionData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'Slot'
		t := t.Slot
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'SubcommitteeIndex'
		t := t.SubcommitteeIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	return dst, nil
}

func (t *SyncAggregatorSelectionData) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SyncAggregatorSelectionData) SizeSSZ() (size int) {
	return 16
}

func (t *SyncAggregatorSelectionData) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 16 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Slot' (static)
		buf := buf[0:8]
		t.Slot = phase0.Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'SubcommitteeIndex' (static)
		buf := buf[8:16]
		t.SubcommitteeIndex = uint64(sszutils.UnmarshallUint64(buf))
	}
	return nil
}

func (t *SyncAggregatorSelectionData) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Slot'
		t := t.Slot
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'SubcommitteeIndex'
		t := t.SubcommitteeIndex
		hh.PutUint64(uint64(t))
	}
	hh.Merkleize(idx)
	return nil
}

func (t *SyncAggregatorSelectionData) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
