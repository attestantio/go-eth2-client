// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: ef63eb1744f9eafa49228c8d5aa4faeb48f4c49cc5f7502ae0580261ccdd0ae7
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SyncCommittee) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t []phase0.BLSPubKey) (err error) { // []phase0.BLSPubKey:512:SYNC_COMMITTEE_SIZE:48
		hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 512
		}
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*48)
		}
		return err
	}
	fn2 := func(t *SyncCommittee) (err error) { // *altair.SyncCommittee
		// Field #0 'Pubkeys'
		if err = fn1(t.Pubkeys); err != nil {
			return err
		}
		// Field #1 'AggregatePubkey'
		dst = append(dst, t.AggregatePubkey[:]...)
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *SyncCommittee) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SyncCommittee) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *SyncCommittee) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t []phase0.BLSPubKey) (size int) { // []phase0.BLSPubKey:512:SYNC_COMMITTEE_SIZE:48
		hasLimit, limit, _ := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE")
		if !hasLimit {
			limit = 512
		}
		size += int(limit) * 48
		return size
	}
	sfn2 := func(t *SyncCommittee) (size int) { // *SyncCommittee
		size = 48
		size += sfn1(t.Pubkeys)
		return size
	}
	return sfn2(t)
}
func (t *SyncCommittee) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *SyncCommittee) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	sfn1 := func() (size int) { // []phase0.BLSPubKey:512:SYNC_COMMITTEE_SIZE:48
		hasLimit, limit, _ := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE")
		if !hasLimit {
			limit = 512
		}
		size += int(limit) * 48
		return size
	}()
	fn1 := func(t []phase0.BLSPubKey, buf []byte) ([]phase0.BLSPubKey, error) { // []phase0.BLSPubKey:512:SYNC_COMMITTEE_SIZE:48
		var err error
		itemsize := 48
		limit := sfn1 / itemsize
		if len(t) < int(limit) {
			t = make([]phase0.BLSPubKey, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		for i := 0; i < int(limit); i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn2 := func(t *SyncCommittee, buf []byte) (*SyncCommittee, error) { // *SyncCommittee
		var err error
		if t == nil {
			t = new(SyncCommittee)
		}
		bufpos := 0
		buflen := len(buf)
		minsize := 48
		if buflen < minsize {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Pubkeys'
		{
			fieldsize := sfn1
			minsize += fieldsize
			if buflen < minsize {
				return t, sszutils.ErrUnexpectedEOF
			}
			if t.Pubkeys, err = fn1(t.Pubkeys, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Field #1 'AggregatePubkey'
		{
			fieldsize := 48
			copy(t.AggregatePubkey[:], buf[bufpos:bufpos+fieldsize])
			bufpos += fieldsize
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}
func (t *SyncCommittee) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *SyncCommittee) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t []phase0.BLSPubKey) (err error) { // []phase0.BLSPubKey:512:SYNC_COMMITTEE_SIZE:48
		hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 512
		}
		idx := hh.Index()
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		for i := vlen; i < int(limit); i++ {
			hh.PutUint8(0)
		}
		hh.Merkleize(idx)
		return err
	}
	fn2 := func(t *SyncCommittee) (err error) { // *altair.SyncCommittee
		idx := hh.Index()
		// Field #0 'Pubkeys'
		if err = fn1(t.Pubkeys); err != nil {
			return err
		}
		// Field #1 'AggregatePubkey'
		hh.PutBytes(t.AggregatePubkey[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *SyncCommittee) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *SyncCommittee) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *SyncCommittee) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
