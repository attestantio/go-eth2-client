// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 1bfa0ef1cf0a305fcadf526e076027693fadca67fd0dbb1b8e63a0a418245d36
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SyncCommittee) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'Pubkeys'
		t := t.Pubkeys
		limit := 512
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			limit := 48
			dst = append(dst, []byte(t[:limit])...)
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*48)
		}
	}
	{ // Field #1 'AggregatePubkey'
		t := t.AggregatePubkey
		limit := 48
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *SyncCommittee) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SyncCommittee) SizeSSZ() (size int) {
	return 24624
}

func (t *SyncCommittee) UnmarshalSSZ(buf []byte) (err error) {
	size1 := 48 * 512
	exproffset := 0
	buflen := len(buf)
	if buflen < size1+48 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Pubkeys' (static)
		buf := buf[0:size1+0]
		exproffset += int(size1)
		val1 := t.Pubkeys
		if(len(val1) < 512) {
			val1 = make([]phase0.BLSPubKey, 512)
		} else if(len(val1) > 512) {
			val1 = val1[:512]
		}
		for i := 0; i < 512; i++ {
			val2 := val1[i]
			buf := buf[48*i:48*(i+1)]
			copy(val2[:], buf)
			val1[i] = val2
		}
		t.Pubkeys = val1
	}
	{ // Field #1 'AggregatePubkey' (static)
		buf := buf[exproffset+0:exproffset+48]
		val3 := t.AggregatePubkey
		copy(val3[:], buf)
		t.AggregatePubkey = val3
	}
	return nil
}

func (t *SyncCommittee) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Pubkeys'
		t := t.Pubkeys
		idx := hh.Index()
		vlen := len(t)
		if vlen > 512 {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < 512; i++ {
			var val1 phase0.BLSPubKey
			if i < vlen {
				val1 = t[i]
			}
			idx := hh.Index()
			hh.PutBytes(val1[:])
			hh.Merkleize(idx)
		}
		hh.Merkleize(idx)
	}
	{ // Field #1 'AggregatePubkey'
		t := t.AggregatePubkey
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *SyncCommittee) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
