// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: b35af665df877d49be13a579bba85b0550549162755c4fced954236bd693475b
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SyncCommittee) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(SyncCommittee)
	}
	{ // Field #0 'Pubkeys'
		t := t.Pubkeys
		vlen := len(t)
		if vlen > 512 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = append(dst, []byte(t[:48])...)
		}
		if vlen < 512 {
			dst = sszutils.AppendZeroPadding(dst, (512-vlen)*48)
		}
	}
	{ // Field #1 'AggregatePubkey'
		t := t.AggregatePubkey
		dst = append(dst, []byte(t[:48])...)
	}
	return dst, nil
}

func (t *SyncCommittee) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SyncCommittee) SizeSSZ() (size int) {
	return 24624
}

func (t *SyncCommittee) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 24624 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Pubkeys' (static)
		buf := buf[0:24576]
		val1 := t.Pubkeys
		if len(val1) < 512 {
			val1 = make([]phase0.BLSPubKey, 512)
		} else if len(val1) > 512 {
			val1 = val1[:512]
		}
		for i := 0; i < 512; i++ {
			buf := buf[48*i : 48*(i+1)]
			copy(val1[i][:], buf)
		}
		t.Pubkeys = val1
	}
	{ // Field #1 'AggregatePubkey' (static)
		buf := buf[24576:24624]
		copy(t.AggregatePubkey[:], buf)
	}
	return nil
}

func (t *SyncCommittee) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(SyncCommittee)
	}
	idx := hh.Index()
	{ // Field #0 'Pubkeys'
		t := t.Pubkeys
		vlen := len(t)
		if vlen > 512 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		for i := 0; i < 512; i++ {
			var val1 phase0.BLSPubKey
			if i < vlen {
				val1 = t[i]
			}
			hh.PutBytes(val1[:48])
		}
		hh.Merkleize(idx)
	}
	{ // Field #1 'AggregatePubkey'
		t := t.AggregatePubkey
		hh.PutBytes(t[:48])
	}
	hh.Merkleize(idx)
	return nil
}

func (t *SyncCommittee) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
