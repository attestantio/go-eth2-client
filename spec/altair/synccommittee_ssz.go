// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 1bfa0ef1cf0a305fcadf526e076027693fadca67fd0dbb1b8e63a0a418245d36
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SyncCommittee) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t []phase0.BLSPubKey) (err error) { // []phase0.BLSPubKey:512:48
		limit := 512
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*48)
		}
		return err
	}
	fn2 := func(t *SyncCommittee) (err error) { // *altair.SyncCommittee
		// Field #0 'Pubkeys'
		if err = fn1(t.Pubkeys); err != nil {
			return err
		}
		// Field #1 'AggregatePubkey'
		dst = append(dst, t.AggregatePubkey[:]...)
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *SyncCommittee) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *SyncCommittee) SizeSSZ() (size int) {
	sfn1 := func(t []phase0.BLSPubKey) (size int) { // []phase0.BLSPubKey:512:48
		limit := 512
		size += int(limit) * 48
		return size
	}
	sfn2 := func(t *SyncCommittee) (size int) { // *SyncCommittee
		size = 48
		size += sfn1(t.Pubkeys)
		return size
	}
	return sfn2(t)
}

func (t *SyncCommittee) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t []phase0.BLSPubKey, buf []byte) ([]phase0.BLSPubKey, error) { // []phase0.BLSPubKey:512:48
		var err error
		itemsize := 48
		limit := 512
		if len(t) < int(limit) {
			t = make([]phase0.BLSPubKey, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		for i := 0; i < int(limit); i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn2 := func(t *SyncCommittee, buf []byte) (*SyncCommittee, error) { // *SyncCommittee
		var err error
		if t == nil {
			t = new(SyncCommittee)
		}
		buflen := len(buf)
		if buflen < 24624 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Pubkeys'
		if t.Pubkeys, err = fn1(t.Pubkeys, buf[0:24576]); err != nil {
			return t, err
		}
		// Field #1 'AggregatePubkey'
		copy(t.AggregatePubkey[:], buf[24576:24624])
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *SyncCommittee) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t []phase0.BLSPubKey) (err error) { // []phase0.BLSPubKey:512:48
		limit := 512
		idx := hh.Index()
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		for i := vlen; i < int(limit); i++ {
			hh.PutUint8(0)
		}
		hh.Merkleize(idx)
		return err
	}
	fn2 := func(t *SyncCommittee) (err error) { // *altair.SyncCommittee
		idx := hh.Index()
		// Field #0 'Pubkeys'
		if err = fn1(t.Pubkeys); err != nil {
			return err
		}
		// Field #1 'AggregatePubkey'
		hh.PutBytes(t.AggregatePubkey[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *SyncCommittee) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
