// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: e324aca1cb12f739899dbacf06b65d06f8d5fb96091d4a526add93ff9a43503f
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *SyncAggregate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'SyncCommitteeBits'
		t := t.SyncCommitteeBits
		limit := 64
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		dst = append(dst, []byte(t[:limit])...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*1)
		}
	}
	{ // Field #1 'SyncCommitteeSignature'
		t := t.SyncCommitteeSignature
		limit := 96
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *SyncAggregate) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SyncAggregate) SizeSSZ() (size int) {
	return 160
}

func (t *SyncAggregate) UnmarshalSSZ(buf []byte) (err error) {
	size1 := 1 * 64
	exproffset := 0
	buflen := len(buf)
	if buflen < size1+96 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'SyncCommitteeBits' (static)
		buf := buf[0:size1+0]
		exproffset += int(size1)
		val1 := t.SyncCommitteeBits
		if(len(val1) < 64) {
			val1 = make(go_bitfield.Bitvector512, 64)
		} else if(len(val1) > 64) {
			val1 = val1[:64]
		}
		copy(val1[:], buf)
		t.SyncCommitteeBits = val1
	}
	{ // Field #1 'SyncCommitteeSignature' (static)
		buf := buf[exproffset+0:exproffset+96]
		val2 := t.SyncCommitteeSignature
		copy(val2[:], buf)
		t.SyncCommitteeSignature = val2
	}
	return nil
}

func (t *SyncAggregate) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'SyncCommitteeBits'
		t := t.SyncCommitteeBits
		idx := hh.Index()
		vlen := len(t)
		if vlen > 64 {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #1 'SyncCommitteeSignature'
		t := t.SyncCommitteeSignature
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *SyncAggregate) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
