// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: f44686d4eaaa2ff6fc644a8367e936c4536df87045c6a7804cdbb8b7da08e0cf
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *SyncAggregate) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SyncAggregate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(SyncAggregate)
	}
	{ // Field #0 'SyncCommitteeBits'
		t := t.SyncCommitteeBits
		vlen := len(t)
		if vlen > 64 {
			return dst, sszutils.ErrVectorLength
		}
		dst = append(dst, []byte(t[:vlen])...)
		if vlen < 64 {
			dst = sszutils.AppendZeroPadding(dst, (64-vlen)*1)
		}
	}
	{ // Field #1 'SyncCommitteeSignature'
		t := &t.SyncCommitteeSignature
		dst = append(dst, []byte(t[:96])...)
	}
	return dst, nil
}

func (t *SyncAggregate) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 160 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'SyncCommitteeBits' (static)
		buf := buf[0:64]
		if len(t.SyncCommitteeBits) < 64 {
			t.SyncCommitteeBits = make(go_bitfield.Bitvector512, 64)
		} else if len(t.SyncCommitteeBits) > 64 {
			t.SyncCommitteeBits = t.SyncCommitteeBits[:64]
		}
		copy(t.SyncCommitteeBits[:], buf)
	}
	{ // Field #1 'SyncCommitteeSignature' (static)
		buf := buf[64:160]
		copy(t.SyncCommitteeSignature[:], buf)
	}
	return nil
}

func (t *SyncAggregate) SizeSSZ() (size int) {
	return 160
}

func (t *SyncAggregate) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *SyncAggregate) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(SyncAggregate)
	}
	idx := hh.Index()
	{ // Field #0 'SyncCommitteeBits'
		t := t.SyncCommitteeBits
		vlen := len(t)
		if vlen > 64 {
			return sszutils.ErrVectorLength
		}
		val := t[:]
		if vlen < 64 {
			val = sszutils.AppendZeroPadding(val, (64-vlen)*1)
		}
		hh.PutBytes(val[:64])
	}
	{ // Field #1 'SyncCommitteeSignature'
		t := &t.SyncCommitteeSignature
		hh.PutBytes(t[:96])
	}
	hh.Merkleize(idx)
	return nil
}

