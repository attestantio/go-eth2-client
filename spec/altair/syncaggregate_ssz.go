// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: e324aca1cb12f739899dbacf06b65d06f8d5fb96091d4a526add93ff9a43503f
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *SyncAggregate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t go_bitfield.Bitvector512) (err error) { // bitfield.Bitvector512:64
		limit := 64
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		vlimit := int(limit)
		if vlimit > vlen {
			vlimit = vlen
		}
		dst = append(dst, t[:vlimit]...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, int(limit)-vlen)
		}
		return err
	}
	fn2 := func(t *SyncAggregate) (err error) { // *altair.SyncAggregate
		// Field #0 'SyncCommitteeBits'
		if err = fn1(t.SyncCommitteeBits); err != nil {
			return err
		}
		// Field #1 'SyncCommitteeSignature'
		dst = append(dst, t.SyncCommitteeSignature[:]...)
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *SyncAggregate) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *SyncAggregate) SizeSSZ() (size int) {
	sfn1 := func(t go_bitfield.Bitvector512) (size int) { // go_bitfield.Bitvector512:64
		limit := 64
		size += int(limit) * 1
		return size
	}
	sfn2 := func(t *SyncAggregate) (size int) { // *SyncAggregate
		size = 96
		size += sfn1(t.SyncCommitteeBits)
		return size
	}
	return sfn2(t)
}

func (t *SyncAggregate) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t go_bitfield.Bitvector512, buf []byte) (go_bitfield.Bitvector512, error) { // go_bitfield.Bitvector512:64
		var err error
		itemsize := 1
		limit := 64
		if len(t) < int(limit) {
			t = make(go_bitfield.Bitvector512, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		copy(t[:], buf)
		return t, err
	}
	fn2 := func(t *SyncAggregate, buf []byte) (*SyncAggregate, error) { // *SyncAggregate
		var err error
		if t == nil {
			t = new(SyncAggregate)
		}
		buflen := len(buf)
		if buflen < 160 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'SyncCommitteeBits'
		if t.SyncCommitteeBits, err = fn1(t.SyncCommitteeBits, buf[0:64]); err != nil {
			return t, err
		}
		// Field #1 'SyncCommitteeSignature'
		copy(t.SyncCommitteeSignature[:], buf[64:160])
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *SyncAggregate) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t go_bitfield.Bitvector512) (err error) { // bitfield.Bitvector512:64
		limit := 64
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn2 := func(t *SyncAggregate) (err error) { // *altair.SyncAggregate
		idx := hh.Index()
		// Field #0 'SyncCommitteeBits'
		if err = fn1(t.SyncCommitteeBits); err != nil {
			return err
		}
		// Field #1 'SyncCommitteeSignature'
		hh.PutBytes(t.SyncCommitteeSignature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *SyncAggregate) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
