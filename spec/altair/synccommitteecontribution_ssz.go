// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 2b5439ce32ed550758301e42afee85d2c8dccb1fa9a8d784f942c9d863417725
// Version: v1.0.1 (https://github.com/pk910/dynamic-ssz)
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *SyncCommitteeContribution) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'Slot'
		t := t.Slot
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'BeaconBlockRoot'
		t := t.BeaconBlockRoot
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #2 'SubcommitteeIndex'
		t := t.SubcommitteeIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #3 'AggregationBits'
		t := t.AggregationBits
		limit := 16
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		dst = append(dst, []byte(t[:limit])...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*1)
		}
	}
	{ // Field #4 'Signature'
		t := t.Signature
		limit := 96
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *SyncCommitteeContribution) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SyncCommitteeContribution) SizeSSZ() (size int) {
	return 160
}

func (t *SyncCommitteeContribution) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 160 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Slot' (static)
		buf := buf[0:8]
		t.Slot = phase0.Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'BeaconBlockRoot' (static)
		buf := buf[8:40]
		copy(t.BeaconBlockRoot[:], buf)
	}
	{ // Field #2 'SubcommitteeIndex' (static)
		buf := buf[40:48]
		t.SubcommitteeIndex = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #3 'AggregationBits' (static)
		buf := buf[48:64]
		if len(t.AggregationBits) < 16 {
			t.AggregationBits = make(go_bitfield.Bitvector128, 16)
		} else if len(t.AggregationBits) > 16 {
			t.AggregationBits = t.AggregationBits[:16]
		}
		copy(t.AggregationBits[:], buf)
	}
	{ // Field #4 'Signature' (static)
		buf := buf[64:160]
		copy(t.Signature[:], buf)
	}
	return nil
}

func (t *SyncCommitteeContribution) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Slot'
		t := t.Slot
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'BeaconBlockRoot'
		t := t.BeaconBlockRoot
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #2 'SubcommitteeIndex'
		t := t.SubcommitteeIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #3 'AggregationBits'
		t := t.AggregationBits
		idx := hh.Index()
		vlen := len(t)
		if vlen > 16 {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #4 'Signature'
		t := t.Signature
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *SyncCommitteeContribution) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
