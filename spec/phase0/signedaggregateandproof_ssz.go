// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 06355e8a727a7440a5662245e17129615dd94bb72e6dece1eed60b9ebd0cb4ca
// Version: v1.1.1 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SignedAggregateAndProof) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SignedAggregateAndProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(SignedAggregateAndProof)
	}
	dstlen := len(dst)
	// Offset #0 'Message'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #1 'Signature'
		dst = append(dst, []byte(t.Signature[:96])...)
	}
	{ // Dynamic Field #0 'Message'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.Message
		if t == nil {
			t = new(AggregateAndProof)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *SignedAggregateAndProof) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 100 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'Message' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 != 100 {
		return sszutils.ErrOffset
	}
	{ // Field #1 'Signature' (static)
		buf := buf[4:100]
		copy(t.Signature[:], buf)
	}
	{ // Field #0 'Message' (dynamic)
		buf := buf[offset0:]
		val1 := t.Message
		if val1 == nil {
			val1 = new(AggregateAndProof)
		}
		if err = val1.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Message = val1
	}
	return nil
}

func (t *SignedAggregateAndProof) SizeSSZ() (size int) {
	if t == nil {
		t = new(SignedAggregateAndProof)
	}
	// Field #0 'Message' offset (4 bytes)
	// Field #1 'Signature' static (96 bytes)
	size += 100
	{ // Dynamic field #0 'Message'
		size += t.Message.SizeSSZ()
	}
	return size
}

func (t *SignedAggregateAndProof) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *SignedAggregateAndProof) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(SignedAggregateAndProof)
	}
	idx := hh.Index()
	{ // Field #0 'Message'
		t := t.Message
		if t == nil {
			t = new(AggregateAndProof)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #1 'Signature'
		hh.PutBytes(t.Signature[:96])
	}
	hh.Merkleize(idx)
	return nil
}

