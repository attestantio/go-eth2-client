// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 7a8a58b5c2bec427f9972ba6f4475ff62ab02aa0a67ae31a313f3f5b6403dd49
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SignedAggregateAndProof) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *SignedAggregateAndProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *AggregateAndProof) (err error) { // *phase0.AggregateAndProof
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *SignedAggregateAndProof) (err error) { // *phase0.SignedAggregateAndProof
		dstlen := len(dst)
		// Offset #0 'Message'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #1 'Signature'
		dst = append(dst, t.Signature[:]...)
		// Dynamic Field #0 'Message'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn1(t.Message); err != nil {
			return err
		}
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *SignedAggregateAndProof) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *SignedAggregateAndProof) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *SignedAggregateAndProof) SizeSSZ() (size int) {
	sfn1 := func(t *AggregateAndProof) (size int) { // *AggregateAndProof
		size = t.SizeSSZ()
		return size
	}
	sfn2 := func(t *SignedAggregateAndProof) (size int) { // *SignedAggregateAndProof
		size = 96
		size += 4 + sfn1(t.Message)
		return size
	}
	return sfn2(t)
}

func (t *SignedAggregateAndProof) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *SignedAggregateAndProof) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *AggregateAndProof, buf []byte) (*AggregateAndProof, error) { // *AggregateAndProof
		var err error
		if t == nil {
			t = new(AggregateAndProof)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *SignedAggregateAndProof, buf []byte) (*SignedAggregateAndProof, error) { // *SignedAggregateAndProof
		var err error
		if t == nil {
			t = new(SignedAggregateAndProof)
		}
		bufpos := 100
		buflen := len(buf)
		if buflen < 100 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'Message'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Field #1 'Signature'
		copy(t.Signature[:], buf[4:100])
		// Dynamic Field #0 'Message'
		if offset0 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:]
			if t.Message, err = fn1(t.Message, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *SignedAggregateAndProof) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t *AggregateAndProof) (err error) { // *phase0.AggregateAndProof
		err = t.HashTreeRootWithDyn(ds, hh)
		return err
	}
	fn2 := func(t *SignedAggregateAndProof) (err error) { // *phase0.SignedAggregateAndProof
		idx := hh.Index()
		// Field #0 'Message'
		if err = fn1(t.Message); err != nil {
			return err
		}
		// Field #1 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *SignedAggregateAndProof) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *SignedAggregateAndProof) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *SignedAggregateAndProof) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
