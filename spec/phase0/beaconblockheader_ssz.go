// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: dfc09035efd72347ff8731dc535cf56f75c398c077e54f59261f0ac2adce079b
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconBlockHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *BeaconBlockHeader) (err error) { // *phase0.BeaconBlockHeader
		// Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
		// Field #1 'ProposerIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		dst = append(dst, t.ParentRoot[:]...)
		// Field #3 'StateRoot'
		dst = append(dst, t.StateRoot[:]...)
		// Field #4 'BodyRoot'
		dst = append(dst, t.BodyRoot[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *BeaconBlockHeader) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *BeaconBlockHeader) SizeSSZ() (size int) {
	sfn1 := func(t *BeaconBlockHeader) (size int) { // *BeaconBlockHeader
		size = 112
		return size
	}
	return sfn1(t)
}

func (t *BeaconBlockHeader) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *BeaconBlockHeader, buf []byte) (*BeaconBlockHeader, error) { // *BeaconBlockHeader
		var err error
		if t == nil {
			t = new(BeaconBlockHeader)
		}
		buflen := len(buf)
		if buflen < 112 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Slot'
		t.Slot = (Slot)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'ProposerIndex'
		t.ProposerIndex = (ValidatorIndex)(sszutils.UnmarshallUint64(buf[8:16]))
		// Field #2 'ParentRoot'
		copy(t.ParentRoot[:], buf[16:48])
		// Field #3 'StateRoot'
		copy(t.StateRoot[:], buf[48:80])
		// Field #4 'BodyRoot'
		copy(t.BodyRoot[:], buf[80:112])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *BeaconBlockHeader) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *BeaconBlockHeader) (err error) { // *phase0.BeaconBlockHeader
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'BodyRoot'
		hh.PutBytes(t.BodyRoot[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *BeaconBlockHeader) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
