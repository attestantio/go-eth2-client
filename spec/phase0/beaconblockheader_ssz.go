// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 65d1463d0e6c4d1d554de9c7c79cf2c255a4ccab81b9d57f7c5b2b9d2901f676
// Version: v1.1.1 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconBlockHeader) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BeaconBlockHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(BeaconBlockHeader)
	}
	{ // Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
	}
	{ // Field #1 'ProposerIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ProposerIndex))
	}
	{ // Field #2 'ParentRoot'
		dst = append(dst, []byte(t.ParentRoot[:32])...)
	}
	{ // Field #3 'StateRoot'
		dst = append(dst, []byte(t.StateRoot[:32])...)
	}
	{ // Field #4 'BodyRoot'
		dst = append(dst, []byte(t.BodyRoot[:32])...)
	}
	return dst, nil
}

func (t *BeaconBlockHeader) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 112 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Slot' (static)
		buf := buf[0:8]
		t.Slot = Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'ProposerIndex' (static)
		buf := buf[8:16]
		t.ProposerIndex = ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'ParentRoot' (static)
		buf := buf[16:48]
		copy(t.ParentRoot[:], buf)
	}
	{ // Field #3 'StateRoot' (static)
		buf := buf[48:80]
		copy(t.StateRoot[:], buf)
	}
	{ // Field #4 'BodyRoot' (static)
		buf := buf[80:112]
		copy(t.BodyRoot[:], buf)
	}
	return nil
}

func (t *BeaconBlockHeader) SizeSSZ() (size int) {
	return 112
}

func (t *BeaconBlockHeader) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *BeaconBlockHeader) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(BeaconBlockHeader)
	}
	idx := hh.Index()
	{ // Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
	}
	{ // Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
	}
	{ // Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:32])
	}
	{ // Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:32])
	}
	{ // Field #4 'BodyRoot'
		hh.PutBytes(t.BodyRoot[:32])
	}
	hh.Merkleize(idx)
	return nil
}

