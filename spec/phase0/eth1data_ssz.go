// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 0760aeac2d386de99df03383d1efd76f002db668d09591233138433ba8e9c0b6
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ETH1Data) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'DepositRoot'
		t := t.DepositRoot
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #1 'DepositCount'
		t := t.DepositCount
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #2 'BlockHash'
		t := t.BlockHash
		limit := 32
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		dst = append(dst, []byte(t[:limit])...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*1)
		}
	}
	return dst, nil
}

func (t *ETH1Data) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ETH1Data) SizeSSZ() (size int) {
	return 72
}

func (t *ETH1Data) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 72 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'DepositRoot' (static)
		buf := buf[0:32]
		val1 := t.DepositRoot
		copy(val1[:], buf)
		t.DepositRoot = val1
	}
	{ // Field #1 'DepositCount' (static)
		buf := buf[32:40]
		t.DepositCount = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'BlockHash' (static)
		buf := buf[40:72]
		val2 := t.BlockHash
		if(len(val2) < 32) {
			val2 = make([]byte, 32)
		} else if(len(val2) > 32) {
			val2 = val2[:32]
		}
		copy(val2[:], buf)
		t.BlockHash = val2
	}
	return nil
}

func (t *ETH1Data) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'DepositRoot'
		t := t.DepositRoot
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #1 'DepositCount'
		t := t.DepositCount
		hh.PutUint64(uint64(t))
	}
	{ // Field #2 'BlockHash'
		t := t.BlockHash
		idx := hh.Index()
		vlen := len(t)
		if vlen > 32 {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *ETH1Data) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
