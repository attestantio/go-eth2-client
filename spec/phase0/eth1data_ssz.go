// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 98139f2d588ffdaa690738af29a3b4039034a2e285b31bb24131bd642561920d
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ETH1Data) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ETH1Data) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(ETH1Data)
	}
	{ // Field #0 'DepositRoot'
		t := t.DepositRoot
		dst = append(dst, []byte(t[:32])...)
	}
	{ // Field #1 'DepositCount'
		t := t.DepositCount
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #2 'BlockHash'
		t := t.BlockHash
		vlen := len(t)
		if vlen > 32 {
			return dst, sszutils.ErrVectorLength
		}
		dst = append(dst, []byte(t[:vlen])...)
		if vlen < 32 {
			dst = sszutils.AppendZeroPadding(dst, (32-vlen)*1)
		}
	}
	return dst, nil
}

func (t *ETH1Data) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 72 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'DepositRoot' (static)
		buf := buf[0:32]
		copy(t.DepositRoot[:], buf)
	}
	{ // Field #1 'DepositCount' (static)
		buf := buf[32:40]
		t.DepositCount = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'BlockHash' (static)
		buf := buf[40:72]
		t.BlockHash = sszutils.ExpandSlice(t.BlockHash, 32)
		copy(t.BlockHash[:], buf)
	}
	return nil
}

func (t *ETH1Data) SizeSSZ() (size int) {
	return 72
}

func (t *ETH1Data) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ETH1Data) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(ETH1Data)
	}
	idx := hh.Index()
	{ // Field #0 'DepositRoot'
		t := t.DepositRoot
		hh.PutBytes(t[:32])
	}
	{ // Field #1 'DepositCount'
		t := t.DepositCount
		hh.PutUint64(uint64(t))
	}
	{ // Field #2 'BlockHash'
		t := t.BlockHash
		vlen := len(t)
		if vlen > 32 {
			return sszutils.ErrVectorLength
		}
		val := t[:]
		if vlen < 32 {
			val = sszutils.AppendZeroPadding(val, (32-vlen)*1)
		}
		hh.PutBytes(val[:32])
	}
	hh.Merkleize(idx)
	return nil
}

