// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 2e2004e165e5d508a513d914e3496c424ba45e102e56e0151609ae2feefe20aa
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ETH1Data) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *ETH1Data) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *ETH1Data) (err error) { // *phase0.ETH1Data
		// Field #0 'DepositRoot'
		dst = append(dst, t.DepositRoot[:]...)
		// Field #1 'DepositCount'
		dst = sszutils.MarshalUint64(dst, uint64(t.DepositCount))
		// Field #2 'BlockHash'
		if len(t.BlockHash) > 32 {
			dst = append(dst, t.BlockHash[:32]...)
		} else {
			dst = append(dst, t.BlockHash[:]...)
			if len(t.BlockHash) < 32 {
				dst = sszutils.AppendZeroPadding(dst, 32-len(t.BlockHash))
			}
		}
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *ETH1Data) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *ETH1Data) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *ETH1Data) SizeSSZ() (size int) {
	sfn1 := func(t *ETH1Data) (size int) { // *ETH1Data
		size = 72
		return size
	}
	return sfn1(t)
}

func (t *ETH1Data) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *ETH1Data) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *ETH1Data, buf []byte) (*ETH1Data, error) { // *ETH1Data
		var err error
		if t == nil {
			t = new(ETH1Data)
		}
		buflen := len(buf)
		if buflen < 72 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'DepositRoot'
		copy(t.DepositRoot[:], buf[0:32])
		// Field #1 'DepositCount'
		t.DepositCount = (uint64)(sszutils.UnmarshallUint64(buf[32:40]))
		// Field #2 'BlockHash'
		if len(t.BlockHash) < 32 {
			t.BlockHash = make([]byte, 32)
		} else {
			t.BlockHash = t.BlockHash[:32]
		}
		copy(t.BlockHash[:], buf[40:72])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *ETH1Data) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *ETH1Data) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *ETH1Data) (err error) { // *phase0.ETH1Data
		idx := hh.Index()
		// Field #0 'DepositRoot'
		hh.PutBytes(t.DepositRoot[:])
		// Field #1 'DepositCount'
		hh.PutUint64(uint64(t.DepositCount))
		// Field #2 'BlockHash'
		hh.PutBytes(t.BlockHash[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *ETH1Data) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ETH1Data) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
