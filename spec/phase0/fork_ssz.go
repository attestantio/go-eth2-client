// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: f632c6f1c7dea35206bd3755bf0448bb4e389ab92ecdaac0e047345ee8700ce7
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Fork) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Fork) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(Fork)
	}
	{ // Field #0 'PreviousVersion'
		dst = append(dst, []byte(t.PreviousVersion[:4])...)
	}
	{ // Field #1 'CurrentVersion'
		dst = append(dst, []byte(t.CurrentVersion[:4])...)
	}
	{ // Field #2 'Epoch'
		dst = sszutils.MarshalUint64(dst, uint64(t.Epoch))
	}
	return dst, nil
}

func (t *Fork) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 16 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'PreviousVersion' (static)
		buf := buf[0:4]
		copy(t.PreviousVersion[:], buf)
	}
	{ // Field #1 'CurrentVersion' (static)
		buf := buf[4:8]
		copy(t.CurrentVersion[:], buf)
	}
	{ // Field #2 'Epoch' (static)
		buf := buf[8:16]
		t.Epoch = Epoch(sszutils.UnmarshallUint64(buf))
	}
	return nil
}

func (t *Fork) SizeSSZ() (size int) {
	return 16
}

func (t *Fork) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *Fork) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(Fork)
	}
	idx := hh.Index()
	{ // Field #0 'PreviousVersion'
		hh.PutBytes(t.PreviousVersion[:4])
	}
	{ // Field #1 'CurrentVersion'
		hh.PutBytes(t.CurrentVersion[:4])
	}
	{ // Field #2 'Epoch'
		hh.PutUint64(uint64(t.Epoch))
	}
	hh.Merkleize(idx)
	return nil
}

