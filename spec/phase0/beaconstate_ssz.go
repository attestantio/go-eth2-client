// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: a81afec59eede3aaf572a932ba2cd2592556d642ba63d957fc7a28b24e942544
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconState) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	{ // Field #0 'GenesisTime'
		t := t.GenesisTime
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'GenesisValidatorsRoot'
		t := t.GenesisValidatorsRoot
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #2 'Slot'
		t := t.Slot
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #3 'Fork'
		t := t.Fork
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #4 'LatestBlockHeader'
		t := t.LatestBlockHeader
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #5 'BlockRoots'
		t := t.BlockRoots
		limit := 8192
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			limit := 32
			dst = append(dst, []byte(t[:limit])...)
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*32)
		}
	}
	{ // Field #6 'StateRoots'
		t := t.StateRoots
		limit := 8192
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			limit := 32
			dst = append(dst, []byte(t[:limit])...)
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*32)
		}
	}
	// Offset #7 'HistoricalRoots'
	offset7 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #8 'ETH1Data'
		t := t.ETH1Data
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	// Offset #9 'ETH1DataVotes'
	offset9 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #10 'ETH1DepositIndex'
		t := t.ETH1DepositIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	// Offset #11 'Validators'
	offset11 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #12 'Balances'
	offset12 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #13 'RANDAOMixes'
		t := t.RANDAOMixes
		limit := 65536
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			limit := 32
			dst = append(dst, []byte(t[:limit])...)
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*32)
		}
	}
	{ // Field #14 'Slashings'
		t := t.Slashings
		limit := 8192
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint64(dst, uint64(t))
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*8)
		}
	}
	// Offset #15 'PreviousEpochAttestations'
	offset15 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #16 'CurrentEpochAttestations'
	offset16 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #17 'JustificationBits'
		t := t.JustificationBits
		limit := 1
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		dst = append(dst, []byte(t[:limit])...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*1)
		}
	}
	{ // Field #18 'PreviousJustifiedCheckpoint'
		t := t.PreviousJustifiedCheckpoint
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #19 'CurrentJustifiedCheckpoint'
		t := t.CurrentJustifiedCheckpoint
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #20 'FinalizedCheckpoint'
		t := t.FinalizedCheckpoint
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #7 'HistoricalRoots'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		t := t.HistoricalRoots
		max := 16777216
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			limit := 32
			dst = append(dst, []byte(t[:limit])...)
		}
	}
	{ // Dynamic Field #9 'ETH1DataVotes'
		sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
		t := t.ETH1DataVotes
		max := 2048
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #11 'Validators'
		sszutils.UpdateOffset(dst[offset11:offset11+4], len(dst)-dstlen)
		t := t.Validators
		max := 1099511627776
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #12 'Balances'
		sszutils.UpdateOffset(dst[offset12:offset12+4], len(dst)-dstlen)
		t := t.Balances
		max := 1099511627776
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint64(dst, uint64(t))
		}
	}
	{ // Dynamic Field #15 'PreviousEpochAttestations'
		sszutils.UpdateOffset(dst[offset15:offset15+4], len(dst)-dstlen)
		t := t.PreviousEpochAttestations
		max := 4096
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #16 'CurrentEpochAttestations'
		sszutils.UpdateOffset(dst[offset16:offset16+4], len(dst)-dstlen)
		t := t.CurrentEpochAttestations
		max := 4096
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *BeaconState) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BeaconState) SizeSSZ() (size int) {
	size += 8 // Field #0 'GenesisTime'
	size += 32 // Field #1 'GenesisValidatorsRoot'
	size += 8 // Field #2 'Slot'
	size += 16 // Field #3 'Fork'
	size += 112 // Field #4 'LatestBlockHeader'
	{ // Field #5 'BlockRoots'
		limit := 8192
		size += int(limit) * 32
	}
	{ // Field #6 'StateRoots'
		limit := 8192
		size += int(limit) * 32
	}
	size += 4 // Offset for field #7 'HistoricalRoots'
	size += 72 // Field #8 'ETH1Data'
	size += 4 // Offset for field #9 'ETH1DataVotes'
	size += 8 // Field #10 'ETH1DepositIndex'
	size += 4 // Offset for field #11 'Validators'
	size += 4 // Offset for field #12 'Balances'
	{ // Field #13 'RANDAOMixes'
		limit := 65536
		size += int(limit) * 32
	}
	{ // Field #14 'Slashings'
		limit := 8192
		size += int(limit) * 8
	}
	size += 4 // Offset for field #15 'PreviousEpochAttestations'
	size += 4 // Offset for field #16 'CurrentEpochAttestations'
	size += 1 // Field #17 'JustificationBits'
	size += 40 // Field #18 'PreviousJustifiedCheckpoint'
	size += 40 // Field #19 'CurrentJustifiedCheckpoint'
	size += 40 // Field #20 'FinalizedCheckpoint'
	{ // Dynamic field #7 'HistoricalRoots'
		vlen := len(t.HistoricalRoots)
		size += vlen * 32
	}
	{ // Dynamic field #9 'ETH1DataVotes'
		vlen := len(t.ETH1DataVotes)
		size += vlen * 72
	}
	{ // Dynamic field #11 'Validators'
		vlen := len(t.Validators)
		size += vlen * 121
	}
	{ // Dynamic field #12 'Balances'
		vlen := len(t.Balances)
		size += vlen * 8
	}
	{ // Dynamic field #15 'PreviousEpochAttestations'
		vlen := len(t.PreviousEpochAttestations)
		size += vlen * 4 // Offsets
		for i := 0; i < vlen; i++ {
			t := t.PreviousEpochAttestations[i]
			size += t.SizeSSZ()
		}
	}
	{ // Dynamic field #16 'CurrentEpochAttestations'
		vlen := len(t.CurrentEpochAttestations)
		size += vlen * 4 // Offsets
		for i := 0; i < vlen; i++ {
			t := t.CurrentEpochAttestations[i]
			size += t.SizeSSZ()
		}
	}
	return size
}

func (t *BeaconState) UnmarshalSSZ(buf []byte) (err error) {
	size1 := 32 * 8192
	size2 := 32 * 8192
	size3 := 32 * 65536
	size4 := 8 * 8192
	exproffset := 0
	buflen := len(buf)
	if buflen < size1+size2+size3+size4+401 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'GenesisTime' (static)
		buf := buf[0:8]
		t.GenesisTime = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'GenesisValidatorsRoot' (static)
		buf := buf[8:40]
		val1 := t.GenesisValidatorsRoot
		copy(val1[:], buf)
		t.GenesisValidatorsRoot = val1
	}
	{ // Field #2 'Slot' (static)
		buf := buf[40:48]
		t.Slot = Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #3 'Fork' (static)
		buf := buf[48:64]
		val2 := t.Fork
		if val2 == nil {
			val2 = new(Fork)
		}
		if err = val2.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Fork = val2
	}
	{ // Field #4 'LatestBlockHeader' (static)
		buf := buf[64:176]
		val3 := t.LatestBlockHeader
		if val3 == nil {
			val3 = new(BeaconBlockHeader)
		}
		if err = val3.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.LatestBlockHeader = val3
	}
	{ // Field #5 'BlockRoots' (static)
		buf := buf[176:size1+176]
		exproffset += int(size1)
		val4 := t.BlockRoots
		if(len(val4) < 8192) {
			val4 = make([]Root, 8192)
		} else if(len(val4) > 8192) {
			val4 = val4[:8192]
		}
		for i := 0; i < 8192; i++ {
			val5 := val4[i]
			buf := buf[32*i:32*(i+1)]
			copy(val5[:], buf)
			val4[i] = val5
		}
		t.BlockRoots = val4
	}
	{ // Field #6 'StateRoots' (static)
		buf := buf[exproffset+176:exproffset+size2+176]
		exproffset += int(size2)
		val6 := t.StateRoots
		if(len(val6) < 8192) {
			val6 = make([]Root, 8192)
		} else if(len(val6) > 8192) {
			val6 = val6[:8192]
		}
		for i := 0; i < 8192; i++ {
			val7 := val6[i]
			buf := buf[32*i:32*(i+1)]
			copy(val7[:], buf)
			val6[i] = val7
		}
		t.StateRoots = val6
	}
	// Field #7 'HistoricalRoots' (offset)
	offset7 := int(sszutils.UnmarshallUint32(buf[exproffset+176:exproffset+180]))
	if offset7 < size1+size2+size3+size4+401 || offset7 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #8 'ETH1Data' (static)
		buf := buf[exproffset+180:exproffset+252]
		val8 := t.ETH1Data
		if val8 == nil {
			val8 = new(ETH1Data)
		}
		if err = val8.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.ETH1Data = val8
	}
	// Field #9 'ETH1DataVotes' (offset)
	offset9 := int(sszutils.UnmarshallUint32(buf[exproffset+252:exproffset+256]))
	if offset9 < offset7 || offset9 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #10 'ETH1DepositIndex' (static)
		buf := buf[exproffset+256:exproffset+264]
		t.ETH1DepositIndex = uint64(sszutils.UnmarshallUint64(buf))
	}
	// Field #11 'Validators' (offset)
	offset11 := int(sszutils.UnmarshallUint32(buf[exproffset+264:exproffset+268]))
	if offset11 < offset9 || offset11 > buflen {
		return sszutils.ErrOffset
	}
	// Field #12 'Balances' (offset)
	offset12 := int(sszutils.UnmarshallUint32(buf[exproffset+268:exproffset+272]))
	if offset12 < offset11 || offset12 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #13 'RANDAOMixes' (static)
		buf := buf[exproffset+272:exproffset+size3+272]
		exproffset += int(size3)
		val9 := t.RANDAOMixes
		if(len(val9) < 65536) {
			val9 = make([]Root, 65536)
		} else if(len(val9) > 65536) {
			val9 = val9[:65536]
		}
		for i := 0; i < 65536; i++ {
			val10 := val9[i]
			buf := buf[32*i:32*(i+1)]
			copy(val10[:], buf)
			val9[i] = val10
		}
		t.RANDAOMixes = val9
	}
	{ // Field #14 'Slashings' (static)
		buf := buf[exproffset+272:exproffset+size4+272]
		exproffset += int(size4)
		val11 := t.Slashings
		if(len(val11) < 8192) {
			val11 = make([]Gwei, 8192)
		} else if(len(val11) > 8192) {
			val11 = val11[:8192]
		}
		for i := 0; i < 8192; i++ {
			buf := buf[8*i:8*(i+1)]
			val11[i] = Gwei(sszutils.UnmarshallUint64(buf))
		}
		t.Slashings = val11
	}
	// Field #15 'PreviousEpochAttestations' (offset)
	offset15 := int(sszutils.UnmarshallUint32(buf[exproffset+272:exproffset+276]))
	if offset15 < offset12 || offset15 > buflen {
		return sszutils.ErrOffset
	}
	// Field #16 'CurrentEpochAttestations' (offset)
	offset16 := int(sszutils.UnmarshallUint32(buf[exproffset+276:exproffset+280]))
	if offset16 < offset15 || offset16 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #17 'JustificationBits' (static)
		buf := buf[exproffset+280:exproffset+281]
		val12 := t.JustificationBits
		if(len(val12) < 1) {
			val12 = make(go_bitfield.Bitvector4, 1)
		} else if(len(val12) > 1) {
			val12 = val12[:1]
		}
		copy(val12[:], buf)
		t.JustificationBits = val12
	}
	{ // Field #18 'PreviousJustifiedCheckpoint' (static)
		buf := buf[exproffset+281:exproffset+321]
		val13 := t.PreviousJustifiedCheckpoint
		if val13 == nil {
			val13 = new(Checkpoint)
		}
		if err = val13.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.PreviousJustifiedCheckpoint = val13
	}
	{ // Field #19 'CurrentJustifiedCheckpoint' (static)
		buf := buf[exproffset+321:exproffset+361]
		val14 := t.CurrentJustifiedCheckpoint
		if val14 == nil {
			val14 = new(Checkpoint)
		}
		if err = val14.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.CurrentJustifiedCheckpoint = val14
	}
	{ // Field #20 'FinalizedCheckpoint' (static)
		buf := buf[exproffset+361:exproffset+401]
		val15 := t.FinalizedCheckpoint
		if val15 == nil {
			val15 = new(Checkpoint)
		}
		if err = val15.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.FinalizedCheckpoint = val15
	}
	{ // Field #7 'HistoricalRoots' (dynamic)
		buf := buf[offset7:offset9]
		val16 := t.HistoricalRoots
		itemCount := len(buf)/32
		if len(buf)%32 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val16) < itemCount) {
			val16 = make([]Root, itemCount)
		} else if(len(val16) > itemCount) {
			val16 = val16[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val17 := val16[i]
			buf := buf[32*i:32*(i+1)]
			copy(val17[:], buf)
			val16[i] = val17
		}
		t.HistoricalRoots = val16
	}
	{ // Field #9 'ETH1DataVotes' (dynamic)
		buf := buf[offset9:offset11]
		val18 := t.ETH1DataVotes
		itemCount := len(buf)/72
		if len(buf)%72 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val18) < itemCount) {
			val18 = make([]*ETH1Data, itemCount)
		} else if(len(val18) > itemCount) {
			val18 = val18[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val19 := val18[i]
			if val19 == nil {
				val19 = new(ETH1Data)
			}
			buf := buf[72*i:72*(i+1)]
			if err = val19.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val18[i] = val19
		}
		t.ETH1DataVotes = val18
	}
	{ // Field #11 'Validators' (dynamic)
		buf := buf[offset11:offset12]
		val20 := t.Validators
		itemCount := len(buf)/121
		if len(buf)%121 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val20) < itemCount) {
			val20 = make([]*Validator, itemCount)
		} else if(len(val20) > itemCount) {
			val20 = val20[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val21 := val20[i]
			if val21 == nil {
				val21 = new(Validator)
			}
			buf := buf[121*i:121*(i+1)]
			if err = val21.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val20[i] = val21
		}
		t.Validators = val20
	}
	{ // Field #12 'Balances' (dynamic)
		buf := buf[offset12:offset15]
		val22 := t.Balances
		itemCount := len(buf)/8
		if len(buf)%8 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val22) < itemCount) {
			val22 = make([]Gwei, itemCount)
		} else if(len(val22) > itemCount) {
			val22 = val22[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			buf := buf[8*i:8*(i+1)]
			val22[i] = Gwei(sszutils.UnmarshallUint64(buf))
		}
		t.Balances = val22
	}
	{ // Field #15 'PreviousEpochAttestations' (dynamic)
		buf := buf[offset15:offset16]
		val23 := t.PreviousEpochAttestations
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset/4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val23) < itemCount) {
			val23 = make([]*PendingAttestation, itemCount)
		} else if(len(val23) > itemCount) {
			val23 = val23[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4:(i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val24 := val23[i]
			if val24 == nil {
				val24 = new(PendingAttestation)
			}
			if err = val24.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val23[i] = val24
		}
		t.PreviousEpochAttestations = val23
	}
	{ // Field #16 'CurrentEpochAttestations' (dynamic)
		buf := buf[offset16:]
		val25 := t.CurrentEpochAttestations
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset/4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val25) < itemCount) {
			val25 = make([]*PendingAttestation, itemCount)
		} else if(len(val25) > itemCount) {
			val25 = val25[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4:(i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val26 := val25[i]
			if val26 == nil {
				val26 = new(PendingAttestation)
			}
			if err = val26.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val25[i] = val26
		}
		t.CurrentEpochAttestations = val25
	}
	return nil
}

func (t *BeaconState) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'GenesisTime'
		t := t.GenesisTime
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'GenesisValidatorsRoot'
		t := t.GenesisValidatorsRoot
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #2 'Slot'
		t := t.Slot
		hh.PutUint64(uint64(t))
	}
	{ // Field #3 'Fork'
		t := t.Fork
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #4 'LatestBlockHeader'
		t := t.LatestBlockHeader
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #5 'BlockRoots'
		t := t.BlockRoots
		idx := hh.Index()
		vlen := len(t)
		if vlen > 8192 {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < 8192; i++ {
			var val1 Root
			if i < vlen {
				val1 = t[i]
			}
			idx := hh.Index()
			hh.PutBytes(val1[:])
			hh.Merkleize(idx)
		}
		hh.Merkleize(idx)
	}
	{ // Field #6 'StateRoots'
		t := t.StateRoots
		idx := hh.Index()
		vlen := len(t)
		if vlen > 8192 {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < 8192; i++ {
			var val2 Root
			if i < vlen {
				val2 = t[i]
			}
			idx := hh.Index()
			hh.PutBytes(val2[:])
			hh.Merkleize(idx)
		}
		hh.Merkleize(idx)
	}
	{ // Field #7 'HistoricalRoots'
		t := t.HistoricalRoots
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			idx := hh.Index()
			hh.PutBytes(t[:])
			hh.Merkleize(idx)
		}
		limit := sszutils.CalculateLimit(16777216, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #8 'ETH1Data'
		t := t.ETH1Data
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #9 'ETH1DataVotes'
		t := t.ETH1DataVotes
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(2048, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #10 'ETH1DepositIndex'
		t := t.ETH1DepositIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #11 'Validators'
		t := t.Validators
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(1099511627776, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #12 'Balances'
		t := t.Balances
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			hh.AppendUint64(uint64(t))
		}
		limit := sszutils.CalculateLimit(1099511627776, vlen, 8)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #13 'RANDAOMixes'
		t := t.RANDAOMixes
		idx := hh.Index()
		vlen := len(t)
		if vlen > 65536 {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < 65536; i++ {
			var val3 Root
			if i < vlen {
				val3 = t[i]
			}
			idx := hh.Index()
			hh.PutBytes(val3[:])
			hh.Merkleize(idx)
		}
		hh.Merkleize(idx)
	}
	{ // Field #14 'Slashings'
		t := t.Slashings
		idx := hh.Index()
		vlen := len(t)
		if vlen > 8192 {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < 8192; i++ {
			var val4 Gwei
			if i < vlen {
				val4 = t[i]
			}
			hh.AppendUint64(uint64(val4))
		}
		hh.Merkleize(idx)
	}
	{ // Field #15 'PreviousEpochAttestations'
		t := t.PreviousEpochAttestations
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(4096, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #16 'CurrentEpochAttestations'
		t := t.CurrentEpochAttestations
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(4096, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #17 'JustificationBits'
		t := t.JustificationBits
		idx := hh.Index()
		vlen := len(t)
		if vlen > 1 {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #18 'PreviousJustifiedCheckpoint'
		t := t.PreviousJustifiedCheckpoint
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #19 'CurrentJustifiedCheckpoint'
		t := t.CurrentJustifiedCheckpoint
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #20 'FinalizedCheckpoint'
		t := t.FinalizedCheckpoint
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

func (t *BeaconState) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
