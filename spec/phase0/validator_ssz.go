// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: b0f514207abe2cadc16e4ce55646587fd47d3ca6e996de7e9738e67d086985db
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Validator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *Validator) (err error) { // *phase0.Validator
		// Field #0 'PublicKey'
		dst = append(dst, t.PublicKey[:]...)
		// Field #1 'WithdrawalCredentials'
		if len(t.WithdrawalCredentials) > 32 {
			dst = append(dst, t.WithdrawalCredentials[:32]...)
		} else {
			dst = append(dst, t.WithdrawalCredentials[:]...)
			if len(t.WithdrawalCredentials) < 32 {
				dst = sszutils.AppendZeroPadding(dst, 32-len(t.WithdrawalCredentials))
			}
		}
		// Field #2 'EffectiveBalance'
		dst = sszutils.MarshalUint64(dst, uint64(t.EffectiveBalance))
		// Field #3 'Slashed'
		dst = sszutils.MarshalBool(dst, bool(t.Slashed))
		// Field #4 'ActivationEligibilityEpoch'
		dst = sszutils.MarshalUint64(dst, uint64(t.ActivationEligibilityEpoch))
		// Field #5 'ActivationEpoch'
		dst = sszutils.MarshalUint64(dst, uint64(t.ActivationEpoch))
		// Field #6 'ExitEpoch'
		dst = sszutils.MarshalUint64(dst, uint64(t.ExitEpoch))
		// Field #7 'WithdrawableEpoch'
		dst = sszutils.MarshalUint64(dst, uint64(t.WithdrawableEpoch))
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *Validator) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *Validator) SizeSSZ() (size int) {
	sfn1 := func(t *Validator) (size int) { // *Validator
		size = 121
		return size
	}
	return sfn1(t)
}

func (t *Validator) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *Validator, buf []byte) (*Validator, error) { // *Validator
		var err error
		if t == nil {
			t = new(Validator)
		}
		buflen := len(buf)
		if buflen < 121 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'PublicKey'
		copy(t.PublicKey[:], buf[0:48])
		// Field #1 'WithdrawalCredentials'
		if len(t.WithdrawalCredentials) < 32 {
			t.WithdrawalCredentials = make([]byte, 32)
		} else {
			t.WithdrawalCredentials = t.WithdrawalCredentials[:32]
		}
		copy(t.WithdrawalCredentials[:], buf[48:80])
		// Field #2 'EffectiveBalance'
		t.EffectiveBalance = (Gwei)(sszutils.UnmarshallUint64(buf[80:88]))
		// Field #3 'Slashed'
		t.Slashed = (bool)(sszutils.UnmarshalBool(buf[88:89]))
		// Field #4 'ActivationEligibilityEpoch'
		t.ActivationEligibilityEpoch = (Epoch)(sszutils.UnmarshallUint64(buf[89:97]))
		// Field #5 'ActivationEpoch'
		t.ActivationEpoch = (Epoch)(sszutils.UnmarshallUint64(buf[97:105]))
		// Field #6 'ExitEpoch'
		t.ExitEpoch = (Epoch)(sszutils.UnmarshallUint64(buf[105:113]))
		// Field #7 'WithdrawableEpoch'
		t.WithdrawableEpoch = (Epoch)(sszutils.UnmarshallUint64(buf[113:121]))
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *Validator) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *Validator) (err error) { // *phase0.Validator
		idx := hh.Index()
		// Field #0 'PublicKey'
		hh.PutBytes(t.PublicKey[:])
		// Field #1 'WithdrawalCredentials'
		hh.PutBytes(t.WithdrawalCredentials[:])
		// Field #2 'EffectiveBalance'
		hh.PutUint64(uint64(t.EffectiveBalance))
		// Field #3 'Slashed'
		hh.PutBool(bool(t.Slashed))
		// Field #4 'ActivationEligibilityEpoch'
		hh.PutUint64(uint64(t.ActivationEligibilityEpoch))
		// Field #5 'ActivationEpoch'
		hh.PutUint64(uint64(t.ActivationEpoch))
		// Field #6 'ExitEpoch'
		hh.PutUint64(uint64(t.ExitEpoch))
		// Field #7 'WithdrawableEpoch'
		hh.PutUint64(uint64(t.WithdrawableEpoch))
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *Validator) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
