// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: ebb7832e381c81e6e5790996e10aa5d4404512f3d611de01253ab4e7b7415cb0
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SigningData) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *SigningData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *SigningData) (err error) { // *phase0.SigningData
		// Field #0 'ObjectRoot'
		dst = append(dst, t.ObjectRoot[:]...)
		// Field #1 'Domain'
		dst = append(dst, t.Domain[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *SigningData) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *SigningData) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *SigningData) SizeSSZ() (size int) {
	sfn1 := func(t *SigningData) (size int) { // *SigningData
		size = 64
		return size
	}
	return sfn1(t)
}

func (t *SigningData) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *SigningData) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *SigningData, buf []byte) (*SigningData, error) { // *SigningData
		var err error
		if t == nil {
			t = new(SigningData)
		}
		buflen := len(buf)
		if buflen < 64 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'ObjectRoot'
		copy(t.ObjectRoot[:], buf[0:32])
		// Field #1 'Domain'
		copy(t.Domain[:], buf[32:64])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *SigningData) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *SigningData) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *SigningData) (err error) { // *phase0.SigningData
		idx := hh.Index()
		// Field #0 'ObjectRoot'
		hh.PutBytes(t.ObjectRoot[:])
		// Field #1 'Domain'
		hh.PutBytes(t.Domain[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *SigningData) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *SigningData) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
