// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 404d6846b1f0562f1c4d10de3c767ac237f9660080b318d3013091237aa21d4d
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SignedBeaconBlockHeader) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *SignedBeaconBlockHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *BeaconBlockHeader) (err error) { // *phase0.BeaconBlockHeader
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *SignedBeaconBlockHeader) (err error) { // *phase0.SignedBeaconBlockHeader
		// Field #0 'Message'
		if err = fn1(t.Message); err != nil {
			return err
		}
		// Field #1 'Signature'
		dst = append(dst, t.Signature[:]...)
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *SignedBeaconBlockHeader) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *SignedBeaconBlockHeader) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *SignedBeaconBlockHeader) SizeSSZ() (size int) {
	sfn1 := func(t *SignedBeaconBlockHeader) (size int) { // *SignedBeaconBlockHeader
		size = 208
		return size
	}
	return sfn1(t)
}

func (t *SignedBeaconBlockHeader) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *SignedBeaconBlockHeader) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *BeaconBlockHeader, buf []byte) (*BeaconBlockHeader, error) { // *BeaconBlockHeader
		var err error
		if t == nil {
			t = new(BeaconBlockHeader)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *SignedBeaconBlockHeader, buf []byte) (*SignedBeaconBlockHeader, error) { // *SignedBeaconBlockHeader
		var err error
		if t == nil {
			t = new(SignedBeaconBlockHeader)
		}
		buflen := len(buf)
		if buflen < 208 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Message'
		if t.Message, err = fn1(t.Message, buf[0:112]); err != nil {
			return t, err
		}
		// Field #1 'Signature'
		copy(t.Signature[:], buf[112:208])
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *SignedBeaconBlockHeader) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *SignedBeaconBlockHeader) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *SignedBeaconBlockHeader) (err error) { // *phase0.SignedBeaconBlockHeader
		idx := hh.Index()
		// Field #0 'Message'
		if err = t.Message.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #1 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *SignedBeaconBlockHeader) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *SignedBeaconBlockHeader) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
