// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 42ee3bb91b642e0615a178097b74d14074b89903670f55d24a1d4d8aa4146f85
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *DepositData) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *DepositData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *DepositData) (err error) { // *phase0.DepositData
		// Field #0 'PublicKey'
		dst = append(dst, t.PublicKey[:]...)
		// Field #1 'WithdrawalCredentials'
		if len(t.WithdrawalCredentials) > 32 {
			dst = append(dst, t.WithdrawalCredentials[:32]...)
		} else {
			dst = append(dst, t.WithdrawalCredentials[:]...)
			if len(t.WithdrawalCredentials) < 32 {
				dst = sszutils.AppendZeroPadding(dst, 32-len(t.WithdrawalCredentials))
			}
		}
		// Field #2 'Amount'
		dst = sszutils.MarshalUint64(dst, uint64(t.Amount))
		// Field #3 'Signature'
		dst = append(dst, t.Signature[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *DepositData) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *DepositData) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *DepositData) SizeSSZ() (size int) {
	sfn1 := func(t *DepositData) (size int) { // *DepositData
		size = 184
		return size
	}
	return sfn1(t)
}

func (t *DepositData) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *DepositData) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *DepositData, buf []byte) (*DepositData, error) { // *DepositData
		var err error
		if t == nil {
			t = new(DepositData)
		}
		buflen := len(buf)
		if buflen < 184 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'PublicKey'
		copy(t.PublicKey[:], buf[0:48])
		// Field #1 'WithdrawalCredentials'
		if len(t.WithdrawalCredentials) < 32 {
			t.WithdrawalCredentials = make([]byte, 32)
		} else {
			t.WithdrawalCredentials = t.WithdrawalCredentials[:32]
		}
		copy(t.WithdrawalCredentials[:], buf[48:80])
		// Field #2 'Amount'
		t.Amount = (Gwei)(sszutils.UnmarshallUint64(buf[80:88]))
		// Field #3 'Signature'
		copy(t.Signature[:], buf[88:184])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *DepositData) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *DepositData) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *DepositData) (err error) { // *phase0.DepositData
		idx := hh.Index()
		// Field #0 'PublicKey'
		hh.PutBytes(t.PublicKey[:])
		// Field #1 'WithdrawalCredentials'
		hh.PutBytes(t.WithdrawalCredentials[:])
		// Field #2 'Amount'
		hh.PutUint64(uint64(t.Amount))
		// Field #3 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *DepositData) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *DepositData) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
