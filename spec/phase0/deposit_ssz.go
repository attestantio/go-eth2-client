// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 9c82675fe02549a44dae8ebadc8cbe086881a628897848138e1f2053dd3a4508
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Deposit) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t [][]byte) (err error) { // [][]uint8:33:32
		limit := 33
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			if len(t[i]) > 32 {
				dst = append(dst, t[i][:32]...)
			} else {
				dst = append(dst, t[i][:]...)
				if len(t[i]) < 32 {
					dst = sszutils.AppendZeroPadding(dst, 32-len(t[i]))
				}
			}
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*32)
		}
		return err
	}
	fn2 := func(t *DepositData) (err error) { // *phase0.DepositData
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn3 := func(t *Deposit) (err error) { // *phase0.Deposit
		// Field #0 'Proof'
		if err = fn1(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = fn2(t.Data); err != nil {
			return err
		}
		return err
	}
	err = fn3(t)
	return dst, err
}
func (t *Deposit) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *Deposit) SizeSSZ() (size int) {
	sfn1 := func(t [][]byte) (size int) { // [][]byte:33:32
		limit := 33
		size += int(limit) * 32
		return size
	}
	sfn2 := func(t *Deposit) (size int) { // *Deposit
		size = 184
		size += sfn1(t.Proof)
		return size
	}
	return sfn2(t)
}

func (t *Deposit) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t [][]byte, buf []byte) ([][]byte, error) { // [][]byte:33:32
		var err error
		itemsize := 32
		limit := 33
		if len(t) < int(limit) {
			t = make([][]byte, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		for i := 0; i < int(limit); i++ {
			if len(t[i]) < 32 {
				t[i] = make([]byte, 32)
			} else {
				t[i] = t[i][:32]
			}
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn2 := func(t *DepositData, buf []byte) (*DepositData, error) { // *DepositData
		var err error
		if t == nil {
			t = new(DepositData)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn3 := func(t *Deposit, buf []byte) (*Deposit, error) { // *Deposit
		var err error
		if t == nil {
			t = new(Deposit)
		}
		buflen := len(buf)
		if buflen < 1240 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Proof'
		if t.Proof, err = fn1(t.Proof, buf[0:1056]); err != nil {
			return t, err
		}
		// Field #1 'Data'
		if t.Data, err = fn2(t.Data, buf[1056:1240]); err != nil {
			return t, err
		}
		return t, err
	}
	_, err = fn3(t, buf)
	return err
}

func (t *Deposit) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t [][]byte) (err error) { // [][]uint8:33:32
		limit := 33
		idx := hh.Index()
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		for i := vlen; i < int(limit); i++ {
			hh.PutUint8(0)
		}
		hh.Merkleize(idx)
		return err
	}
	fn2 := func(t *Deposit) (err error) { // *phase0.Deposit
		idx := hh.Index()
		// Field #0 'Proof'
		if err = fn1(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *Deposit) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
