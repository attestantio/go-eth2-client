// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 25e3d4b796fdc94543681138de601ace418a263ee19527e07edaf03d022bafdc
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Deposit) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Deposit) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(Deposit)
	}
	{ // Field #0 'Proof'
		t := t.Proof
		vlen := len(t)
		if vlen > 33 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			vlen := len(t[i])
			if vlen > 32 {
				return dst, sszutils.ErrVectorLength
			}
			dst = append(dst, []byte(t[i][:vlen])...)
			if vlen < 32 {
				dst = sszutils.AppendZeroPadding(dst, (32-vlen)*1)
			}
		}
		if vlen < 33 {
			dst = sszutils.AppendZeroPadding(dst, (33-vlen)*32)
		}
	}
	{ // Field #1 'Data'
		t := t.Data
		if t == nil {
			t = new(DepositData)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *Deposit) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 1240 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Proof' (static)
		buf := buf[0:1056]
		val1 := t.Proof
		val1 = sszutils.ExpandSlice(val1, 33)
		for i := 0; i < 33; i++ {
			buf := buf[32*i : 32*(i+1)]
			val1[i] = sszutils.ExpandSlice(val1[i], 32)
			copy(val1[i][:], buf)
		}
		t.Proof = val1
	}
	{ // Field #1 'Data' (static)
		buf := buf[1056:1240]
		if t.Data == nil {
			t.Data = new(DepositData)
		}
		if err = t.Data.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return nil
}

func (t *Deposit) SizeSSZ() (size int) {
	return 1240
}

func (t *Deposit) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *Deposit) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(Deposit)
	}
	idx := hh.Index()
	{ // Field #0 'Proof'
		t := t.Proof
		vlen := len(t)
		if vlen > 33 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		var val1, val1Empty []byte
		for i := 0; i < 33; i++ {
			if i < vlen {
				val1 = t[i]
			} else if i == vlen {
				val1 = val1Empty
			}
			vlen := len(val1)
			if vlen > 32 {
				return sszutils.ErrVectorLength
			}
			val := val1[:]
			if vlen < 32 {
				val = sszutils.AppendZeroPadding(val, (32-vlen)*1)
			}
			hh.PutBytes(val[:32])
		}
		hh.Merkleize(idx)
	}
	{ // Field #1 'Data'
		t := t.Data
		if t == nil {
			t = new(DepositData)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

