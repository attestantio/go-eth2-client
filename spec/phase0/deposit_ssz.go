// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 9c82675fe02549a44dae8ebadc8cbe086881a628897848138e1f2053dd3a4508
// Version: v0.0.0-20250924020059-826e7b1c49b5 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Deposit) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'Proof'
		t := t.Proof
		limit := 33
		vlen := len(t)
		if vlen > int(limit) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			limit := 32
			vlen := len(t)
			if vlen > int(limit) {
				return dst, sszutils.ErrListTooBig
			}
			dst = append(dst, []byte(t[:limit])...)
			if vlen < int(limit) {
				dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*1)
			}
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*32)
		}
	}
	{ // Field #1 'Data'
		t := t.Data
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *Deposit) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Deposit) SizeSSZ() (size int) {
	return 1240
}

func (t *Deposit) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 1240 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Proof' (static)
		buf := buf[0:1056]
		val1 := t.Proof
		if len(val1) < 33 {
			val1 = make([][]byte, 33)
		} else if len(val1) > 33 {
			val1 = val1[:33]
		}
		for i := 0; i < 33; i++ {
			buf := buf[32*i : 32*(i+1)]
			if len(val1[i]) < 32 {
				val1[i] = make([]byte, 32)
			} else if len(val1[i]) > 32 {
				val1[i] = val1[i][:32]
			}
			copy(val1[i][:], buf)
		}
		t.Proof = val1
	}
	{ // Field #1 'Data' (static)
		buf := buf[1056:1240]
		if t.Data == nil {
			t.Data = new(DepositData)
		}
		if err = t.Data.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return nil
}

func (t *Deposit) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Proof'
		t := t.Proof
		idx := hh.Index()
		vlen := len(t)
		if vlen > 33 {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < 33; i++ {
			var val1 []byte
			if i < vlen {
				val1 = t[i]
			}
			idx := hh.Index()
			vlen := len(val1)
			if vlen > 32 {
				return sszutils.ErrVectorLength
			}
			hh.PutBytes(val1[:])
			hh.Merkleize(idx)
		}
		hh.Merkleize(idx)
	}
	{ // Field #1 'Data'
		t := t.Data
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

func (t *Deposit) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
