// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: bfcd2a0bbf5934fecfa2ab1199a6e450baaa333cf38f30b87e70ab7146ae6e7c
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ProposerSlashing) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *SignedBeaconBlockHeader) (err error) { // *phase0.SignedBeaconBlockHeader
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *ProposerSlashing) (err error) { // *phase0.ProposerSlashing
		// Field #0 'SignedHeader1'
		if err = fn1(t.SignedHeader1); err != nil {
			return err
		}
		// Field #1 'SignedHeader2'
		if err = fn1(t.SignedHeader2); err != nil {
			return err
		}
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *ProposerSlashing) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *ProposerSlashing) SizeSSZ() (size int) {
	sfn1 := func(t *ProposerSlashing) (size int) { // *ProposerSlashing
		size = 416
		return size
	}
	return sfn1(t)
}

func (t *ProposerSlashing) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *SignedBeaconBlockHeader, buf []byte) (*SignedBeaconBlockHeader, error) { // *SignedBeaconBlockHeader
		var err error
		if t == nil {
			t = new(SignedBeaconBlockHeader)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *ProposerSlashing, buf []byte) (*ProposerSlashing, error) { // *ProposerSlashing
		var err error
		if t == nil {
			t = new(ProposerSlashing)
		}
		buflen := len(buf)
		if buflen < 416 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'SignedHeader1'
		if t.SignedHeader1, err = fn1(t.SignedHeader1, buf[0:208]); err != nil {
			return t, err
		}
		// Field #1 'SignedHeader2'
		if t.SignedHeader2, err = fn1(t.SignedHeader2, buf[208:416]); err != nil {
			return t, err
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *ProposerSlashing) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *ProposerSlashing) (err error) { // *phase0.ProposerSlashing
		idx := hh.Index()
		// Field #0 'SignedHeader1'
		if err = t.SignedHeader1.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #1 'SignedHeader2'
		if err = t.SignedHeader2.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *ProposerSlashing) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
