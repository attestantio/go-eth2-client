// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 788269b7200aacfa36e5f4d82cc84a2539996d898e2c02029df669d85557d580
// Version: v1.0.1 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ProposerSlashing) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'SignedHeader1'
		t := t.SignedHeader1
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #1 'SignedHeader2'
		t := t.SignedHeader2
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *ProposerSlashing) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ProposerSlashing) SizeSSZ() (size int) {
	return 416
}

func (t *ProposerSlashing) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 416 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'SignedHeader1' (static)
		buf := buf[0:208]
		if t.SignedHeader1 == nil {
			t.SignedHeader1 = new(SignedBeaconBlockHeader)
		}
		if err = t.SignedHeader1.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #1 'SignedHeader2' (static)
		buf := buf[208:416]
		if t.SignedHeader2 == nil {
			t.SignedHeader2 = new(SignedBeaconBlockHeader)
		}
		if err = t.SignedHeader2.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return nil
}

func (t *ProposerSlashing) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'SignedHeader1'
		t := t.SignedHeader1
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #1 'SignedHeader2'
		t := t.SignedHeader2
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

func (t *ProposerSlashing) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
