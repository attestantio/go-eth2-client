// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 16d14548888a66bb1b7a17d7361d0bb951cc19ff54ce1d68dbd541bde2143925
// Version: v1.0.1 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Checkpoint) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'Epoch'
		t := t.Epoch
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'Root'
		t := t.Root
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *Checkpoint) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Checkpoint) SizeSSZ() (size int) {
	return 40
}

func (t *Checkpoint) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 40 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Epoch' (static)
		buf := buf[0:8]
		t.Epoch = Epoch(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'Root' (static)
		buf := buf[8:40]
		copy(t.Root[:], buf)
	}
	return nil
}

func (t *Checkpoint) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Epoch'
		t := t.Epoch
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'Root'
		t := t.Root
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *Checkpoint) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
