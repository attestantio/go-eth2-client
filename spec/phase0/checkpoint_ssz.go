// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 9e9fecb6facc9a3f29e6440722c165fe1160c7c494ba47abeb6b64b871efcbe9
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Checkpoint) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *Checkpoint) (err error) { // *phase0.Checkpoint
		// Field #0 'Epoch'
		dst = sszutils.MarshalUint64(dst, uint64(t.Epoch))
		// Field #1 'Root'
		dst = append(dst, t.Root[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *Checkpoint) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *Checkpoint) SizeSSZ() (size int) {
	sfn1 := func(t *Checkpoint) (size int) { // *Checkpoint
		size = 40
		return size
	}
	return sfn1(t)
}

func (t *Checkpoint) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *Checkpoint, buf []byte) (*Checkpoint, error) { // *Checkpoint
		var err error
		if t == nil {
			t = new(Checkpoint)
		}
		buflen := len(buf)
		if buflen < 40 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Epoch'
		t.Epoch = (Epoch)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'Root'
		copy(t.Root[:], buf[8:40])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *Checkpoint) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *Checkpoint) (err error) { // *phase0.Checkpoint
		idx := hh.Index()
		// Field #0 'Epoch'
		hh.PutUint64(uint64(t.Epoch))
		// Field #1 'Root'
		hh.PutBytes(t.Root[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *Checkpoint) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
