// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 10097dfa0bc35a788b39306105199964248a572fec3d86b0b3b577efc8febfca
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *ETH1Data) (err error) { // *phase0.ETH1Data
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *ProposerSlashing) (err error) { // *phase0.ProposerSlashing
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn3 := func(t []*ProposerSlashing) (err error) { // []*phase0.ProposerSlashing
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn2(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn4 := func(t *AttesterSlashing) (err error) { // *phase0.AttesterSlashing
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn5 := func(t []*AttesterSlashing) (err error) { // []*phase0.AttesterSlashing
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn6 := func(t *Attestation) (err error) { // *phase0.Attestation
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn7 := func(t []*Attestation) (err error) { // []*phase0.Attestation
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			if err = fn6(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn8 := func(t [][]byte) (err error) { // [][]uint8:33:32
		limit := 33
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			if len(t[i]) > 32 {
				dst = append(dst, t[i][:32]...)
			} else {
				dst = append(dst, t[i][:]...)
				if len(t[i]) < 32 {
					dst = sszutils.AppendZeroPadding(dst, 32-len(t[i]))
				}
			}
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*32)
		}
		return err
	}
	fn9 := func(t *DepositData) (err error) { // *phase0.DepositData
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn10 := func(t *Deposit) (err error) { // *phase0.Deposit
		// Field #0 'Proof'
		if err = fn8(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = fn9(t.Data); err != nil {
			return err
		}
		return err
	}
	fn11 := func(t []*Deposit) (err error) { // []*phase0.Deposit
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn10(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn12 := func(t *SignedVoluntaryExit) (err error) { // *phase0.SignedVoluntaryExit
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn13 := func(t []*SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn12(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn14 := func(t *BeaconBlockBody) (err error) { // *phase0.BeaconBlockBody
		dstlen := len(dst)
		// Field #0 'RANDAOReveal'
		dst = append(dst, t.RANDAOReveal[:]...)
		// Field #1 'ETH1Data'
		if err = fn1(t.ETH1Data); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		dst = append(dst, t.Graffiti[:]...)
		// Offset #3 'ProposerSlashings'
		offset3 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #4 'AttesterSlashings'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #5 'Attestations'
		offset5 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #6 'Deposits'
		offset6 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #7 'VoluntaryExits'
		offset7 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #3 'ProposerSlashings'
		sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
		if err = fn3(t.ProposerSlashings); err != nil {
			return err
		}
		// Dynamic Field #4 'AttesterSlashings'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		if err = fn5(t.AttesterSlashings); err != nil {
			return err
		}
		// Dynamic Field #5 'Attestations'
		sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
		if err = fn7(t.Attestations); err != nil {
			return err
		}
		// Dynamic Field #6 'Deposits'
		sszutils.UpdateOffset(dst[offset6:offset6+4], len(dst)-dstlen)
		if err = fn11(t.Deposits); err != nil {
			return err
		}
		// Dynamic Field #7 'VoluntaryExits'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		if err = fn13(t.VoluntaryExits); err != nil {
			return err
		}
		return err
	}
	fn15 := func(t *BeaconBlock) (err error) { // *phase0.BeaconBlock
		dstlen := len(dst)
		// Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
		// Field #1 'ProposerIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		dst = append(dst, t.ParentRoot[:]...)
		// Field #3 'StateRoot'
		dst = append(dst, t.StateRoot[:]...)
		// Offset #4 'Body'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #4 'Body'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		if err = fn14(t.Body); err != nil {
			return err
		}
		return err
	}
	err = fn15(t)
	return dst, err
}
func (t *BeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *BeaconBlock) SizeSSZ() (size int) {
	sfn1 := func(t []*ProposerSlashing) (size int) { // []*ProposerSlashing
		size += len(t) * 416
		return size
	}
	sfn2 := func(t *AttesterSlashing) (size int) { // *AttesterSlashing
		size = t.SizeSSZ()
		return size
	}
	sfn3 := func(t []*AttesterSlashing) (size int) { // []*AttesterSlashing
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn2(t[i])
		}
		return size
	}
	sfn4 := func(t *Attestation) (size int) { // *Attestation
		size = t.SizeSSZ()
		return size
	}
	sfn5 := func(t []*Attestation) (size int) { // []*Attestation
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn4(t[i])
		}
		return size
	}
	sfn6 := func(t [][]byte) (size int) { // [][]byte:33:32
		limit := 33
		size += int(limit) * 32
		return size
	}
	sfn7 := func(t *Deposit) (size int) { // *Deposit
		size = 184
		size += sfn6(t.Proof)
		return size
	}
	sfn8 := func(t []*Deposit) (size int) { // []*Deposit
		if len(t) > 0 {
			size += len(t) * sfn7(t[0])
		}
		return size
	}
	sfn9 := func(t []*SignedVoluntaryExit) (size int) { // []*SignedVoluntaryExit
		size += len(t) * 112
		return size
	}
	sfn10 := func(t *BeaconBlockBody) (size int) { // *BeaconBlockBody
		size = 200
		size += 4 + sfn1(t.ProposerSlashings)
		size += 4 + sfn3(t.AttesterSlashings)
		size += 4 + sfn5(t.Attestations)
		size += 4 + sfn8(t.Deposits)
		size += 4 + sfn9(t.VoluntaryExits)
		return size
	}
	sfn11 := func(t *BeaconBlock) (size int) { // *BeaconBlock
		size = 80
		size += 4 + sfn10(t.Body)
		return size
	}
	return sfn11(t)
}

func (t *BeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *ETH1Data, buf []byte) (*ETH1Data, error) { // *ETH1Data
		var err error
		if t == nil {
			t = new(ETH1Data)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *ProposerSlashing, buf []byte) (*ProposerSlashing, error) { // *ProposerSlashing
		var err error
		if t == nil {
			t = new(ProposerSlashing)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn3 := func(t []*ProposerSlashing, buf []byte) ([]*ProposerSlashing, error) { // []*ProposerSlashing
		var err error
		buflen := len(buf)
		itemsize := 416
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*ProposerSlashing, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn2(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn4 := func(t *AttesterSlashing, buf []byte) (*AttesterSlashing, error) { // *AttesterSlashing
		var err error
		if t == nil {
			t = new(AttesterSlashing)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn5 := func(t []*AttesterSlashing, buf []byte) ([]*AttesterSlashing, error) { // []*AttesterSlashing
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*AttesterSlashing, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if t[i], err = fn4(t[i], buf[offset:endOffset]); err != nil {
				return t, err
			}
			offset = endOffset
		}
		return t, err
	}
	fn6 := func(t *Attestation, buf []byte) (*Attestation, error) { // *Attestation
		var err error
		if t == nil {
			t = new(Attestation)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn7 := func(t []*Attestation, buf []byte) ([]*Attestation, error) { // []*Attestation
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*Attestation, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if t[i], err = fn6(t[i], buf[offset:endOffset]); err != nil {
				return t, err
			}
			offset = endOffset
		}
		return t, err
	}
	fn8 := func(t [][]byte, buf []byte) ([][]byte, error) { // [][]byte:33:32
		var err error
		itemsize := 32
		limit := 33
		if len(t) < int(limit) {
			t = make([][]byte, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		for i := 0; i < int(limit); i++ {
			if len(t[i]) < 32 {
				t[i] = make([]byte, 32)
			} else {
				t[i] = t[i][:32]
			}
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn9 := func(t *DepositData, buf []byte) (*DepositData, error) { // *DepositData
		var err error
		if t == nil {
			t = new(DepositData)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn10 := func(t *Deposit, buf []byte) (*Deposit, error) { // *Deposit
		var err error
		if t == nil {
			t = new(Deposit)
		}
		buflen := len(buf)
		if buflen < 1240 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Proof'
		if t.Proof, err = fn8(t.Proof, buf[0:1056]); err != nil {
			return t, err
		}
		// Field #1 'Data'
		if t.Data, err = fn9(t.Data, buf[1056:1240]); err != nil {
			return t, err
		}
		return t, err
	}
	fn11 := func(t []*Deposit, buf []byte) ([]*Deposit, error) { // []*Deposit
		var err error
		buflen := len(buf)
		itemsize := 1240
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*Deposit, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn10(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn12 := func(t *SignedVoluntaryExit, buf []byte) (*SignedVoluntaryExit, error) { // *SignedVoluntaryExit
		var err error
		if t == nil {
			t = new(SignedVoluntaryExit)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn13 := func(t []*SignedVoluntaryExit, buf []byte) ([]*SignedVoluntaryExit, error) { // []*SignedVoluntaryExit
		var err error
		buflen := len(buf)
		itemsize := 112
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*SignedVoluntaryExit, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn12(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn14 := func(t *BeaconBlockBody, buf []byte) (*BeaconBlockBody, error) { // *BeaconBlockBody
		var err error
		if t == nil {
			t = new(BeaconBlockBody)
		}
		bufpos := 220
		buflen := len(buf)
		if buflen < 220 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #3 'ProposerSlashings'
		offset3 := int(sszutils.ReadOffset(buf[200:204]))
		// Read offset #4 'AttesterSlashings'
		offset4 := int(sszutils.ReadOffset(buf[204:208]))
		// Read offset #5 'Attestations'
		offset5 := int(sszutils.ReadOffset(buf[208:212]))
		// Read offset #6 'Deposits'
		offset6 := int(sszutils.ReadOffset(buf[212:216]))
		// Read offset #7 'VoluntaryExits'
		offset7 := int(sszutils.ReadOffset(buf[216:220]))
		// Field #0 'RANDAOReveal'
		copy(t.RANDAOReveal[:], buf[0:96])
		// Field #1 'ETH1Data'
		if t.ETH1Data, err = fn1(t.ETH1Data, buf[96:168]); err != nil {
			return t, err
		}
		// Field #2 'Graffiti'
		copy(t.Graffiti[:], buf[168:200])
		// Dynamic Field #3 'ProposerSlashings'
		if offset3 < bufpos || offset4 > buflen || offset4 < offset3 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset3:offset4]
			if t.ProposerSlashings, err = fn3(t.ProposerSlashings, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #4 'AttesterSlashings'
		if offset4 < bufpos || offset5 > buflen || offset5 < offset4 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset4:offset5]
			if t.AttesterSlashings, err = fn5(t.AttesterSlashings, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #5 'Attestations'
		if offset5 < bufpos || offset6 > buflen || offset6 < offset5 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset5:offset6]
			if t.Attestations, err = fn7(t.Attestations, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #6 'Deposits'
		if offset6 < bufpos || offset7 > buflen || offset7 < offset6 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset6:offset7]
			if t.Deposits, err = fn11(t.Deposits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #7 'VoluntaryExits'
		if offset7 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset7:]
			if t.VoluntaryExits, err = fn13(t.VoluntaryExits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	fn15 := func(t *BeaconBlock, buf []byte) (*BeaconBlock, error) { // *BeaconBlock
		var err error
		if t == nil {
			t = new(BeaconBlock)
		}
		bufpos := 84
		buflen := len(buf)
		if buflen < 84 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #4 'Body'
		offset4 := int(sszutils.ReadOffset(buf[80:84]))
		// Field #0 'Slot'
		t.Slot = (Slot)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'ProposerIndex'
		t.ProposerIndex = (ValidatorIndex)(sszutils.UnmarshallUint64(buf[8:16]))
		// Field #2 'ParentRoot'
		copy(t.ParentRoot[:], buf[16:48])
		// Field #3 'StateRoot'
		copy(t.StateRoot[:], buf[48:80])
		// Dynamic Field #4 'Body'
		if offset4 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset4:]
			if t.Body, err = fn14(t.Body, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn15(t, buf)
	return err
}

func (t *BeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t []*ProposerSlashing) (err error) { // []*phase0.ProposerSlashing:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t []*AttesterSlashing) (err error) { // []*phase0.AttesterSlashing:2
		maxLen := 2
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn3 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist:2048
		maxLen := uint64(2048)
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > maxLen {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (maxLen+255)/256)
		return err
	}
	fn4 := func(t *Attestation) (err error) { // *phase0.Attestation:pack
		idx := hh.Index()
		// Field #0 'AggregationBits'
		if err = fn3(t.AggregationBits); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	fn5 := func(t []*Attestation) (err error) { // []*phase0.Attestation:128
		maxLen := 128
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn6 := func(t [][]byte) (err error) { // [][]uint8:33:32
		limit := 33
		idx := hh.Index()
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		for i := vlen; i < int(limit); i++ {
			hh.PutUint8(0)
		}
		hh.Merkleize(idx)
		return err
	}
	fn7 := func(t *Deposit) (err error) { // *phase0.Deposit:pack
		idx := hh.Index()
		// Field #0 'Proof'
		if err = fn6(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn8 := func(t []*Deposit) (err error) { // []*phase0.Deposit:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn7(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn9 := func(t []*SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn10 := func(t *BeaconBlockBody) (err error) { // *phase0.BeaconBlockBody
		idx := hh.Index()
		// Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:])
		// Field #1 'ETH1Data'
		if err = t.ETH1Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:])
		// Field #3 'ProposerSlashings'
		if err = fn1(t.ProposerSlashings); err != nil {
			return err
		}
		// Field #4 'AttesterSlashings'
		if err = fn2(t.AttesterSlashings); err != nil {
			return err
		}
		// Field #5 'Attestations'
		if err = fn5(t.Attestations); err != nil {
			return err
		}
		// Field #6 'Deposits'
		if err = fn8(t.Deposits); err != nil {
			return err
		}
		// Field #7 'VoluntaryExits'
		if err = fn9(t.VoluntaryExits); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn11 := func(t *BeaconBlock) (err error) { // *phase0.BeaconBlock
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'Body'
		if err = fn10(t.Body); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn11(t)
}
func (t *BeaconBlock) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
