// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 8bd48b0fa598582bfa439f4f08ccb417df2e6efe757c9720420530c9e024daf4
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconBlockBody) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	{ // Field #0 'RANDAOReveal'
		t := t.RANDAOReveal
		limit := 96
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #1 'ETH1Data'
		t := t.ETH1Data
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #2 'Graffiti'
		t := t.Graffiti
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	// Offset #3 'ProposerSlashings'
	offset3 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #4 'AttesterSlashings'
	offset4 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #5 'Attestations'
	offset5 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #6 'Deposits'
	offset6 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #7 'VoluntaryExits'
	offset7 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #3 'ProposerSlashings'
		sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
		t := t.ProposerSlashings
		max := 16
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #4 'AttesterSlashings'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		t := t.AttesterSlashings
		max := 2
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #5 'Attestations'
		sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
		t := t.Attestations
		max := 128
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #6 'Deposits'
		sszutils.UpdateOffset(dst[offset6:offset6+4], len(dst)-dstlen)
		t := t.Deposits
		max := 16
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #7 'VoluntaryExits'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		t := t.VoluntaryExits
		max := 16
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *BeaconBlockBody) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BeaconBlockBody) SizeSSZ() (size int) {
	size += 96 // Field #0 'RANDAOReveal'
	size += 72 // Field #1 'ETH1Data'
	size += 32 // Field #2 'Graffiti'
	size += 4 // Offset for field #3 'ProposerSlashings'
	size += 4 // Offset for field #4 'AttesterSlashings'
	size += 4 // Offset for field #5 'Attestations'
	size += 4 // Offset for field #6 'Deposits'
	size += 4 // Offset for field #7 'VoluntaryExits'
	{ // Dynamic field #3 'ProposerSlashings'
		vlen := len(t.ProposerSlashings)
		size += vlen * 416
	}
	{ // Dynamic field #4 'AttesterSlashings'
		vlen := len(t.AttesterSlashings)
		size += vlen * 4 // Offsets
		for i := 0; i < vlen; i++ {
			t := t.AttesterSlashings[i]
			size += t.SizeSSZ()
		}
	}
	{ // Dynamic field #5 'Attestations'
		vlen := len(t.Attestations)
		size += vlen * 4 // Offsets
		for i := 0; i < vlen; i++ {
			t := t.Attestations[i]
			size += t.SizeSSZ()
		}
	}
	{ // Dynamic field #6 'Deposits'
		vlen := len(t.Deposits)
		size += vlen * 1240
	}
	{ // Dynamic field #7 'VoluntaryExits'
		vlen := len(t.VoluntaryExits)
		size += vlen * 112
	}
	return size
}

func (t *BeaconBlockBody) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 220 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'RANDAOReveal' (static)
		buf := buf[0:96]
		val1 := t.RANDAOReveal
		copy(val1[:], buf)
		t.RANDAOReveal = val1
	}
	{ // Field #1 'ETH1Data' (static)
		buf := buf[96:168]
		val2 := t.ETH1Data
		if val2 == nil {
			val2 = new(ETH1Data)
		}
		if err = val2.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.ETH1Data = val2
	}
	{ // Field #2 'Graffiti' (static)
		buf := buf[168:200]
		val3 := t.Graffiti
		copy(val3[:], buf)
		t.Graffiti = val3
	}
	// Field #3 'ProposerSlashings' (offset)
	offset3 := int(sszutils.UnmarshallUint32(buf[200:204]))
	if offset3 < 220 || offset3 > buflen {
		return sszutils.ErrOffset
	}
	// Field #4 'AttesterSlashings' (offset)
	offset4 := int(sszutils.UnmarshallUint32(buf[204:208]))
	if offset4 < offset3 || offset4 > buflen {
		return sszutils.ErrOffset
	}
	// Field #5 'Attestations' (offset)
	offset5 := int(sszutils.UnmarshallUint32(buf[208:212]))
	if offset5 < offset4 || offset5 > buflen {
		return sszutils.ErrOffset
	}
	// Field #6 'Deposits' (offset)
	offset6 := int(sszutils.UnmarshallUint32(buf[212:216]))
	if offset6 < offset5 || offset6 > buflen {
		return sszutils.ErrOffset
	}
	// Field #7 'VoluntaryExits' (offset)
	offset7 := int(sszutils.UnmarshallUint32(buf[216:220]))
	if offset7 < offset6 || offset7 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #3 'ProposerSlashings' (dynamic)
		buf := buf[offset3:offset4]
		val4 := t.ProposerSlashings
		itemCount := len(buf)/416
		if len(buf)%416 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val4) < itemCount) {
			val4 = make([]*ProposerSlashing, itemCount)
		} else if(len(val4) > itemCount) {
			val4 = val4[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val5 := val4[i]
			if val5 == nil {
				val5 = new(ProposerSlashing)
			}
			buf := buf[416*i:416*(i+1)]
			if err = val5.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val4[i] = val5
		}
		t.ProposerSlashings = val4
	}
	{ // Field #4 'AttesterSlashings' (dynamic)
		buf := buf[offset4:offset5]
		val6 := t.AttesterSlashings
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset/4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val6) < itemCount) {
			val6 = make([]*AttesterSlashing, itemCount)
		} else if(len(val6) > itemCount) {
			val6 = val6[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4:(i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val7 := val6[i]
			if val7 == nil {
				val7 = new(AttesterSlashing)
			}
			if err = val7.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val6[i] = val7
		}
		t.AttesterSlashings = val6
	}
	{ // Field #5 'Attestations' (dynamic)
		buf := buf[offset5:offset6]
		val8 := t.Attestations
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset/4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val8) < itemCount) {
			val8 = make([]*Attestation, itemCount)
		} else if(len(val8) > itemCount) {
			val8 = val8[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4:(i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val9 := val8[i]
			if val9 == nil {
				val9 = new(Attestation)
			}
			if err = val9.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val8[i] = val9
		}
		t.Attestations = val8
	}
	{ // Field #6 'Deposits' (dynamic)
		buf := buf[offset6:offset7]
		val10 := t.Deposits
		itemCount := len(buf)/1240
		if len(buf)%1240 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val10) < itemCount) {
			val10 = make([]*Deposit, itemCount)
		} else if(len(val10) > itemCount) {
			val10 = val10[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val11 := val10[i]
			if val11 == nil {
				val11 = new(Deposit)
			}
			buf := buf[1240*i:1240*(i+1)]
			if err = val11.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val10[i] = val11
		}
		t.Deposits = val10
	}
	{ // Field #7 'VoluntaryExits' (dynamic)
		buf := buf[offset7:]
		val12 := t.VoluntaryExits
		itemCount := len(buf)/112
		if len(buf)%112 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val12) < itemCount) {
			val12 = make([]*SignedVoluntaryExit, itemCount)
		} else if(len(val12) > itemCount) {
			val12 = val12[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val13 := val12[i]
			if val13 == nil {
				val13 = new(SignedVoluntaryExit)
			}
			buf := buf[112*i:112*(i+1)]
			if err = val13.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val12[i] = val13
		}
		t.VoluntaryExits = val12
	}
	return nil
}

func (t *BeaconBlockBody) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'RANDAOReveal'
		t := t.RANDAOReveal
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #1 'ETH1Data'
		t := t.ETH1Data
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #2 'Graffiti'
		t := t.Graffiti
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #3 'ProposerSlashings'
		t := t.ProposerSlashings
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #4 'AttesterSlashings'
		t := t.AttesterSlashings
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(2, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #5 'Attestations'
		t := t.Attestations
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(128, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #6 'Deposits'
		t := t.Deposits
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #7 'VoluntaryExits'
		t := t.VoluntaryExits
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *BeaconBlockBody) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
