// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 5e61b02ecef8105c064c81ab8f9c8cb277bac81c41d2c7d20c07f03d78f7f3eb
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *AttestationData) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *AttestationData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(AttestationData)
	}
	{ // Field #0 'Slot'
		t := t.Slot
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'Index'
		t := t.Index
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #2 'BeaconBlockRoot'
		t := t.BeaconBlockRoot
		dst = append(dst, []byte(t[:32])...)
	}
	{ // Field #3 'Source'
		t := t.Source
		if t == nil {
			t = new(Checkpoint)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #4 'Target'
		t := t.Target
		if t == nil {
			t = new(Checkpoint)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *AttestationData) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 128 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Slot' (static)
		buf := buf[0:8]
		t.Slot = Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'Index' (static)
		buf := buf[8:16]
		t.Index = CommitteeIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'BeaconBlockRoot' (static)
		buf := buf[16:48]
		copy(t.BeaconBlockRoot[:], buf)
	}
	{ // Field #3 'Source' (static)
		buf := buf[48:88]
		if t.Source == nil {
			t.Source = new(Checkpoint)
		}
		if err = t.Source.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #4 'Target' (static)
		buf := buf[88:128]
		if t.Target == nil {
			t.Target = new(Checkpoint)
		}
		if err = t.Target.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return nil
}

func (t *AttestationData) SizeSSZ() (size int) {
	return 128
}

func (t *AttestationData) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *AttestationData) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(AttestationData)
	}
	idx := hh.Index()
	{ // Field #0 'Slot'
		t := t.Slot
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'Index'
		t := t.Index
		hh.PutUint64(uint64(t))
	}
	{ // Field #2 'BeaconBlockRoot'
		t := t.BeaconBlockRoot
		hh.PutBytes(t[:32])
	}
	{ // Field #3 'Source'
		t := t.Source
		if t == nil {
			t = new(Checkpoint)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #4 'Target'
		t := t.Target
		if t == nil {
			t = new(Checkpoint)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

