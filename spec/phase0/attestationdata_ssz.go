// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: b03a4c03be9738d6df7cad48a6977362f78cbcbbd3ba5a94912e4425a46dfe2a
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *AttestationData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'Slot'
		t := t.Slot
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'Index'
		t := t.Index
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #2 'BeaconBlockRoot'
		t := t.BeaconBlockRoot
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #3 'Source'
		t := t.Source
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #4 'Target'
		t := t.Target
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *AttestationData) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *AttestationData) SizeSSZ() (size int) {
	return 128
}

func (t *AttestationData) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 128 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Slot' (static)
		buf := buf[0:8]
		t.Slot = Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'Index' (static)
		buf := buf[8:16]
		t.Index = CommitteeIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'BeaconBlockRoot' (static)
		buf := buf[16:48]
		val1 := t.BeaconBlockRoot
		copy(val1[:], buf)
		t.BeaconBlockRoot = val1
	}
	{ // Field #3 'Source' (static)
		buf := buf[48:88]
		val2 := t.Source
		if val2 == nil {
			val2 = new(Checkpoint)
		}
		if err = val2.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Source = val2
	}
	{ // Field #4 'Target' (static)
		buf := buf[88:128]
		val3 := t.Target
		if val3 == nil {
			val3 = new(Checkpoint)
		}
		if err = val3.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Target = val3
	}
	return nil
}

func (t *AttestationData) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Slot'
		t := t.Slot
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'Index'
		t := t.Index
		hh.PutUint64(uint64(t))
	}
	{ // Field #2 'BeaconBlockRoot'
		t := t.BeaconBlockRoot
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #3 'Source'
		t := t.Source
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #4 'Target'
		t := t.Target
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

func (t *AttestationData) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
