// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 0b61ac74b75fe39c9163569ec7ecdea9d6b35dc5e5c7ae3c88ff127acedc8f24
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *AttestationData) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *AttestationData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *Checkpoint) (err error) { // *phase0.Checkpoint
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *AttestationData) (err error) { // *phase0.AttestationData
		// Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
		// Field #1 'Index'
		dst = sszutils.MarshalUint64(dst, uint64(t.Index))
		// Field #2 'BeaconBlockRoot'
		dst = append(dst, t.BeaconBlockRoot[:]...)
		// Field #3 'Source'
		if err = fn1(t.Source); err != nil {
			return err
		}
		// Field #4 'Target'
		if err = fn1(t.Target); err != nil {
			return err
		}
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *AttestationData) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *AttestationData) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *AttestationData) SizeSSZ() (size int) {
	sfn1 := func(t *AttestationData) (size int) { // *AttestationData
		size = 128
		return size
	}
	return sfn1(t)
}

func (t *AttestationData) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *AttestationData) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *Checkpoint, buf []byte) (*Checkpoint, error) { // *Checkpoint
		var err error
		if t == nil {
			t = new(Checkpoint)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *AttestationData, buf []byte) (*AttestationData, error) { // *AttestationData
		var err error
		if t == nil {
			t = new(AttestationData)
		}
		buflen := len(buf)
		if buflen < 128 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Slot'
		t.Slot = (Slot)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'Index'
		t.Index = (CommitteeIndex)(sszutils.UnmarshallUint64(buf[8:16]))
		// Field #2 'BeaconBlockRoot'
		copy(t.BeaconBlockRoot[:], buf[16:48])
		// Field #3 'Source'
		if t.Source, err = fn1(t.Source, buf[48:88]); err != nil {
			return t, err
		}
		// Field #4 'Target'
		if t.Target, err = fn1(t.Target, buf[88:128]); err != nil {
			return t, err
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *AttestationData) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *AttestationData) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *AttestationData) (err error) { // *phase0.AttestationData
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'Index'
		hh.PutUint64(uint64(t.Index))
		// Field #2 'BeaconBlockRoot'
		hh.PutBytes(t.BeaconBlockRoot[:])
		// Field #3 'Source'
		if err = t.Source.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #4 'Target'
		if err = t.Target.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *AttestationData) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *AttestationData) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
