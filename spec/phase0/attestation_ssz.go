// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: f0e81c21810fa6be0de0d2c1db6503f2af6f1598c1842990b4a782cd100a1be2
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *Attestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	// Offset #0 'AggregationBits'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #1 'Data'
		t := t.Data
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #2 'Signature'
		t := t.Signature
		limit := 96
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Dynamic Field #0 'AggregationBits'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.AggregationBits
		max := 2048
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		dst = append(dst, []byte(t[:])...)
	}
	return dst, nil
}

func (t *Attestation) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Attestation) SizeSSZ() (size int) {
	size += 4 // Offset for field #0 'AggregationBits'
	size += 128 // Field #1 'Data'
	size += 96 // Field #2 'Signature'
	{ // Dynamic field #0 'AggregationBits'
		size += len(t.AggregationBits)
	}
	return size
}

func (t *Attestation) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 228 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'AggregationBits' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 228 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #1 'Data' (static)
		buf := buf[4:132]
		val1 := t.Data
		if val1 == nil {
			val1 = new(AttestationData)
		}
		if err = val1.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Data = val1
	}
	{ // Field #2 'Signature' (static)
		buf := buf[132:228]
		val2 := t.Signature
		copy(val2[:], buf)
		t.Signature = val2
	}
	{ // Field #0 'AggregationBits' (dynamic)
		buf := buf[offset0:]
		val3 := t.AggregationBits
		limit := len(buf)
		if(len(val3) < limit) {
			val3 = make(go_bitfield.Bitlist, limit)
		} else if(len(val3) > limit) {
			val3 = val3[:limit]
		}
		copy(val3[:], buf)
		t.AggregationBits = val3
	}
	return nil
}

func (t *Attestation) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'AggregationBits'
		t := t.AggregationBits
		idx := hh.Index()
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > 2048 {
			return sszutils.ErrListTooBig
		}
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (2048+255)/256)
	}
	{ // Field #1 'Data'
		t := t.Data
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #2 'Signature'
		t := t.Signature
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *Attestation) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
