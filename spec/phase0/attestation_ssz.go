// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: b49d88f19895948d1f2952cc2b43a5742bf613bf1bc1aba56cddcc601ba63672
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package phase0

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *Attestation) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *Attestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist
		dst = append(dst, t[:]...)
		return err
	}
	fn2 := func(t *AttestationData) (err error) { // *phase0.AttestationData
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn3 := func(t *Attestation) (err error) { // *phase0.Attestation
		dstlen := len(dst)
		// Offset #0 'AggregationBits'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #1 'Data'
		if err = fn2(t.Data); err != nil {
			return err
		}
		// Field #2 'Signature'
		dst = append(dst, t.Signature[:]...)
		// Dynamic Field #0 'AggregationBits'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn1(t.AggregationBits); err != nil {
			return err
		}
		return err
	}
	err = fn3(t)
	return dst, err
}
func (t *Attestation) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *Attestation) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *Attestation) SizeSSZ() (size int) {
	sfn1 := func(t go_bitfield.Bitlist) (size int) { // go_bitfield.Bitlist
		size += len(t)
		return size
	}
	sfn2 := func(t *Attestation) (size int) { // *Attestation
		size = 224
		size += 4 + sfn1(t.AggregationBits)
		return size
	}
	return sfn2(t)
}

func (t *Attestation) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *Attestation) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t go_bitfield.Bitlist, buf []byte) (go_bitfield.Bitlist, error) { // go_bitfield.Bitlist
		var err error
		if len(t) < len(buf) {
			t = make(go_bitfield.Bitlist, len(buf))
		} else {
			t = t[:len(buf)]
		}
		if len(buf) > 0 {
			copy(t[:], buf)
		}
		return t, err
	}
	fn2 := func(t *AttestationData, buf []byte) (*AttestationData, error) { // *AttestationData
		var err error
		if t == nil {
			t = new(AttestationData)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn3 := func(t *Attestation, buf []byte) (*Attestation, error) { // *Attestation
		var err error
		if t == nil {
			t = new(Attestation)
		}
		bufpos := 228
		buflen := len(buf)
		if buflen < 228 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'AggregationBits'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Field #1 'Data'
		if t.Data, err = fn2(t.Data, buf[4:132]); err != nil {
			return t, err
		}
		// Field #2 'Signature'
		copy(t.Signature[:], buf[132:228])
		// Dynamic Field #0 'AggregationBits'
		if offset0 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:]
			if t.AggregationBits, err = fn1(t.AggregationBits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn3(t, buf)
	return err
}

func (t *Attestation) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist:2048:MAX_VALIDATORS_PER_COMMITTEE
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 2048
		}
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > maxLen {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (maxLen+255)/256)
		return err
	}
	fn2 := func(t *Attestation) (err error) { // *phase0.Attestation
		idx := hh.Index()
		// Field #0 'AggregationBits'
		if err = fn1(t.AggregationBits); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *Attestation) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *Attestation) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *Attestation) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
