// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: ca2bed8204bce42f575d0a19743c0b24a9e0e565a0ab52efb7c8df73a60e7010
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SingleAttestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'CommitteeIndex'
		t := t.CommitteeIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'AttesterIndex'
		t := t.AttesterIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #2 'Data'
		t := t.Data
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #3 'Signature'
		t := t.Signature
		limit := 96
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *SingleAttestation) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SingleAttestation) SizeSSZ() (size int) {
	return 240
}

func (t *SingleAttestation) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 240 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'CommitteeIndex' (static)
		buf := buf[0:8]
		t.CommitteeIndex = phase0.CommitteeIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'AttesterIndex' (static)
		buf := buf[8:16]
		t.AttesterIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'Data' (static)
		buf := buf[16:144]
		val1 := t.Data
		if val1 == nil {
			val1 = new(phase0.AttestationData)
		}
		if err = val1.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Data = val1
	}
	{ // Field #3 'Signature' (static)
		buf := buf[144:240]
		val2 := t.Signature
		copy(val2[:], buf)
		t.Signature = val2
	}
	return nil
}

func (t *SingleAttestation) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'CommitteeIndex'
		t := t.CommitteeIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'AttesterIndex'
		t := t.AttesterIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #2 'Data'
		t := t.Data
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #3 'Signature'
		t := t.Signature
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *SingleAttestation) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
