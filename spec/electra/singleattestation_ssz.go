// Code generated by fastssz. DO NOT EDIT.
// Hash: a08e95de8ee579e2cf340dad317beb7bd17c9384d835e81d0cfc62344fdbb378
// Version: 0.1.3
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SingleAttestation object
func (s *SingleAttestation) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SingleAttestation object to a target array
func (s *SingleAttestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'CommitteeIndex'
	dst = ssz.MarshalUint64(dst, uint64(s.CommitteeIndex))

	// Field (1) 'AttesterIndex'
	dst = ssz.MarshalUint64(dst, uint64(s.AttesterIndex))

	// Field (2) 'Data'
	if s.Data == nil {
		s.Data = new(phase0.AttestationData)
	}
	if dst, err = s.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'Signature'
	dst = append(dst, s.Signature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the SingleAttestation object
func (s *SingleAttestation) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 240 {
		return ssz.ErrSize
	}

	// Field (0) 'CommitteeIndex'
	s.CommitteeIndex = phase0.CommitteeIndex(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'AttesterIndex'
	s.AttesterIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'Data'
	if s.Data == nil {
		s.Data = new(phase0.AttestationData)
	}
	if err = s.Data.UnmarshalSSZ(buf[16:144]); err != nil {
		return err
	}

	// Field (3) 'Signature'
	copy(s.Signature[:], buf[144:240])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SingleAttestation object
func (s *SingleAttestation) SizeSSZ() (size int) {
	size = 240
	return
}

// HashTreeRoot ssz hashes the SingleAttestation object
func (s *SingleAttestation) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SingleAttestation object with a hasher
func (s *SingleAttestation) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'CommitteeIndex'
	hh.PutUint64(uint64(s.CommitteeIndex))

	// Field (1) 'AttesterIndex'
	hh.PutUint64(uint64(s.AttesterIndex))

	// Field (2) 'Data'
	if s.Data == nil {
		s.Data = new(phase0.AttestationData)
	}
	if err = s.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'Signature'
	hh.PutBytes(s.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SingleAttestation object
func (s *SingleAttestation) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
