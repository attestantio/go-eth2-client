// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 67b9818396127c6bafa0168d8b413e40e6ed7bdd8ed09e567f6dfe9a20a0cbad
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ConsolidationRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'SourceAddress'
		t := t.SourceAddress
		limit := 20
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #1 'SourcePubkey'
		t := t.SourcePubkey
		limit := 48
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #2 'TargetPubkey'
		t := t.TargetPubkey
		limit := 48
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *ConsolidationRequest) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ConsolidationRequest) SizeSSZ() (size int) {
	return 116
}

func (t *ConsolidationRequest) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 116 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'SourceAddress' (static)
		buf := buf[0:20]
		copy(t.SourceAddress[:], buf)
	}
	{ // Field #1 'SourcePubkey' (static)
		buf := buf[20:68]
		copy(t.SourcePubkey[:], buf)
	}
	{ // Field #2 'TargetPubkey' (static)
		buf := buf[68:116]
		copy(t.TargetPubkey[:], buf)
	}
	return nil
}

func (t *ConsolidationRequest) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'SourceAddress'
		t := t.SourceAddress
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #1 'SourcePubkey'
		t := t.SourcePubkey
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #2 'TargetPubkey'
		t := t.TargetPubkey
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *ConsolidationRequest) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
