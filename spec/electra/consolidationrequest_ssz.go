// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 67b9818396127c6bafa0168d8b413e40e6ed7bdd8ed09e567f6dfe9a20a0cbad
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ConsolidationRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *ConsolidationRequest) (err error) { // *electra.ConsolidationRequest
		// Field #0 'SourceAddress'
		dst = append(dst, t.SourceAddress[:]...)
		// Field #1 'SourcePubkey'
		dst = append(dst, t.SourcePubkey[:]...)
		// Field #2 'TargetPubkey'
		dst = append(dst, t.TargetPubkey[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *ConsolidationRequest) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *ConsolidationRequest) SizeSSZ() (size int) {
	sfn1 := func(t *ConsolidationRequest) (size int) { // *ConsolidationRequest
		size = 116
		return size
	}
	return sfn1(t)
}

func (t *ConsolidationRequest) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *ConsolidationRequest, buf []byte) (*ConsolidationRequest, error) { // *ConsolidationRequest
		var err error
		if t == nil {
			t = new(ConsolidationRequest)
		}
		buflen := len(buf)
		if buflen < 116 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'SourceAddress'
		copy(t.SourceAddress[:], buf[0:20])
		// Field #1 'SourcePubkey'
		copy(t.SourcePubkey[:], buf[20:68])
		// Field #2 'TargetPubkey'
		copy(t.TargetPubkey[:], buf[68:116])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *ConsolidationRequest) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *ConsolidationRequest) (err error) { // *electra.ConsolidationRequest
		idx := hh.Index()
		// Field #0 'SourceAddress'
		hh.PutBytes(t.SourceAddress[:])
		// Field #1 'SourcePubkey'
		hh.PutBytes(t.SourcePubkey[:])
		// Field #2 'TargetPubkey'
		hh.PutBytes(t.TargetPubkey[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *ConsolidationRequest) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
