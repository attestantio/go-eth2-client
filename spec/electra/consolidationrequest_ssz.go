// Code generated by fastssz. DO NOT EDIT.
// Hash: 17d4c9180818d70e873edf284079b326d586a16686d17c7c974a8a2fd19ec3e9
// Version: 0.1.3
package electra

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ConsolidationRequest object
func (e *ConsolidationRequest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ConsolidationRequest object to a target array
func (e *ConsolidationRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'SourceAddress'
	dst = append(dst, e.SourceAddress[:]...)

	// Field (1) 'SourcePubkey'
	dst = append(dst, e.SourcePubkey[:]...)

	// Field (2) 'TargetPubkey'
	dst = append(dst, e.TargetPubkey[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConsolidationRequest object
func (e *ConsolidationRequest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 116 {
		return ssz.ErrSize
	}

	// Field (0) 'SourceAddress'
	copy(e.SourceAddress[:], buf[0:20])

	// Field (1) 'SourcePubkey'
	copy(e.SourcePubkey[:], buf[20:68])

	// Field (2) 'TargetPubkey'
	copy(e.TargetPubkey[:], buf[68:116])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConsolidationRequest object
func (e *ConsolidationRequest) SizeSSZ() (size int) {
	size = 116
	return
}

// HashTreeRoot ssz hashes the ConsolidationRequest object
func (e *ConsolidationRequest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ConsolidationRequest object with a hasher
func (e *ConsolidationRequest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SourceAddress'
	hh.PutBytes(e.SourceAddress[:])

	// Field (1) 'SourcePubkey'
	hh.PutBytes(e.SourcePubkey[:])

	// Field (2) 'TargetPubkey'
	hh.PutBytes(e.TargetPubkey[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ConsolidationRequest object
func (e *ConsolidationRequest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}
