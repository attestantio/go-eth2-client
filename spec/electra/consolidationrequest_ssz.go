// Code generated by fastssz. DO NOT EDIT.
// Hash: 5c0795a737413b7dee222139ce353bfc25323debce66933bff7b3193d76324e8
// Version: 0.1.3
package electra

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ConsolidationRequest object
func (c *ConsolidationRequest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConsolidationRequest object to a target array
func (c *ConsolidationRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'SourceAddress'
	dst = append(dst, c.SourceAddress[:]...)

	// Field (1) 'SourcePubkey'
	dst = append(dst, c.SourcePubkey[:]...)

	// Field (2) 'TargetPubkey'
	dst = append(dst, c.TargetPubkey[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConsolidationRequest object
func (c *ConsolidationRequest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 116 {
		return ssz.ErrSize
	}

	// Field (0) 'SourceAddress'
	copy(c.SourceAddress[:], buf[0:20])

	// Field (1) 'SourcePubkey'
	copy(c.SourcePubkey[:], buf[20:68])

	// Field (2) 'TargetPubkey'
	copy(c.TargetPubkey[:], buf[68:116])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConsolidationRequest object
func (c *ConsolidationRequest) SizeSSZ() (size int) {
	size = 116
	return
}

// HashTreeRoot ssz hashes the ConsolidationRequest object
func (c *ConsolidationRequest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConsolidationRequest object with a hasher
func (c *ConsolidationRequest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SourceAddress'
	hh.PutBytes(c.SourceAddress[:])

	// Field (1) 'SourcePubkey'
	hh.PutBytes(c.SourcePubkey[:])

	// Field (2) 'TargetPubkey'
	hh.PutBytes(c.TargetPubkey[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ConsolidationRequest object
func (c *ConsolidationRequest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
