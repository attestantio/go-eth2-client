// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 935d964a14d33f1ac273a6d1b263bc68ee0437f12c756de8af7816c9b1863d44
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *DepositRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(DepositRequest)
	}
	{ // Field #0 'Pubkey'
		t := t.Pubkey
		dst = append(dst, []byte(t[:48])...)
	}
	{ // Field #1 'WithdrawalCredentials'
		t := t.WithdrawalCredentials
		vlen := len(t)
		if vlen > 32 {
			return dst, sszutils.ErrVectorLength
		}
		dst = append(dst, []byte(t[:vlen])...)
		if vlen < 32 {
			dst = sszutils.AppendZeroPadding(dst, (32-vlen)*1)
		}
	}
	{ // Field #2 'Amount'
		t := t.Amount
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #3 'Signature'
		t := t.Signature
		dst = append(dst, []byte(t[:96])...)
	}
	{ // Field #4 'Index'
		t := t.Index
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	return dst, nil
}

func (t *DepositRequest) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *DepositRequest) SizeSSZ() (size int) {
	return 192
}

func (t *DepositRequest) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 192 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Pubkey' (static)
		buf := buf[0:48]
		copy(t.Pubkey[:], buf)
	}
	{ // Field #1 'WithdrawalCredentials' (static)
		buf := buf[48:80]
		if len(t.WithdrawalCredentials) < 32 {
			t.WithdrawalCredentials = make([]byte, 32)
		} else if len(t.WithdrawalCredentials) > 32 {
			t.WithdrawalCredentials = t.WithdrawalCredentials[:32]
		}
		copy(t.WithdrawalCredentials[:], buf)
	}
	{ // Field #2 'Amount' (static)
		buf := buf[80:88]
		t.Amount = phase0.Gwei(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #3 'Signature' (static)
		buf := buf[88:184]
		copy(t.Signature[:], buf)
	}
	{ // Field #4 'Index' (static)
		buf := buf[184:192]
		t.Index = uint64(sszutils.UnmarshallUint64(buf))
	}
	return nil
}

func (t *DepositRequest) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(DepositRequest)
	}
	idx := hh.Index()
	{ // Field #0 'Pubkey'
		t := t.Pubkey
		hh.PutBytes(t[:48])
	}
	{ // Field #1 'WithdrawalCredentials'
		t := t.WithdrawalCredentials
		vlen := len(t)
		if vlen > 32 {
			return sszutils.ErrVectorLength
		}
		val := t[:]
		if vlen < 32 {
			val = sszutils.AppendZeroPadding(val, (32-vlen)*1)
		}
		hh.PutBytes(val[:32])
	}
	{ // Field #2 'Amount'
		t := t.Amount
		hh.PutUint64(uint64(t))
	}
	{ // Field #3 'Signature'
		t := t.Signature
		hh.PutBytes(t[:96])
	}
	{ // Field #4 'Index'
		t := t.Index
		hh.PutUint64(uint64(t))
	}
	hh.Merkleize(idx)
	return nil
}

func (t *DepositRequest) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
