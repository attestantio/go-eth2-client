// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 68b71dd2694e7a148d573e92eb887b87f6f91666a27dd9350a14a5ed2020f32e
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *AttesterSlashing) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *AttesterSlashing) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *IndexedAttestation) (err error) { // *electra.IndexedAttestation
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *AttesterSlashing) (err error) { // *electra.AttesterSlashing
		dstlen := len(dst)
		// Offset #0 'Attestation1'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #1 'Attestation2'
		offset1 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #0 'Attestation1'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn1(t.Attestation1); err != nil {
			return err
		}
		// Dynamic Field #1 'Attestation2'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		if err = fn1(t.Attestation2); err != nil {
			return err
		}
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *AttesterSlashing) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *AttesterSlashing) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *AttesterSlashing) SizeSSZ() (size int) {
	sfn1 := func(t *IndexedAttestation) (size int) { // *IndexedAttestation
		size = t.SizeSSZ()
		return size
	}
	sfn2 := func(t *AttesterSlashing) (size int) { // *AttesterSlashing
		size = 0
		size += 4 + sfn1(t.Attestation1)
		size += 4 + sfn1(t.Attestation2)
		return size
	}
	return sfn2(t)
}

func (t *AttesterSlashing) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *AttesterSlashing) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *IndexedAttestation, buf []byte) (*IndexedAttestation, error) { // *IndexedAttestation
		var err error
		if t == nil {
			t = new(IndexedAttestation)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *AttesterSlashing, buf []byte) (*AttesterSlashing, error) { // *AttesterSlashing
		var err error
		if t == nil {
			t = new(AttesterSlashing)
		}
		bufpos := 8
		buflen := len(buf)
		if buflen < 8 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'Attestation1'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Read offset #1 'Attestation2'
		offset1 := int(sszutils.ReadOffset(buf[4:8]))
		// Dynamic Field #0 'Attestation1'
		if offset0 < bufpos || offset1 > buflen || offset1 < offset0 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:offset1]
			if t.Attestation1, err = fn1(t.Attestation1, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #1 'Attestation2'
		if offset1 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset1:]
			if t.Attestation2, err = fn1(t.Attestation2, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *AttesterSlashing) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t *IndexedAttestation) (err error) { // *electra.IndexedAttestation
		err = t.HashTreeRootWithDyn(ds, hh)
		return err
	}
	fn2 := func(t *AttesterSlashing) (err error) { // *electra.AttesterSlashing
		idx := hh.Index()
		// Field #0 'Attestation1'
		if err = fn1(t.Attestation1); err != nil {
			return err
		}
		// Field #1 'Attestation2'
		if err = fn1(t.Attestation2); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *AttesterSlashing) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *AttesterSlashing) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *AttesterSlashing) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
