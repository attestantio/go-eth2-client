// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: eaa3e5e10c485902584e7a1b60491a1feeabb0415953185c32c93bd2eaed68e6
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *AttesterSlashing) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *AttesterSlashing) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(AttesterSlashing)
	}
	dstlen := len(dst)
	// Offset #0 'Attestation1'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #1 'Attestation2'
	offset1 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #0 'Attestation1'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.Attestation1
		if t == nil {
			t = new(IndexedAttestation)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #1 'Attestation2'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		t := t.Attestation2
		if t == nil {
			t = new(IndexedAttestation)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *AttesterSlashing) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 8 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'Attestation1' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 8 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	// Field #1 'Attestation2' (offset)
	offset1 := int(sszutils.UnmarshallUint32(buf[4:8]))
	if offset1 < offset0 || offset1 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #0 'Attestation1' (dynamic)
		buf := buf[offset0:offset1]
		val1 := t.Attestation1
		if val1 == nil {
			val1 = new(IndexedAttestation)
		}
		if err = val1.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Attestation1 = val1
	}
	{ // Field #1 'Attestation2' (dynamic)
		buf := buf[offset1:]
		val2 := t.Attestation2
		if val2 == nil {
			val2 = new(IndexedAttestation)
		}
		if err = val2.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Attestation2 = val2
	}
	return nil
}

func (t *AttesterSlashing) SizeSSZ() (size int) {
	if t == nil {
		t = new(AttesterSlashing)
	}
	// Field #0 'Attestation1' offset (4 bytes)
	// Field #1 'Attestation2' offset (4 bytes)
	size += 8
	{ // Dynamic field #0 'Attestation1'
		size += t.Attestation1.SizeSSZ()
	}
	{ // Dynamic field #1 'Attestation2'
		size += t.Attestation2.SizeSSZ()
	}
	return size
}

func (t *AttesterSlashing) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *AttesterSlashing) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(AttesterSlashing)
	}
	idx := hh.Index()
	{ // Field #0 'Attestation1'
		t := t.Attestation1
		if t == nil {
			t = new(IndexedAttestation)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #1 'Attestation2'
		t := t.Attestation2
		if t == nil {
			t = new(IndexedAttestation)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

