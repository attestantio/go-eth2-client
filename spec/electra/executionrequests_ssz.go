// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: b3d3860df54ee6ccbfc170e7c47003bbe8096a0438e28e2e6d28daca06b45ae3
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionRequests) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ExecutionRequests) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(ExecutionRequests)
	}
	dstlen := len(dst)
	// Offset #0 'Deposits'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #1 'Withdrawals'
	offset1 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #2 'Consolidations'
	offset2 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #0 'Deposits'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.Deposits
		vlen := len(t)
		if vlen > 8192 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(DepositRequest)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #1 'Withdrawals'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		t := t.Withdrawals
		vlen := len(t)
		if vlen > 16 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(WithdrawalRequest)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #2 'Consolidations'
		sszutils.UpdateOffset(dst[offset2:offset2+4], len(dst)-dstlen)
		t := t.Consolidations
		vlen := len(t)
		if vlen > 2 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(ConsolidationRequest)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *ExecutionRequests) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 12 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'Deposits' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 != 12 {
		return sszutils.ErrOffset
	}
	// Field #1 'Withdrawals' (offset)
	offset1 := int(sszutils.UnmarshallUint32(buf[4:8]))
	if offset1 < offset0 || offset1 > buflen {
		return sszutils.ErrOffset
	}
	// Field #2 'Consolidations' (offset)
	offset2 := int(sszutils.UnmarshallUint32(buf[8:12]))
	if offset2 < offset1 || offset2 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #0 'Deposits' (dynamic)
		buf := buf[offset0:offset1]
		val1 := t.Deposits
		itemCount := len(buf) / 192
		if len(buf)%192 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val1 = sszutils.ExpandSlice(val1, itemCount)
		for i := 0; i < itemCount; i++ {
			if val1[i] == nil {
				val1[i] = new(DepositRequest)
			}
			buf := buf[192*i : 192*(i+1)]
			if err = val1[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.Deposits = val1
	}
	{ // Field #1 'Withdrawals' (dynamic)
		buf := buf[offset1:offset2]
		val2 := t.Withdrawals
		itemCount := len(buf) / 76
		if len(buf)%76 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val2 = sszutils.ExpandSlice(val2, itemCount)
		for i := 0; i < itemCount; i++ {
			if val2[i] == nil {
				val2[i] = new(WithdrawalRequest)
			}
			buf := buf[76*i : 76*(i+1)]
			if err = val2[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.Withdrawals = val2
	}
	{ // Field #2 'Consolidations' (dynamic)
		buf := buf[offset2:]
		val3 := t.Consolidations
		itemCount := len(buf) / 116
		if len(buf)%116 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val3 = sszutils.ExpandSlice(val3, itemCount)
		for i := 0; i < itemCount; i++ {
			if val3[i] == nil {
				val3[i] = new(ConsolidationRequest)
			}
			buf := buf[116*i : 116*(i+1)]
			if err = val3[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.Consolidations = val3
	}
	return nil
}

func (t *ExecutionRequests) SizeSSZ() (size int) {
	if t == nil {
		t = new(ExecutionRequests)
	}
	// Field #0 'Deposits' offset (4 bytes)
	// Field #1 'Withdrawals' offset (4 bytes)
	// Field #2 'Consolidations' offset (4 bytes)
	size += 12
	{ // Dynamic field #0 'Deposits'
		size += len(t.Deposits) * 192
	}
	{ // Dynamic field #1 'Withdrawals'
		size += len(t.Withdrawals) * 76
	}
	{ // Dynamic field #2 'Consolidations'
		size += len(t.Consolidations) * 116
	}
	return size
}

func (t *ExecutionRequests) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ExecutionRequests) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(ExecutionRequests)
	}
	idx := hh.Index()
	{ // Field #0 'Deposits'
		t := t.Deposits
		vlen := uint64(len(t))
		if vlen > 8192 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(DepositRequest)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(8192, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #1 'Withdrawals'
		t := t.Withdrawals
		vlen := uint64(len(t))
		if vlen > 16 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(WithdrawalRequest)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #2 'Consolidations'
		t := t.Consolidations
		vlen := uint64(len(t))
		if vlen > 2 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(ConsolidationRequest)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(2, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	hh.Merkleize(idx)
	return nil
}

