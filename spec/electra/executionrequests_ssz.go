// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 8411c8727d9cbd2ee258be5c0f38765d6439fd184f8e8d2526c1a216fa209003
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionRequests) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *DepositRequest) (err error) { // *electra.DepositRequest
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t []*DepositRequest) (err error) { // []*electra.DepositRequest
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn1(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn3 := func(t *WithdrawalRequest) (err error) { // *electra.WithdrawalRequest
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn4 := func(t []*WithdrawalRequest) (err error) { // []*electra.WithdrawalRequest
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn3(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn5 := func(t *ConsolidationRequest) (err error) { // *electra.ConsolidationRequest
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn6 := func(t []*ConsolidationRequest) (err error) { // []*electra.ConsolidationRequest
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn5(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn7 := func(t *ExecutionRequests) (err error) { // *electra.ExecutionRequests
		dstlen := len(dst)
		// Offset #0 'Deposits'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #1 'Withdrawals'
		offset1 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #2 'Consolidations'
		offset2 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #0 'Deposits'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn2(t.Deposits); err != nil {
			return err
		}
		// Dynamic Field #1 'Withdrawals'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		if err = fn4(t.Withdrawals); err != nil {
			return err
		}
		// Dynamic Field #2 'Consolidations'
		sszutils.UpdateOffset(dst[offset2:offset2+4], len(dst)-dstlen)
		if err = fn6(t.Consolidations); err != nil {
			return err
		}
		return err
	}
	err = fn7(t)
	return dst, err
}
func (t *ExecutionRequests) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *ExecutionRequests) SizeSSZ() (size int) {
	sfn1 := func(t []*DepositRequest) (size int) { // []*DepositRequest
		size += len(t) * 192
		return size
	}
	sfn2 := func(t []*WithdrawalRequest) (size int) { // []*WithdrawalRequest
		size += len(t) * 76
		return size
	}
	sfn3 := func(t []*ConsolidationRequest) (size int) { // []*ConsolidationRequest
		size += len(t) * 116
		return size
	}
	sfn4 := func(t *ExecutionRequests) (size int) { // *ExecutionRequests
		size = 0
		size += 4 + sfn1(t.Deposits)
		size += 4 + sfn2(t.Withdrawals)
		size += 4 + sfn3(t.Consolidations)
		return size
	}
	return sfn4(t)
}

func (t *ExecutionRequests) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *DepositRequest, buf []byte) (*DepositRequest, error) { // *DepositRequest
		var err error
		if t == nil {
			t = new(DepositRequest)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t []*DepositRequest, buf []byte) ([]*DepositRequest, error) { // []*DepositRequest
		var err error
		buflen := len(buf)
		itemsize := 192
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*DepositRequest, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn1(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn3 := func(t *WithdrawalRequest, buf []byte) (*WithdrawalRequest, error) { // *WithdrawalRequest
		var err error
		if t == nil {
			t = new(WithdrawalRequest)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn4 := func(t []*WithdrawalRequest, buf []byte) ([]*WithdrawalRequest, error) { // []*WithdrawalRequest
		var err error
		buflen := len(buf)
		itemsize := 76
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*WithdrawalRequest, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn3(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn5 := func(t *ConsolidationRequest, buf []byte) (*ConsolidationRequest, error) { // *ConsolidationRequest
		var err error
		if t == nil {
			t = new(ConsolidationRequest)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn6 := func(t []*ConsolidationRequest, buf []byte) ([]*ConsolidationRequest, error) { // []*ConsolidationRequest
		var err error
		buflen := len(buf)
		itemsize := 116
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*ConsolidationRequest, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn5(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn7 := func(t *ExecutionRequests, buf []byte) (*ExecutionRequests, error) { // *ExecutionRequests
		var err error
		if t == nil {
			t = new(ExecutionRequests)
		}
		bufpos := 12
		buflen := len(buf)
		if buflen < 12 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'Deposits'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Read offset #1 'Withdrawals'
		offset1 := int(sszutils.ReadOffset(buf[4:8]))
		// Read offset #2 'Consolidations'
		offset2 := int(sszutils.ReadOffset(buf[8:12]))
		// Dynamic Field #0 'Deposits'
		if offset0 < bufpos || offset1 > buflen || offset1 < offset0 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:offset1]
			if t.Deposits, err = fn2(t.Deposits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #1 'Withdrawals'
		if offset1 < bufpos || offset2 > buflen || offset2 < offset1 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset1:offset2]
			if t.Withdrawals, err = fn4(t.Withdrawals, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #2 'Consolidations'
		if offset2 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset2:]
			if t.Consolidations, err = fn6(t.Consolidations, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn7(t, buf)
	return err
}

func (t *ExecutionRequests) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t []*DepositRequest) (err error) { // []*electra.DepositRequest:8192
		maxLen := 8192
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t []*WithdrawalRequest) (err error) { // []*electra.WithdrawalRequest:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn3 := func(t []*ConsolidationRequest) (err error) { // []*electra.ConsolidationRequest:2
		maxLen := 2
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn4 := func(t *ExecutionRequests) (err error) { // *electra.ExecutionRequests
		idx := hh.Index()
		// Field #0 'Deposits'
		if err = fn1(t.Deposits); err != nil {
			return err
		}
		// Field #1 'Withdrawals'
		if err = fn2(t.Withdrawals); err != nil {
			return err
		}
		// Field #2 'Consolidations'
		if err = fn3(t.Consolidations); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn4(t)
}
func (t *ExecutionRequests) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
