// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 8411c8727d9cbd2ee258be5c0f38765d6439fd184f8e8d2526c1a216fa209003
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionRequests) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	// Offset #0 'Deposits'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #1 'Withdrawals'
	offset1 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #2 'Consolidations'
	offset2 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #0 'Deposits'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.Deposits
		max := 8192
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #1 'Withdrawals'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		t := t.Withdrawals
		max := 16
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #2 'Consolidations'
		sszutils.UpdateOffset(dst[offset2:offset2+4], len(dst)-dstlen)
		t := t.Consolidations
		max := 2
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *ExecutionRequests) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ExecutionRequests) SizeSSZ() (size int) {
	size += 4 // Offset for field #0 'Deposits'
	size += 4 // Offset for field #1 'Withdrawals'
	size += 4 // Offset for field #2 'Consolidations'
	{ // Dynamic field #0 'Deposits'
		vlen := len(t.Deposits)
		size += vlen * 192
	}
	{ // Dynamic field #1 'Withdrawals'
		vlen := len(t.Withdrawals)
		size += vlen * 76
	}
	{ // Dynamic field #2 'Consolidations'
		vlen := len(t.Consolidations)
		size += vlen * 116
	}
	return size
}

func (t *ExecutionRequests) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 12 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'Deposits' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 12 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	// Field #1 'Withdrawals' (offset)
	offset1 := int(sszutils.UnmarshallUint32(buf[4:8]))
	if offset1 < offset0 || offset1 > buflen {
		return sszutils.ErrOffset
	}
	// Field #2 'Consolidations' (offset)
	offset2 := int(sszutils.UnmarshallUint32(buf[8:12]))
	if offset2 < offset1 || offset2 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #0 'Deposits' (dynamic)
		buf := buf[offset0:offset1]
		val1 := t.Deposits
		itemCount := len(buf)/192
		if len(buf)%192 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val1) < itemCount) {
			val1 = make([]*DepositRequest, itemCount)
		} else if(len(val1) > itemCount) {
			val1 = val1[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val2 := val1[i]
			if val2 == nil {
				val2 = new(DepositRequest)
			}
			buf := buf[192*i:192*(i+1)]
			if err = val2.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val1[i] = val2
		}
		t.Deposits = val1
	}
	{ // Field #1 'Withdrawals' (dynamic)
		buf := buf[offset1:offset2]
		val3 := t.Withdrawals
		itemCount := len(buf)/76
		if len(buf)%76 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val3) < itemCount) {
			val3 = make([]*WithdrawalRequest, itemCount)
		} else if(len(val3) > itemCount) {
			val3 = val3[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val4 := val3[i]
			if val4 == nil {
				val4 = new(WithdrawalRequest)
			}
			buf := buf[76*i:76*(i+1)]
			if err = val4.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val3[i] = val4
		}
		t.Withdrawals = val3
	}
	{ // Field #2 'Consolidations' (dynamic)
		buf := buf[offset2:]
		val5 := t.Consolidations
		itemCount := len(buf)/116
		if len(buf)%116 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val5) < itemCount) {
			val5 = make([]*ConsolidationRequest, itemCount)
		} else if(len(val5) > itemCount) {
			val5 = val5[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val6 := val5[i]
			if val6 == nil {
				val6 = new(ConsolidationRequest)
			}
			buf := buf[116*i:116*(i+1)]
			if err = val6.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val5[i] = val6
		}
		t.Consolidations = val5
	}
	return nil
}

func (t *ExecutionRequests) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Deposits'
		t := t.Deposits
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(8192, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #1 'Withdrawals'
		t := t.Withdrawals
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #2 'Consolidations'
		t := t.Consolidations
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(2, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *ExecutionRequests) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
