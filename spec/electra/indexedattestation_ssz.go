// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 8a826dc3b6803dea3c47457b91d4d749853cd0081c0d1d746d32821da321c89c
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *IndexedAttestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(IndexedAttestation)
	}
	dstlen := len(dst)
	// Offset #0 'AttestingIndices'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #1 'Data'
		t := t.Data
		if t == nil {
			t = new(phase0.AttestationData)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #2 'Signature'
		t := t.Signature
		dst = append(dst, []byte(t[:96])...)
	}
	{ // Dynamic Field #0 'AttestingIndices'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.AttestingIndices
		vlen := len(t)
		if vlen > 131072 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint64(dst, uint64(t))
		}
	}
	return dst, nil
}

func (t *IndexedAttestation) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *IndexedAttestation) SizeSSZ() (size int) {
	if t == nil {
		t = new(IndexedAttestation)
	}
	// Field #0 'AttestingIndices' offset (4 bytes)
	// Field #1 'Data' static (128 bytes)
	// Field #2 'Signature' static (96 bytes)
	size += 228
	{ // Dynamic field #0 'AttestingIndices'
		vlen := len(t.AttestingIndices)
		size += vlen * 8
	}
	return size
}

func (t *IndexedAttestation) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 228 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'AttestingIndices' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 228 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #1 'Data' (static)
		buf := buf[4:132]
		if t.Data == nil {
			t.Data = new(phase0.AttestationData)
		}
		if err = t.Data.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #2 'Signature' (static)
		buf := buf[132:228]
		copy(t.Signature[:], buf)
	}
	{ // Field #0 'AttestingIndices' (dynamic)
		buf := buf[offset0:]
		val1 := t.AttestingIndices
		itemCount := len(buf) / 8
		if len(buf)%8 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val1) < itemCount {
			val1 = make([]uint64, itemCount)
		} else if len(val1) > itemCount {
			val1 = val1[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			buf := buf[8*i : 8*(i+1)]
			val1[i] = uint64(sszutils.UnmarshallUint64(buf))
		}
		t.AttestingIndices = val1
	}
	return nil
}

func (t *IndexedAttestation) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(IndexedAttestation)
	}
	idx := hh.Index()
	{ // Field #0 'AttestingIndices'
		t := t.AttestingIndices
		vlen := uint64(len(t))
		if vlen > 131072 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			hh.AppendUint64(uint64(t))
		}
		hh.FillUpTo32()
		limit := sszutils.CalculateLimit(131072, vlen, 8)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #1 'Data'
		t := t.Data
		if t == nil {
			t = new(phase0.AttestationData)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #2 'Signature'
		t := t.Signature
		hh.PutBytes(t[:96])
	}
	hh.Merkleize(idx)
	return nil
}

func (t *IndexedAttestation) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
