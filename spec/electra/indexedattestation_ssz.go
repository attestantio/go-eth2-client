// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 041a1662bf85d80a45c52dcc1e3ef047455664647574d98fb2c02aa3203c11af
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *IndexedAttestation) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *IndexedAttestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t []uint64) (err error) { // []uint64
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			dst = sszutils.MarshalUint64(dst, uint64(t[i]))
		}
		return err
	}
	fn2 := func(t *phase0.AttestationData) (err error) { // *phase0.AttestationData
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn3 := func(t *IndexedAttestation) (err error) { // *electra.IndexedAttestation
		dstlen := len(dst)
		// Offset #0 'AttestingIndices'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #1 'Data'
		if err = fn2(t.Data); err != nil {
			return err
		}
		// Field #2 'Signature'
		dst = append(dst, t.Signature[:]...)
		// Dynamic Field #0 'AttestingIndices'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn1(t.AttestingIndices); err != nil {
			return err
		}
		return err
	}
	err = fn3(t)
	return dst, err
}
func (t *IndexedAttestation) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *IndexedAttestation) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *IndexedAttestation) SizeSSZ() (size int) {
	sfn1 := func(t []uint64) (size int) { // []uint64
		size += len(t) * 8
		return size
	}
	sfn2 := func(t *IndexedAttestation) (size int) { // *IndexedAttestation
		size = 224
		size += 4 + sfn1(t.AttestingIndices)
		return size
	}
	return sfn2(t)
}

func (t *IndexedAttestation) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *IndexedAttestation) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t []uint64, buf []byte) ([]uint64, error) { // []uint64
		var err error
		buflen := len(buf)
		itemsize := 8
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]uint64, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			t[i] = (uint64)(sszutils.UnmarshallUint64(buf[i*itemsize : (i+1)*itemsize]))
		}
		return t, err
	}
	fn2 := func(t *phase0.AttestationData, buf []byte) (*phase0.AttestationData, error) { // *phase0.AttestationData
		var err error
		if t == nil {
			t = new(phase0.AttestationData)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn3 := func(t *IndexedAttestation, buf []byte) (*IndexedAttestation, error) { // *IndexedAttestation
		var err error
		if t == nil {
			t = new(IndexedAttestation)
		}
		bufpos := 228
		buflen := len(buf)
		if buflen < 228 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'AttestingIndices'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Field #1 'Data'
		if t.Data, err = fn2(t.Data, buf[4:132]); err != nil {
			return t, err
		}
		// Field #2 'Signature'
		copy(t.Signature[:], buf[132:228])
		// Dynamic Field #0 'AttestingIndices'
		if offset0 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:]
			if t.AttestingIndices, err = fn1(t.AttestingIndices, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn3(t, buf)
	return err
}

func (t *IndexedAttestation) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t []uint64) (err error) { // []uint64:131072:MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 131072
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.AppendUint64(uint64(t[i]))
		}
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(8))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t *IndexedAttestation) (err error) { // *electra.IndexedAttestation
		idx := hh.Index()
		// Field #0 'AttestingIndices'
		if err = fn1(t.AttestingIndices); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *IndexedAttestation) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *IndexedAttestation) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *IndexedAttestation) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
