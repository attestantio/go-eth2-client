// Code generated by fastssz. DO NOT EDIT.
// Hash: d32594f3eb75aa0af63aae654462a5669f04a1b77e91e06bfcbd28f8599321f7
// Version: 0.1.3
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PendingDeposit object
func (p *PendingDeposit) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PendingDeposit object to a target array
func (p *PendingDeposit) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Pubkey'
	dst = append(dst, p.Pubkey[:]...)

	// Field (1) 'WithdrawalCredentials'
	if size := len(p.WithdrawalCredentials); size != 32 {
		err = ssz.ErrBytesLengthFn("PendingDeposit.WithdrawalCredentials", size, 32)
		return
	}
	dst = append(dst, p.WithdrawalCredentials...)

	// Field (2) 'Amount'
	dst = ssz.MarshalUint64(dst, uint64(p.Amount))

	// Field (3) 'Signature'
	dst = append(dst, p.Signature[:]...)

	// Field (4) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(p.Slot))

	return
}

// UnmarshalSSZ ssz unmarshals the PendingDeposit object
func (p *PendingDeposit) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 192 {
		return ssz.ErrSize
	}

	// Field (0) 'Pubkey'
	copy(p.Pubkey[:], buf[0:48])

	// Field (1) 'WithdrawalCredentials'
	if cap(p.WithdrawalCredentials) == 0 {
		p.WithdrawalCredentials = make([]byte, 0, len(buf[48:80]))
	}
	p.WithdrawalCredentials = append(p.WithdrawalCredentials, buf[48:80]...)

	// Field (2) 'Amount'
	p.Amount = phase0.Gwei(ssz.UnmarshallUint64(buf[80:88]))

	// Field (3) 'Signature'
	copy(p.Signature[:], buf[88:184])

	// Field (4) 'Slot'
	p.Slot = phase0.Slot(ssz.UnmarshallUint64(buf[184:192]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PendingDeposit object
func (p *PendingDeposit) SizeSSZ() (size int) {
	size = 192
	return
}

// HashTreeRoot ssz hashes the PendingDeposit object
func (p *PendingDeposit) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PendingDeposit object with a hasher
func (p *PendingDeposit) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Pubkey'
	hh.PutBytes(p.Pubkey[:])

	// Field (1) 'WithdrawalCredentials'
	if size := len(p.WithdrawalCredentials); size != 32 {
		err = ssz.ErrBytesLengthFn("PendingDeposit.WithdrawalCredentials", size, 32)
		return
	}
	hh.PutBytes(p.WithdrawalCredentials)

	// Field (2) 'Amount'
	hh.PutUint64(uint64(p.Amount))

	// Field (3) 'Signature'
	hh.PutBytes(p.Signature[:])

	// Field (4) 'Slot'
	hh.PutUint64(uint64(p.Slot))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PendingDeposit object
func (p *PendingDeposit) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
