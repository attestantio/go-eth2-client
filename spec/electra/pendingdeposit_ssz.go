// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: de3d407f0a33b2548c0dd866468df90c5dc9cd08983976f4c0d25466ae7e7e04
// Version: v1.1.1 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *PendingDeposit) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *PendingDeposit) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(PendingDeposit)
	}
	{ // Field #0 'Pubkey'
		dst = append(dst, []byte(t.Pubkey[:48])...)
	}
	{ // Field #1 'WithdrawalCredentials'
		vlen := len(t.WithdrawalCredentials)
		if vlen > 32 {
			return dst, sszutils.ErrVectorLength
		}
		dst = append(dst, []byte(t.WithdrawalCredentials[:vlen])...)
		if vlen < 32 {
			dst = sszutils.AppendZeroPadding(dst, (32-vlen)*1)
		}
	}
	{ // Field #2 'Amount'
		dst = sszutils.MarshalUint64(dst, uint64(t.Amount))
	}
	{ // Field #3 'Signature'
		dst = append(dst, []byte(t.Signature[:96])...)
	}
	{ // Field #4 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
	}
	return dst, nil
}

func (t *PendingDeposit) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 192 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Pubkey' (static)
		buf := buf[0:48]
		copy(t.Pubkey[:], buf)
	}
	{ // Field #1 'WithdrawalCredentials' (static)
		buf := buf[48:80]
		t.WithdrawalCredentials = sszutils.ExpandSlice(t.WithdrawalCredentials, 32)
		copy(t.WithdrawalCredentials[:], buf)
	}
	{ // Field #2 'Amount' (static)
		buf := buf[80:88]
		t.Amount = phase0.Gwei(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #3 'Signature' (static)
		buf := buf[88:184]
		copy(t.Signature[:], buf)
	}
	{ // Field #4 'Slot' (static)
		buf := buf[184:192]
		t.Slot = phase0.Slot(sszutils.UnmarshallUint64(buf))
	}
	return nil
}

func (t *PendingDeposit) SizeSSZ() (size int) {
	return 192
}

func (t *PendingDeposit) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *PendingDeposit) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(PendingDeposit)
	}
	idx := hh.Index()
	{ // Field #0 'Pubkey'
		hh.PutBytes(t.Pubkey[:48])
	}
	{ // Field #1 'WithdrawalCredentials'
		vlen := len(t.WithdrawalCredentials)
		if vlen > 32 {
			return sszutils.ErrVectorLength
		}
		val := t.WithdrawalCredentials[:]
		if vlen < 32 {
			val = sszutils.AppendZeroPadding(val, (32-vlen)*1)
		}
		hh.PutBytes(val[:32])
	}
	{ // Field #2 'Amount'
		hh.PutUint64(uint64(t.Amount))
	}
	{ // Field #3 'Signature'
		hh.PutBytes(t.Signature[:96])
	}
	{ // Field #4 'Slot'
		hh.PutUint64(uint64(t.Slot))
	}
	hh.Merkleize(idx)
	return nil
}

