// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 5a2b958a61eceeae0bc22b7e9ac52d42e3dc0b883686762c575b61596f86ae43
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *WithdrawalRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *WithdrawalRequest) (err error) { // *electra.WithdrawalRequest
		// Field #0 'SourceAddress'
		dst = append(dst, t.SourceAddress[:]...)
		// Field #1 'ValidatorPubkey'
		dst = append(dst, t.ValidatorPubkey[:]...)
		// Field #2 'Amount'
		dst = sszutils.MarshalUint64(dst, uint64(t.Amount))
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *WithdrawalRequest) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *WithdrawalRequest) SizeSSZ() (size int) {
	sfn1 := func(t *WithdrawalRequest) (size int) { // *WithdrawalRequest
		size = 76
		return size
	}
	return sfn1(t)
}

func (t *WithdrawalRequest) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *WithdrawalRequest, buf []byte) (*WithdrawalRequest, error) { // *WithdrawalRequest
		var err error
		if t == nil {
			t = new(WithdrawalRequest)
		}
		buflen := len(buf)
		if buflen < 76 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'SourceAddress'
		copy(t.SourceAddress[:], buf[0:20])
		// Field #1 'ValidatorPubkey'
		copy(t.ValidatorPubkey[:], buf[20:68])
		// Field #2 'Amount'
		t.Amount = (phase0.Gwei)(sszutils.UnmarshallUint64(buf[68:76]))
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *WithdrawalRequest) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *WithdrawalRequest) (err error) { // *electra.WithdrawalRequest
		idx := hh.Index()
		// Field #0 'SourceAddress'
		hh.PutBytes(t.SourceAddress[:])
		// Field #1 'ValidatorPubkey'
		hh.PutBytes(t.ValidatorPubkey[:])
		// Field #2 'Amount'
		hh.PutUint64(uint64(t.Amount))
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *WithdrawalRequest) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
