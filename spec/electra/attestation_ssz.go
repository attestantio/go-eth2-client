// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 97440c3d9b59e364e50b5fa3ba653d23d9e4cae15c1c89752e75249bf00fc7e1
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *Attestation) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist
		dst = append(dst, t[:]...)
		return err
	}
	fn2 := func(t *phase0.AttestationData) (err error) { // *phase0.AttestationData
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn3 := func(t go_bitfield.Bitvector64) (err error) { // bitfield.Bitvector64:8:MAX_COMMITTEES_PER_SLOT/8
		hasLimit, limit, err := ds.ResolveSpecValue("MAX_COMMITTEES_PER_SLOT/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 8
		}
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		vlimit := int(limit)
		if vlimit > vlen {
			vlimit = vlen
		}
		dst = append(dst, t[:vlimit]...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, int(limit)-vlen)
		}
		return err
	}
	fn4 := func(t *Attestation) (err error) { // *electra.Attestation
		dstlen := len(dst)
		// Offset #0 'AggregationBits'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #1 'Data'
		if err = fn2(t.Data); err != nil {
			return err
		}
		// Field #2 'Signature'
		dst = append(dst, t.Signature[:]...)
		// Field #3 'CommitteeBits'
		if err = fn3(t.CommitteeBits); err != nil {
			return err
		}
		// Dynamic Field #0 'AggregationBits'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn1(t.AggregationBits); err != nil {
			return err
		}
		return err
	}
	err = fn4(t)
	return dst, err
}
func (t *Attestation) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Attestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *Attestation) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t go_bitfield.Bitlist) (size int) { // go_bitfield.Bitlist
		size += len(t)
		return size
	}
	sfn2 := func(t go_bitfield.Bitvector64) (size int) { // go_bitfield.Bitvector64:8:MAX_COMMITTEES_PER_SLOT/8
		hasLimit, limit, _ := ds.ResolveSpecValue("MAX_COMMITTEES_PER_SLOT/8")
		if !hasLimit {
			limit = 8
		}
		size += int(limit) * 1
		return size
	}
	sfn3 := func(t *Attestation) (size int) { // *Attestation
		size = 224
		size += 4 + sfn1(t.AggregationBits)
		size += sfn2(t.CommitteeBits)
		return size
	}
	return sfn3(t)
}
func (t *Attestation) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *Attestation) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	sfn1 := func() (size int) { // go_bitfield.Bitvector64:8:MAX_COMMITTEES_PER_SLOT/8
		hasLimit, limit, _ := ds.ResolveSpecValue("MAX_COMMITTEES_PER_SLOT/8")
		if !hasLimit {
			limit = 8
		}
		size += int(limit) * 1
		return size
	}()
	fn1 := func(t go_bitfield.Bitlist, buf []byte) (go_bitfield.Bitlist, error) { // go_bitfield.Bitlist
		var err error
		if len(t) < len(buf) {
			t = make(go_bitfield.Bitlist, len(buf))
		} else {
			t = t[:len(buf)]
		}
		if len(buf) > 0 {
			copy(t[:], buf)
		}
		return t, err
	}
	fn2 := func(t *phase0.AttestationData, buf []byte) (*phase0.AttestationData, error) { // *phase0.AttestationData
		var err error
		if t == nil {
			t = new(phase0.AttestationData)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn3 := func(t go_bitfield.Bitvector64, buf []byte) (go_bitfield.Bitvector64, error) { // go_bitfield.Bitvector64:8:MAX_COMMITTEES_PER_SLOT/8
		var err error
		itemsize := 1
		limit := sfn1 / itemsize
		if len(t) < int(limit) {
			t = make(go_bitfield.Bitvector64, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		copy(t[:], buf)
		return t, err
	}
	fn4 := func(t *Attestation, buf []byte) (*Attestation, error) { // *Attestation
		var err error
		if t == nil {
			t = new(Attestation)
		}
		bufpos := 0
		buflen := len(buf)
		minsize := 228
		if buflen < minsize {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Offset #0 'AggregationBits'
		offset0 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Field #1 'Data'
		{
			fieldsize := 128
			if t.Data, err = fn2(t.Data, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Field #2 'Signature'
		{
			fieldsize := 96
			copy(t.Signature[:], buf[bufpos:bufpos+fieldsize])
			bufpos += fieldsize
		}
		// Field #3 'CommitteeBits'
		{
			fieldsize := sfn1
			minsize += fieldsize
			if buflen < minsize {
				return t, sszutils.ErrUnexpectedEOF
			}
			if t.CommitteeBits, err = fn3(t.CommitteeBits, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Dynamic Field #0 'AggregationBits'
		if offset0 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:]
			if t.AggregationBits, err = fn1(t.AggregationBits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn4(t, buf)
	return err
}
func (t *Attestation) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *Attestation) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist:131072:MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 131072
		}
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > maxLen {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (maxLen+255)/256)
		return err
	}
	fn2 := func(t go_bitfield.Bitvector64) (err error) { // bitfield.Bitvector64:8:MAX_COMMITTEES_PER_SLOT/8
		hasLimit, limit, err := ds.ResolveSpecValue("MAX_COMMITTEES_PER_SLOT/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 8
		}
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn3 := func(t *Attestation) (err error) { // *electra.Attestation
		idx := hh.Index()
		// Field #0 'AggregationBits'
		if err = fn1(t.AggregationBits); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		// Field #3 'CommitteeBits'
		if err = fn2(t.CommitteeBits); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn3(t)
}
func (t *Attestation) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *Attestation) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *Attestation) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
