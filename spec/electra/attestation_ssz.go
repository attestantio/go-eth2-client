// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 9ead7d5ffd3e671e3fa25588b3e425c15934c0573a3f76835f4e9128ff67fcc1
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Attestation) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Attestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(Attestation)
	}
	dstlen := len(dst)
	// Offset #0 'AggregationBits'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #1 'Data'
		t := t.Data
		if t == nil {
			t = new(phase0.AttestationData)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #2 'Signature'
		t := &t.Signature
		dst = append(dst, []byte(t[:96])...)
	}
	{ // Field #3 'CommitteeBits'
		t := t.CommitteeBits
		vlen := len(t)
		if vlen > 8 {
			return dst, sszutils.ErrVectorLength
		}
		dst = append(dst, []byte(t[:vlen])...)
		if vlen < 8 {
			dst = sszutils.AppendZeroPadding(dst, (8-vlen)*1)
		}
	}
	{ // Dynamic Field #0 'AggregationBits'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.AggregationBits
		vlen := len(t)
		if vlen > 131072 {
			return dst, sszutils.ErrListTooBig
		}
		dst = append(dst, []byte(t[:])...)
	}
	return dst, nil
}

func (t *Attestation) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 236 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'AggregationBits' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 236 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #1 'Data' (static)
		buf := buf[4:132]
		if t.Data == nil {
			t.Data = new(phase0.AttestationData)
		}
		if err = t.Data.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #2 'Signature' (static)
		buf := buf[132:228]
		copy(t.Signature[:], buf)
	}
	{ // Field #3 'CommitteeBits' (static)
		buf := buf[228:236]
		t.CommitteeBits = sszutils.ExpandSlice(t.CommitteeBits, 8)
		copy(t.CommitteeBits[:], buf)
	}
	{ // Field #0 'AggregationBits' (dynamic)
		buf := buf[offset0:]
		val1 := t.AggregationBits
		val1 = sszutils.ExpandSlice(val1, len(buf))
		copy(val1[:], buf)
		t.AggregationBits = val1
	}
	return nil
}

func (t *Attestation) SizeSSZ() (size int) {
	if t == nil {
		t = new(Attestation)
	}
	// Field #0 'AggregationBits' offset (4 bytes)
	// Field #1 'Data' static (128 bytes)
	// Field #2 'Signature' static (96 bytes)
	// Field #3 'CommitteeBits' static (8 bytes)
	size += 236
	{ // Dynamic field #0 'AggregationBits'
		size += len(t.AggregationBits)
	}
	return size
}

func (t *Attestation) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *Attestation) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(Attestation)
	}
	idx := hh.Index()
	{ // Field #0 'AggregationBits'
		t := t.AggregationBits
		idx := hh.Index()
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > 131072 {
			return sszutils.ErrListTooBig
		}
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (131072+255)/256)
	}
	{ // Field #1 'Data'
		t := t.Data
		if t == nil {
			t = new(phase0.AttestationData)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #2 'Signature'
		t := &t.Signature
		hh.PutBytes(t[:96])
	}
	{ // Field #3 'CommitteeBits'
		t := t.CommitteeBits
		vlen := len(t)
		if vlen > 8 {
			return sszutils.ErrVectorLength
		}
		val := t[:]
		if vlen < 8 {
			val = sszutils.AppendZeroPadding(val, (8-vlen)*1)
		}
		hh.PutBytes(val[:8])
	}
	hh.Merkleize(idx)
	return nil
}

