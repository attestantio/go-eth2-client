// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: df99865fb2e0b12fba7a2affdcf73b03e1c31596440fe69f21897e7f10ffb2e8
// Version: v0.0.0-20250924020059-826e7b1c49b5 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *PendingConsolidation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'SourceIndex'
		t := t.SourceIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'TargetIndex'
		t := t.TargetIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	return dst, nil
}

func (t *PendingConsolidation) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *PendingConsolidation) SizeSSZ() (size int) {
	return 16
}

func (t *PendingConsolidation) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 16 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'SourceIndex' (static)
		buf := buf[0:8]
		t.SourceIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'TargetIndex' (static)
		buf := buf[8:16]
		t.TargetIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	return nil
}

func (t *PendingConsolidation) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'SourceIndex'
		t := t.SourceIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'TargetIndex'
		t := t.TargetIndex
		hh.PutUint64(uint64(t))
	}
	hh.Merkleize(idx)
	return nil
}

func (t *PendingConsolidation) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
