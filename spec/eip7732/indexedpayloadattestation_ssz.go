// Code generated by fastssz. DO NOT EDIT.
// Hash: 71ebf6506df65d31cfd04615e79c5262975d9ed2a2d58c8451d382d94634c47e
// Version: 0.1.3
package eip7732

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the IndexedPayloadAttestation object
func (i *IndexedPayloadAttestation) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the IndexedPayloadAttestation object to a target array
func (i *IndexedPayloadAttestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(141)

	// Offset (0) 'AttestingIndices'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.AttestingIndices) * 8

	// Field (1) 'Data'
	if i.Data == nil {
		i.Data = new(PayloadAttestationData)
	}
	if dst, err = i.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'Signature'
	dst = append(dst, i.Signature[:]...)

	// Field (0) 'AttestingIndices'
	if size := len(i.AttestingIndices); size > 2048 {
		err = ssz.ErrListTooBigFn("IndexedPayloadAttestation.AttestingIndices", size, 2048)
		return
	}
	for ii := 0; ii < len(i.AttestingIndices); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(i.AttestingIndices[ii]))
	}

	return
}

// UnmarshalSSZ ssz unmarshals the IndexedPayloadAttestation object
func (i *IndexedPayloadAttestation) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 141 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'AttestingIndices'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 141 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Data'
	if i.Data == nil {
		i.Data = new(PayloadAttestationData)
	}
	if err = i.Data.UnmarshalSSZ(buf[4:45]); err != nil {
		return err
	}

	// Field (2) 'Signature'
	copy(i.Signature[:], buf[45:141])

	// Field (0) 'AttestingIndices'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 8, 2048)
		if err != nil {
			return err
		}
		i.AttestingIndices = make([]phase0.ValidatorIndex, num)
		for ii := 0; ii < num; ii++ {
			i.AttestingIndices[ii] = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the IndexedPayloadAttestation object
func (i *IndexedPayloadAttestation) SizeSSZ() (size int) {
	size = 141

	// Field (0) 'AttestingIndices'
	size += len(i.AttestingIndices) * 8

	return
}

// HashTreeRoot ssz hashes the IndexedPayloadAttestation object
func (i *IndexedPayloadAttestation) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the IndexedPayloadAttestation object with a hasher
func (i *IndexedPayloadAttestation) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'AttestingIndices'
	{
		if size := len(i.AttestingIndices); size > 2048 {
			err = ssz.ErrListTooBigFn("IndexedPayloadAttestation.AttestingIndices", size, 2048)
			return
		}
		subIndx := hh.Index()
		for _, i := range i.AttestingIndices {
			hh.AppendUint64(uint64(i))
		}
		hh.FillUpTo32()
		numItems := uint64(len(i.AttestingIndices))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(2048, numItems, 8))
	}

	// Field (1) 'Data'
	if i.Data == nil {
		i.Data = new(PayloadAttestationData)
	}
	if err = i.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'Signature'
	hh.PutBytes(i.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the IndexedPayloadAttestation object
func (i *IndexedPayloadAttestation) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
