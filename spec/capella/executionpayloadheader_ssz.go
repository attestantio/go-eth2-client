// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 6f48d875b46ff5819b7ea6718d93608f2aec38934d51347f22664d6eb6debf13
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionPayloadHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *ExecutionPayloadHeader) (err error) { // *capella.ExecutionPayloadHeader
		dstlen := len(dst)
		// Field #0 'ParentHash'
		dst = append(dst, t.ParentHash[:]...)
		// Field #1 'FeeRecipient'
		dst = append(dst, t.FeeRecipient[:]...)
		// Field #2 'StateRoot'
		dst = append(dst, t.StateRoot[:]...)
		// Field #3 'ReceiptsRoot'
		dst = append(dst, t.ReceiptsRoot[:]...)
		// Field #4 'LogsBloom'
		dst = append(dst, t.LogsBloom[:]...)
		// Field #5 'PrevRandao'
		dst = append(dst, t.PrevRandao[:]...)
		// Field #6 'BlockNumber'
		dst = sszutils.MarshalUint64(dst, uint64(t.BlockNumber))
		// Field #7 'GasLimit'
		dst = sszutils.MarshalUint64(dst, uint64(t.GasLimit))
		// Field #8 'GasUsed'
		dst = sszutils.MarshalUint64(dst, uint64(t.GasUsed))
		// Field #9 'Timestamp'
		dst = sszutils.MarshalUint64(dst, uint64(t.Timestamp))
		// Offset #10 'ExtraData'
		offset10 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #11 'BaseFeePerGas'
		dst = append(dst, t.BaseFeePerGas[:]...)
		// Field #12 'BlockHash'
		dst = append(dst, t.BlockHash[:]...)
		// Field #13 'TransactionsRoot'
		dst = append(dst, t.TransactionsRoot[:]...)
		// Field #14 'WithdrawalsRoot'
		dst = append(dst, t.WithdrawalsRoot[:]...)
		// Dynamic Field #10 'ExtraData'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		dst = append(dst, t.ExtraData[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *ExecutionPayloadHeader) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *ExecutionPayloadHeader) SizeSSZ() (size int) {
	sfn1 := func(t []byte) (size int) { // []byte
		size += len(t)
		return size
	}
	sfn2 := func(t *ExecutionPayloadHeader) (size int) { // *ExecutionPayloadHeader
		size = 564
		size += 4 + sfn1(t.ExtraData)
		return size
	}
	return sfn2(t)
}

func (t *ExecutionPayloadHeader) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *ExecutionPayloadHeader, buf []byte) (*ExecutionPayloadHeader, error) { // *ExecutionPayloadHeader
		var err error
		if t == nil {
			t = new(ExecutionPayloadHeader)
		}
		bufpos := 568
		buflen := len(buf)
		if buflen < 568 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #10 'ExtraData'
		offset10 := int(sszutils.ReadOffset(buf[436:440]))
		// Field #0 'ParentHash'
		copy(t.ParentHash[:], buf[0:32])
		// Field #1 'FeeRecipient'
		copy(t.FeeRecipient[:], buf[32:52])
		// Field #2 'StateRoot'
		copy(t.StateRoot[:], buf[52:84])
		// Field #3 'ReceiptsRoot'
		copy(t.ReceiptsRoot[:], buf[84:116])
		// Field #4 'LogsBloom'
		copy(t.LogsBloom[:], buf[116:372])
		// Field #5 'PrevRandao'
		copy(t.PrevRandao[:], buf[372:404])
		// Field #6 'BlockNumber'
		t.BlockNumber = (uint64)(sszutils.UnmarshallUint64(buf[404:412]))
		// Field #7 'GasLimit'
		t.GasLimit = (uint64)(sszutils.UnmarshallUint64(buf[412:420]))
		// Field #8 'GasUsed'
		t.GasUsed = (uint64)(sszutils.UnmarshallUint64(buf[420:428]))
		// Field #9 'Timestamp'
		t.Timestamp = (uint64)(sszutils.UnmarshallUint64(buf[428:436]))
		// Field #11 'BaseFeePerGas'
		copy(t.BaseFeePerGas[:], buf[440:472])
		// Field #12 'BlockHash'
		copy(t.BlockHash[:], buf[472:504])
		// Field #13 'TransactionsRoot'
		copy(t.TransactionsRoot[:], buf[504:536])
		// Field #14 'WithdrawalsRoot'
		copy(t.WithdrawalsRoot[:], buf[536:568])
		// Dynamic Field #10 'ExtraData'
		if offset10 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset10:]
			if len(t.ExtraData) < len(fieldSlice) {
				t.ExtraData = make([]byte, len(fieldSlice))
			} else {
				t.ExtraData = t.ExtraData[:len(fieldSlice)]
			}
			copy(t.ExtraData[:], fieldSlice)
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *ExecutionPayloadHeader) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t []byte) (err error) { // []uint8:32
		maxLen := 32
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t *ExecutionPayloadHeader) (err error) { // *capella.ExecutionPayloadHeader
		idx := hh.Index()
		// Field #0 'ParentHash'
		hh.PutBytes(t.ParentHash[:])
		// Field #1 'FeeRecipient'
		hh.PutBytes(t.FeeRecipient[:])
		// Field #2 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #3 'ReceiptsRoot'
		hh.PutBytes(t.ReceiptsRoot[:])
		// Field #4 'LogsBloom'
		hh.PutBytes(t.LogsBloom[:])
		// Field #5 'PrevRandao'
		hh.PutBytes(t.PrevRandao[:])
		// Field #6 'BlockNumber'
		hh.PutUint64(uint64(t.BlockNumber))
		// Field #7 'GasLimit'
		hh.PutUint64(uint64(t.GasLimit))
		// Field #8 'GasUsed'
		hh.PutUint64(uint64(t.GasUsed))
		// Field #9 'Timestamp'
		hh.PutUint64(uint64(t.Timestamp))
		// Field #10 'ExtraData'
		if err = fn1(t.ExtraData); err != nil {
			return err
		}
		// Field #11 'BaseFeePerGas'
		hh.PutBytes(t.BaseFeePerGas[:])
		// Field #12 'BlockHash'
		hh.PutBytes(t.BlockHash[:])
		// Field #13 'TransactionsRoot'
		hh.PutBytes(t.TransactionsRoot[:])
		// Field #14 'WithdrawalsRoot'
		hh.PutBytes(t.WithdrawalsRoot[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *ExecutionPayloadHeader) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
