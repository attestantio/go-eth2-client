// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 93c61a5e8585d4fd856c896ffc5d1ba0e004bb2cc265de82ca8ccecef82d2f5a
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Withdrawal) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Withdrawal) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(Withdrawal)
	}
	{ // Field #0 'Index'
		dst = sszutils.MarshalUint64(dst, uint64(t.Index))
	}
	{ // Field #1 'ValidatorIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ValidatorIndex))
	}
	{ // Field #2 'Address'
		dst = append(dst, []byte(t.Address[:20])...)
	}
	{ // Field #3 'Amount'
		dst = sszutils.MarshalUint64(dst, uint64(t.Amount))
	}
	return dst, nil
}

func (t *Withdrawal) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 44 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Index' (static)
		buf := buf[0:8]
		t.Index = WithdrawalIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'ValidatorIndex' (static)
		buf := buf[8:16]
		t.ValidatorIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'Address' (static)
		buf := buf[16:36]
		copy(t.Address[:], buf)
	}
	{ // Field #3 'Amount' (static)
		buf := buf[36:44]
		t.Amount = phase0.Gwei(sszutils.UnmarshallUint64(buf))
	}
	return nil
}

func (t *Withdrawal) SizeSSZ() (size int) {
	return 44
}

func (t *Withdrawal) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *Withdrawal) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(Withdrawal)
	}
	idx := hh.Index()
	{ // Field #0 'Index'
		hh.PutUint64(uint64(t.Index))
	}
	{ // Field #1 'ValidatorIndex'
		hh.PutUint64(uint64(t.ValidatorIndex))
	}
	{ // Field #2 'Address'
		hh.PutBytes(t.Address[:20])
	}
	{ // Field #3 'Amount'
		hh.PutUint64(uint64(t.Amount))
	}
	hh.Merkleize(idx)
	return nil
}

