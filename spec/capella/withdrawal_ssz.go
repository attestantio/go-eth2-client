// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: dcab8b5187b0d5242f9ae4939d2cead4e2744eba3fadfb30a05dd5a3625a3716
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Withdrawal) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *Withdrawal) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *Withdrawal) (err error) { // *capella.Withdrawal
		// Field #0 'Index'
		dst = sszutils.MarshalUint64(dst, uint64(t.Index))
		// Field #1 'ValidatorIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ValidatorIndex))
		// Field #2 'Address'
		dst = append(dst, t.Address[:]...)
		// Field #3 'Amount'
		dst = sszutils.MarshalUint64(dst, uint64(t.Amount))
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *Withdrawal) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *Withdrawal) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *Withdrawal) SizeSSZ() (size int) {
	sfn1 := func(t *Withdrawal) (size int) { // *Withdrawal
		size = 44
		return size
	}
	return sfn1(t)
}

func (t *Withdrawal) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *Withdrawal) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *Withdrawal, buf []byte) (*Withdrawal, error) { // *Withdrawal
		var err error
		if t == nil {
			t = new(Withdrawal)
		}
		buflen := len(buf)
		if buflen < 44 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Index'
		t.Index = (WithdrawalIndex)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'ValidatorIndex'
		t.ValidatorIndex = (phase0.ValidatorIndex)(sszutils.UnmarshallUint64(buf[8:16]))
		// Field #2 'Address'
		copy(t.Address[:], buf[16:36])
		// Field #3 'Amount'
		t.Amount = (phase0.Gwei)(sszutils.UnmarshallUint64(buf[36:44]))
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *Withdrawal) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *Withdrawal) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *Withdrawal) (err error) { // *capella.Withdrawal
		idx := hh.Index()
		// Field #0 'Index'
		hh.PutUint64(uint64(t.Index))
		// Field #1 'ValidatorIndex'
		hh.PutUint64(uint64(t.ValidatorIndex))
		// Field #2 'Address'
		hh.PutBytes(t.Address[:])
		// Field #3 'Amount'
		hh.PutUint64(uint64(t.Amount))
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *Withdrawal) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *Withdrawal) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
