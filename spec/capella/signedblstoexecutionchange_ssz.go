// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 0c0d2de71a7b69167590a170aeba270bdac885ca1a0d985a11e05cffc471d6d7
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SignedBLSToExecutionChange) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *SignedBLSToExecutionChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *BLSToExecutionChange) (err error) { // *capella.BLSToExecutionChange
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *SignedBLSToExecutionChange) (err error) { // *capella.SignedBLSToExecutionChange
		// Field #0 'Message'
		if err = fn1(t.Message); err != nil {
			return err
		}
		// Field #1 'Signature'
		dst = append(dst, t.Signature[:]...)
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *SignedBLSToExecutionChange) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *SignedBLSToExecutionChange) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *SignedBLSToExecutionChange) SizeSSZ() (size int) {
	sfn1 := func(t *SignedBLSToExecutionChange) (size int) { // *SignedBLSToExecutionChange
		size = 172
		return size
	}
	return sfn1(t)
}

func (t *SignedBLSToExecutionChange) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *SignedBLSToExecutionChange) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *BLSToExecutionChange, buf []byte) (*BLSToExecutionChange, error) { // *BLSToExecutionChange
		var err error
		if t == nil {
			t = new(BLSToExecutionChange)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *SignedBLSToExecutionChange, buf []byte) (*SignedBLSToExecutionChange, error) { // *SignedBLSToExecutionChange
		var err error
		if t == nil {
			t = new(SignedBLSToExecutionChange)
		}
		buflen := len(buf)
		if buflen < 172 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Message'
		if t.Message, err = fn1(t.Message, buf[0:76]); err != nil {
			return t, err
		}
		// Field #1 'Signature'
		copy(t.Signature[:], buf[76:172])
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *SignedBLSToExecutionChange) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *SignedBLSToExecutionChange) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *BLSToExecutionChange) (err error) { // *capella.BLSToExecutionChange
		var root [32]byte
		if root, err = t.HashTreeRoot(); err == nil {
			hh.Append(root[:])
		}
		return err
	}
	fn2 := func(t *SignedBLSToExecutionChange) (err error) { // *capella.SignedBLSToExecutionChange
		idx := hh.Index()
		// Field #0 'Message'
		if err = fn1(t.Message); err != nil {
			return err
		}
		// Field #1 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *SignedBLSToExecutionChange) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *SignedBLSToExecutionChange) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
