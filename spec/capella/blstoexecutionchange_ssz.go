// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 424b49f1ad48291b59204ad36ce80db5bf7abc367eee66f0819507c9c5ee5c80
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BLSToExecutionChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *BLSToExecutionChange) (err error) { // *capella.BLSToExecutionChange
		// Field #0 'ValidatorIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ValidatorIndex))
		// Field #1 'FromBLSPubkey'
		dst = append(dst, t.FromBLSPubkey[:]...)
		// Field #2 'ToExecutionAddress'
		dst = append(dst, t.ToExecutionAddress[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *BLSToExecutionChange) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *BLSToExecutionChange) SizeSSZ() (size int) {
	sfn1 := func(t *BLSToExecutionChange) (size int) { // *BLSToExecutionChange
		size = 76
		return size
	}
	return sfn1(t)
}

func (t *BLSToExecutionChange) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *BLSToExecutionChange, buf []byte) (*BLSToExecutionChange, error) { // *BLSToExecutionChange
		var err error
		if t == nil {
			t = new(BLSToExecutionChange)
		}
		buflen := len(buf)
		if buflen < 76 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'ValidatorIndex'
		t.ValidatorIndex = (phase0.ValidatorIndex)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'FromBLSPubkey'
		copy(t.FromBLSPubkey[:], buf[8:56])
		// Field #2 'ToExecutionAddress'
		copy(t.ToExecutionAddress[:], buf[56:76])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *BLSToExecutionChange) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *BLSToExecutionChange) (err error) { // *capella.BLSToExecutionChange
		idx := hh.Index()
		// Field #0 'ValidatorIndex'
		hh.PutUint64(uint64(t.ValidatorIndex))
		// Field #1 'FromBLSPubkey'
		hh.PutBytes(t.FromBLSPubkey[:])
		// Field #2 'ToExecutionAddress'
		hh.PutBytes(t.ToExecutionAddress[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *BLSToExecutionChange) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
