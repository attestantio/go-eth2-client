// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 424b49f1ad48291b59204ad36ce80db5bf7abc367eee66f0819507c9c5ee5c80
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BLSToExecutionChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'ValidatorIndex'
		t := t.ValidatorIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'FromBLSPubkey'
		t := t.FromBLSPubkey
		limit := 48
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #2 'ToExecutionAddress'
		t := t.ToExecutionAddress
		limit := 20
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *BLSToExecutionChange) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BLSToExecutionChange) SizeSSZ() (size int) {
	return 76
}

func (t *BLSToExecutionChange) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 76 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'ValidatorIndex' (static)
		buf := buf[0:8]
		t.ValidatorIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'FromBLSPubkey' (static)
		buf := buf[8:56]
		val1 := t.FromBLSPubkey
		copy(val1[:], buf)
		t.FromBLSPubkey = val1
	}
	{ // Field #2 'ToExecutionAddress' (static)
		buf := buf[56:76]
		val2 := t.ToExecutionAddress
		copy(val2[:], buf)
		t.ToExecutionAddress = val2
	}
	return nil
}

func (t *BLSToExecutionChange) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'ValidatorIndex'
		t := t.ValidatorIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'FromBLSPubkey'
		t := t.FromBLSPubkey
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #2 'ToExecutionAddress'
		t := t.ToExecutionAddress
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *BLSToExecutionChange) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
