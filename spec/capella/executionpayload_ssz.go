// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 81e800ecc500ac63c6e94e455606dae2652247540d33c103fbba1f33228c268f
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	"github.com/attestantio/go-eth2-client/spec/bellatrix"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionPayload) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *ExecutionPayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t []byte) (err error) { // []uint8
		dst = append(dst, t[:]...)
		return err
	}
	fn2 := func(t bellatrix.Transaction) (err error) { // bellatrix.Transaction
		dst = append(dst, t[:]...)
		return err
	}
	fn3 := func(t []bellatrix.Transaction) (err error) { // []bellatrix.Transaction
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			if err = fn2(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn4 := func(t *Withdrawal) (err error) { // *capella.Withdrawal
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn5 := func(t []*Withdrawal) (err error) { // []*capella.Withdrawal
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn6 := func(t *ExecutionPayload) (err error) { // *capella.ExecutionPayload
		dstlen := len(dst)
		// Field #0 'ParentHash'
		dst = append(dst, t.ParentHash[:]...)
		// Field #1 'FeeRecipient'
		dst = append(dst, t.FeeRecipient[:]...)
		// Field #2 'StateRoot'
		dst = append(dst, t.StateRoot[:]...)
		// Field #3 'ReceiptsRoot'
		dst = append(dst, t.ReceiptsRoot[:]...)
		// Field #4 'LogsBloom'
		dst = append(dst, t.LogsBloom[:]...)
		// Field #5 'PrevRandao'
		dst = append(dst, t.PrevRandao[:]...)
		// Field #6 'BlockNumber'
		dst = sszutils.MarshalUint64(dst, uint64(t.BlockNumber))
		// Field #7 'GasLimit'
		dst = sszutils.MarshalUint64(dst, uint64(t.GasLimit))
		// Field #8 'GasUsed'
		dst = sszutils.MarshalUint64(dst, uint64(t.GasUsed))
		// Field #9 'Timestamp'
		dst = sszutils.MarshalUint64(dst, uint64(t.Timestamp))
		// Offset #10 'ExtraData'
		offset10 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #11 'BaseFeePerGas'
		dst = append(dst, t.BaseFeePerGas[:]...)
		// Field #12 'BlockHash'
		dst = append(dst, t.BlockHash[:]...)
		// Offset #13 'Transactions'
		offset13 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #14 'Withdrawals'
		offset14 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #10 'ExtraData'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		if err = fn1(t.ExtraData); err != nil {
			return err
		}
		// Dynamic Field #13 'Transactions'
		sszutils.UpdateOffset(dst[offset13:offset13+4], len(dst)-dstlen)
		if err = fn3(t.Transactions); err != nil {
			return err
		}
		// Dynamic Field #14 'Withdrawals'
		sszutils.UpdateOffset(dst[offset14:offset14+4], len(dst)-dstlen)
		if err = fn5(t.Withdrawals); err != nil {
			return err
		}
		return err
	}
	err = fn6(t)
	return dst, err
}
func (t *ExecutionPayload) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *ExecutionPayload) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *ExecutionPayload) SizeSSZ() (size int) {
	sfn1 := func(t []byte) (size int) { // []byte
		size += len(t)
		return size
	}
	sfn2 := func(t bellatrix.Transaction) (size int) { // bellatrix.Transaction
		size += len(t)
		return size
	}
	sfn3 := func(t []bellatrix.Transaction) (size int) { // []bellatrix.Transaction
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn2(t[i])
		}
		return size
	}
	sfn4 := func(t []*Withdrawal) (size int) { // []*Withdrawal
		size += len(t) * 44
		return size
	}
	sfn5 := func(t *ExecutionPayload) (size int) { // *ExecutionPayload
		size = 500
		size += 4 + sfn1(t.ExtraData)
		size += 4 + sfn3(t.Transactions)
		size += 4 + sfn4(t.Withdrawals)
		return size
	}
	return sfn5(t)
}

func (t *ExecutionPayload) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *ExecutionPayload) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t []byte, buf []byte) ([]byte, error) { // []byte
		var err error
		if len(t) < len(buf) {
			t = make([]byte, len(buf))
		} else {
			t = t[:len(buf)]
		}
		if len(buf) > 0 {
			copy(t[:], buf)
		}
		return t, err
	}
	fn2 := func(t bellatrix.Transaction, buf []byte) (bellatrix.Transaction, error) { // bellatrix.Transaction
		var err error
		if len(t) < len(buf) {
			t = make(bellatrix.Transaction, len(buf))
		} else {
			t = t[:len(buf)]
		}
		if len(buf) > 0 {
			copy(t[:], buf)
		}
		return t, err
	}
	fn3 := func(t []bellatrix.Transaction, buf []byte) ([]bellatrix.Transaction, error) { // []bellatrix.Transaction
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]bellatrix.Transaction, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if t[i], err = fn2(t[i], buf[offset:endOffset]); err != nil {
				return t, err
			}
			offset = endOffset
		}
		return t, err
	}
	fn4 := func(t *Withdrawal, buf []byte) (*Withdrawal, error) { // *Withdrawal
		var err error
		if t == nil {
			t = new(Withdrawal)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn5 := func(t []*Withdrawal, buf []byte) ([]*Withdrawal, error) { // []*Withdrawal
		var err error
		buflen := len(buf)
		itemsize := 44
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*Withdrawal, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn4(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn6 := func(t *ExecutionPayload, buf []byte) (*ExecutionPayload, error) { // *ExecutionPayload
		var err error
		if t == nil {
			t = new(ExecutionPayload)
		}
		bufpos := 512
		buflen := len(buf)
		if buflen < 512 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #10 'ExtraData'
		offset10 := int(sszutils.ReadOffset(buf[436:440]))
		// Read offset #13 'Transactions'
		offset13 := int(sszutils.ReadOffset(buf[504:508]))
		// Read offset #14 'Withdrawals'
		offset14 := int(sszutils.ReadOffset(buf[508:512]))
		// Field #0 'ParentHash'
		copy(t.ParentHash[:], buf[0:32])
		// Field #1 'FeeRecipient'
		copy(t.FeeRecipient[:], buf[32:52])
		// Field #2 'StateRoot'
		copy(t.StateRoot[:], buf[52:84])
		// Field #3 'ReceiptsRoot'
		copy(t.ReceiptsRoot[:], buf[84:116])
		// Field #4 'LogsBloom'
		copy(t.LogsBloom[:], buf[116:372])
		// Field #5 'PrevRandao'
		copy(t.PrevRandao[:], buf[372:404])
		// Field #6 'BlockNumber'
		t.BlockNumber = (uint64)(sszutils.UnmarshallUint64(buf[404:412]))
		// Field #7 'GasLimit'
		t.GasLimit = (uint64)(sszutils.UnmarshallUint64(buf[412:420]))
		// Field #8 'GasUsed'
		t.GasUsed = (uint64)(sszutils.UnmarshallUint64(buf[420:428]))
		// Field #9 'Timestamp'
		t.Timestamp = (uint64)(sszutils.UnmarshallUint64(buf[428:436]))
		// Field #11 'BaseFeePerGas'
		copy(t.BaseFeePerGas[:], buf[440:472])
		// Field #12 'BlockHash'
		copy(t.BlockHash[:], buf[472:504])
		// Dynamic Field #10 'ExtraData'
		if offset10 < bufpos || offset13 > buflen || offset13 < offset10 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset10:offset13]
			if t.ExtraData, err = fn1(t.ExtraData, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #13 'Transactions'
		if offset13 < bufpos || offset14 > buflen || offset14 < offset13 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset13:offset14]
			if t.Transactions, err = fn3(t.Transactions, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #14 'Withdrawals'
		if offset14 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset14:]
			if t.Withdrawals, err = fn5(t.Withdrawals, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn6(t, buf)
	return err
}

func (t *ExecutionPayload) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t []byte) (err error) { // []uint8:32:MAX_EXTRA_DATA_BYTES
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_EXTRA_DATA_BYTES")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 32
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t bellatrix.Transaction) (err error) { // bellatrix.Transaction:1073741824:MAX_BYTES_PER_TRANSACTION:pack
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_BYTES_PER_TRANSACTION")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 1073741824
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn3 := func(t []bellatrix.Transaction) (err error) { // []bellatrix.Transaction:1048576:MAX_TRANSACTIONS_PER_PAYLOAD:MAX_BYTES_PER_TRANSACTION
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_TRANSACTIONS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 1048576
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn2(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn4 := func(t *Withdrawal) (err error) { // *capella.Withdrawal:pack
		var root [32]byte
		if root, err = t.HashTreeRoot(); err == nil {
			hh.Append(root[:])
		}
		return err
	}
	fn5 := func(t []*Withdrawal) (err error) { // []*capella.Withdrawal:16:MAX_WITHDRAWALS_PER_PAYLOAD
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_WITHDRAWALS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn6 := func(t *ExecutionPayload) (err error) { // *capella.ExecutionPayload
		idx := hh.Index()
		// Field #0 'ParentHash'
		hh.PutBytes(t.ParentHash[:])
		// Field #1 'FeeRecipient'
		hh.PutBytes(t.FeeRecipient[:])
		// Field #2 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #3 'ReceiptsRoot'
		hh.PutBytes(t.ReceiptsRoot[:])
		// Field #4 'LogsBloom'
		hh.PutBytes(t.LogsBloom[:])
		// Field #5 'PrevRandao'
		hh.PutBytes(t.PrevRandao[:])
		// Field #6 'BlockNumber'
		hh.PutUint64(uint64(t.BlockNumber))
		// Field #7 'GasLimit'
		hh.PutUint64(uint64(t.GasLimit))
		// Field #8 'GasUsed'
		hh.PutUint64(uint64(t.GasUsed))
		// Field #9 'Timestamp'
		hh.PutUint64(uint64(t.Timestamp))
		// Field #10 'ExtraData'
		if err = fn1(t.ExtraData); err != nil {
			return err
		}
		// Field #11 'BaseFeePerGas'
		hh.PutBytes(t.BaseFeePerGas[:])
		// Field #12 'BlockHash'
		hh.PutBytes(t.BlockHash[:])
		// Field #13 'Transactions'
		if err = fn3(t.Transactions); err != nil {
			return err
		}
		// Field #14 'Withdrawals'
		if err = fn5(t.Withdrawals); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn6(t)
}
func (t *ExecutionPayload) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ExecutionPayload) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *ExecutionPayload) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
