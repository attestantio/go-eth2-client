// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 2327ac8c70b0be9ba1712d487f62bac0c9d97b525e1e8a545b3fc1182c9c04e1
// Version: v1.0.1 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconBlockBody) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	{ // Field #0 'RANDAOReveal'
		t := t.RANDAOReveal
		limit := 96
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #1 'ETH1Data'
		t := t.ETH1Data
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #2 'Graffiti'
		t := t.Graffiti
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	// Offset #3 'ProposerSlashings'
	offset3 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #4 'AttesterSlashings'
	offset4 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #5 'Attestations'
	offset5 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #6 'Deposits'
	offset6 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #7 'VoluntaryExits'
	offset7 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #8 'SyncAggregate'
		t := t.SyncAggregate
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	// Offset #9 'ExecutionPayload'
	offset9 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #10 'BLSToExecutionChanges'
	offset10 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #3 'ProposerSlashings'
		sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
		t := t.ProposerSlashings
		max := 16
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #4 'AttesterSlashings'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		t := t.AttesterSlashings
		max := 2
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #5 'Attestations'
		sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
		t := t.Attestations
		max := 128
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #6 'Deposits'
		sszutils.UpdateOffset(dst[offset6:offset6+4], len(dst)-dstlen)
		t := t.Deposits
		max := 16
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #7 'VoluntaryExits'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		t := t.VoluntaryExits
		max := 16
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #9 'ExecutionPayload'
		sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
		t := t.ExecutionPayload
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #10 'BLSToExecutionChanges'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		t := t.BLSToExecutionChanges
		max := 16
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *BeaconBlockBody) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BeaconBlockBody) SizeSSZ() (size int) {
	// Field #0 'RANDAOReveal' static (96 bytes)
	// Field #1 'ETH1Data' static (72 bytes)
	// Field #2 'Graffiti' static (32 bytes)
	// Field #3 'ProposerSlashings' offset (4 bytes)
	// Field #4 'AttesterSlashings' offset (4 bytes)
	// Field #5 'Attestations' offset (4 bytes)
	// Field #6 'Deposits' offset (4 bytes)
	// Field #7 'VoluntaryExits' offset (4 bytes)
	// Field #8 'SyncAggregate' static (160 bytes)
	// Field #9 'ExecutionPayload' offset (4 bytes)
	// Field #10 'BLSToExecutionChanges' offset (4 bytes)
	size += 388
	{ // Dynamic field #3 'ProposerSlashings'
		vlen := len(t.ProposerSlashings)
		size += vlen * 416
	}
	{ // Dynamic field #4 'AttesterSlashings'
		vlen := len(t.AttesterSlashings)
		size += vlen * 4 // Offsets
		for i := 0; i < vlen; i++ {
			t := t.AttesterSlashings[i]
			size += t.SizeSSZ()
		}
	}
	{ // Dynamic field #5 'Attestations'
		vlen := len(t.Attestations)
		size += vlen * 4 // Offsets
		for i := 0; i < vlen; i++ {
			t := t.Attestations[i]
			size += t.SizeSSZ()
		}
	}
	{ // Dynamic field #6 'Deposits'
		vlen := len(t.Deposits)
		size += vlen * 1240
	}
	{ // Dynamic field #7 'VoluntaryExits'
		vlen := len(t.VoluntaryExits)
		size += vlen * 112
	}
	{ // Dynamic field #9 'ExecutionPayload'
		size += t.ExecutionPayload.SizeSSZ()
	}
	{ // Dynamic field #10 'BLSToExecutionChanges'
		vlen := len(t.BLSToExecutionChanges)
		size += vlen * 172
	}
	return size
}

func (t *BeaconBlockBody) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 388 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'RANDAOReveal' (static)
		buf := buf[0:96]
		copy(t.RANDAOReveal[:], buf)
	}
	{ // Field #1 'ETH1Data' (static)
		buf := buf[96:168]
		if t.ETH1Data == nil {
			t.ETH1Data = new(phase0.ETH1Data)
		}
		if err = t.ETH1Data.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #2 'Graffiti' (static)
		buf := buf[168:200]
		copy(t.Graffiti[:], buf)
	}
	// Field #3 'ProposerSlashings' (offset)
	offset3 := int(sszutils.UnmarshallUint32(buf[200:204]))
	if offset3 < 388 || offset3 > buflen {
		return sszutils.ErrOffset
	}
	// Field #4 'AttesterSlashings' (offset)
	offset4 := int(sszutils.UnmarshallUint32(buf[204:208]))
	if offset4 < offset3 || offset4 > buflen {
		return sszutils.ErrOffset
	}
	// Field #5 'Attestations' (offset)
	offset5 := int(sszutils.UnmarshallUint32(buf[208:212]))
	if offset5 < offset4 || offset5 > buflen {
		return sszutils.ErrOffset
	}
	// Field #6 'Deposits' (offset)
	offset6 := int(sszutils.UnmarshallUint32(buf[212:216]))
	if offset6 < offset5 || offset6 > buflen {
		return sszutils.ErrOffset
	}
	// Field #7 'VoluntaryExits' (offset)
	offset7 := int(sszutils.UnmarshallUint32(buf[216:220]))
	if offset7 < offset6 || offset7 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #8 'SyncAggregate' (static)
		buf := buf[220:380]
		if t.SyncAggregate == nil {
			t.SyncAggregate = new(altair.SyncAggregate)
		}
		if err = t.SyncAggregate.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	// Field #9 'ExecutionPayload' (offset)
	offset9 := int(sszutils.UnmarshallUint32(buf[380:384]))
	if offset9 < offset7 || offset9 > buflen {
		return sszutils.ErrOffset
	}
	// Field #10 'BLSToExecutionChanges' (offset)
	offset10 := int(sszutils.UnmarshallUint32(buf[384:388]))
	if offset10 < offset9 || offset10 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #3 'ProposerSlashings' (dynamic)
		buf := buf[offset3:offset4]
		val1 := t.ProposerSlashings
		itemCount := len(buf) / 416
		if len(buf)%416 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val1) < itemCount {
			val1 = make([]*phase0.ProposerSlashing, itemCount)
		} else if len(val1) > itemCount {
			val1 = val1[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if val1[i] == nil {
				val1[i] = new(phase0.ProposerSlashing)
			}
			buf := buf[416*i : 416*(i+1)]
			if err = val1[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.ProposerSlashings = val1
	}
	{ // Field #4 'AttesterSlashings' (dynamic)
		buf := buf[offset4:offset5]
		val2 := t.AttesterSlashings
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset / 4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val2) < itemCount {
			val2 = make([]*phase0.AttesterSlashing, itemCount)
		} else if len(val2) > itemCount {
			val2 = val2[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val3 := val2[i]
			if val3 == nil {
				val3 = new(phase0.AttesterSlashing)
			}
			if err = val3.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val2[i] = val3
		}
		t.AttesterSlashings = val2
	}
	{ // Field #5 'Attestations' (dynamic)
		buf := buf[offset5:offset6]
		val4 := t.Attestations
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset / 4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val4) < itemCount {
			val4 = make([]*phase0.Attestation, itemCount)
		} else if len(val4) > itemCount {
			val4 = val4[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val5 := val4[i]
			if val5 == nil {
				val5 = new(phase0.Attestation)
			}
			if err = val5.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val4[i] = val5
		}
		t.Attestations = val4
	}
	{ // Field #6 'Deposits' (dynamic)
		buf := buf[offset6:offset7]
		val6 := t.Deposits
		itemCount := len(buf) / 1240
		if len(buf)%1240 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val6) < itemCount {
			val6 = make([]*phase0.Deposit, itemCount)
		} else if len(val6) > itemCount {
			val6 = val6[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if val6[i] == nil {
				val6[i] = new(phase0.Deposit)
			}
			buf := buf[1240*i : 1240*(i+1)]
			if err = val6[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.Deposits = val6
	}
	{ // Field #7 'VoluntaryExits' (dynamic)
		buf := buf[offset7:offset9]
		val7 := t.VoluntaryExits
		itemCount := len(buf) / 112
		if len(buf)%112 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val7) < itemCount {
			val7 = make([]*phase0.SignedVoluntaryExit, itemCount)
		} else if len(val7) > itemCount {
			val7 = val7[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if val7[i] == nil {
				val7[i] = new(phase0.SignedVoluntaryExit)
			}
			buf := buf[112*i : 112*(i+1)]
			if err = val7[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.VoluntaryExits = val7
	}
	{ // Field #9 'ExecutionPayload' (dynamic)
		buf := buf[offset9:offset10]
		val8 := t.ExecutionPayload
		if val8 == nil {
			val8 = new(ExecutionPayload)
		}
		if err = val8.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.ExecutionPayload = val8
	}
	{ // Field #10 'BLSToExecutionChanges' (dynamic)
		buf := buf[offset10:]
		val9 := t.BLSToExecutionChanges
		itemCount := len(buf) / 172
		if len(buf)%172 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val9) < itemCount {
			val9 = make([]*SignedBLSToExecutionChange, itemCount)
		} else if len(val9) > itemCount {
			val9 = val9[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if val9[i] == nil {
				val9[i] = new(SignedBLSToExecutionChange)
			}
			buf := buf[172*i : 172*(i+1)]
			if err = val9[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.BLSToExecutionChanges = val9
	}
	return nil
}

func (t *BeaconBlockBody) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'RANDAOReveal'
		t := t.RANDAOReveal
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #1 'ETH1Data'
		t := t.ETH1Data
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #2 'Graffiti'
		t := t.Graffiti
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #3 'ProposerSlashings'
		t := t.ProposerSlashings
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #4 'AttesterSlashings'
		t := t.AttesterSlashings
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(2, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #5 'Attestations'
		t := t.Attestations
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(128, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #6 'Deposits'
		t := t.Deposits
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #7 'VoluntaryExits'
		t := t.VoluntaryExits
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #8 'SyncAggregate'
		t := t.SyncAggregate
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #9 'ExecutionPayload'
		t := t.ExecutionPayload
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #10 'BLSToExecutionChanges'
		t := t.BLSToExecutionChanges
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *BeaconBlockBody) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
