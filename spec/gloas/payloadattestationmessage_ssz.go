// Code generated by fastssz. DO NOT EDIT.
// Hash: 62f3dd270b2b2e69b18a3b7ca2c7cfbe48dcbd02d05d7c7f2e015bed0cda1fee
// Version: 0.1.3
package gloas

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PayloadAttestationMessage object
func (p *PayloadAttestationMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PayloadAttestationMessage object to a target array
func (p *PayloadAttestationMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(p.ValidatorIndex))

	// Field (1) 'Data'
	if p.Data == nil {
		p.Data = new(PayloadAttestationData)
	}
	if dst, err = p.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'Signature'
	dst = append(dst, p.Signature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the PayloadAttestationMessage object
func (p *PayloadAttestationMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 146 {
		return ssz.ErrSize
	}

	// Field (0) 'ValidatorIndex'
	p.ValidatorIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Data'
	if p.Data == nil {
		p.Data = new(PayloadAttestationData)
	}
	if err = p.Data.UnmarshalSSZ(buf[8:50]); err != nil {
		return err
	}

	// Field (2) 'Signature'
	copy(p.Signature[:], buf[50:146])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PayloadAttestationMessage object
func (p *PayloadAttestationMessage) SizeSSZ() (size int) {
	size = 146
	return
}

// HashTreeRoot ssz hashes the PayloadAttestationMessage object
func (p *PayloadAttestationMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PayloadAttestationMessage object with a hasher
func (p *PayloadAttestationMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ValidatorIndex'
	hh.PutUint64(uint64(p.ValidatorIndex))

	// Field (1) 'Data'
	if p.Data == nil {
		p.Data = new(PayloadAttestationData)
	}
	if err = p.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'Signature'
	hh.PutBytes(p.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PayloadAttestationMessage object
func (p *PayloadAttestationMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
