// Code generated by fastssz. DO NOT EDIT.
// Hash: 62f3dd270b2b2e69b18a3b7ca2c7cfbe48dcbd02d05d7c7f2e015bed0cda1fee
// Version: 0.1.3
package gloas

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PayloadAttestationData object
func (p *PayloadAttestationData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PayloadAttestationData object to a target array
func (p *PayloadAttestationData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BeaconBlockRoot'
	dst = append(dst, p.BeaconBlockRoot[:]...)

	// Field (1) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(p.Slot))

	// Field (2) 'PayloadPresent'
	dst = ssz.MarshalBool(dst, p.PayloadPresent)

	// Field (3) 'BlobDataAvailable'
	dst = ssz.MarshalBool(dst, p.BlobDataAvailable)

	return
}

// UnmarshalSSZ ssz unmarshals the PayloadAttestationData object
func (p *PayloadAttestationData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 42 {
		return ssz.ErrSize
	}

	// Field (0) 'BeaconBlockRoot'
	copy(p.BeaconBlockRoot[:], buf[0:32])

	// Field (1) 'Slot'
	p.Slot = phase0.Slot(ssz.UnmarshallUint64(buf[32:40]))

	// Field (2) 'PayloadPresent'
	p.PayloadPresent = ssz.UnmarshalBool(buf[40:41])

	// Field (3) 'BlobDataAvailable'
	p.BlobDataAvailable = ssz.UnmarshalBool(buf[41:42])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PayloadAttestationData object
func (p *PayloadAttestationData) SizeSSZ() (size int) {
	size = 42
	return
}

// HashTreeRoot ssz hashes the PayloadAttestationData object
func (p *PayloadAttestationData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PayloadAttestationData object with a hasher
func (p *PayloadAttestationData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BeaconBlockRoot'
	hh.PutBytes(p.BeaconBlockRoot[:])

	// Field (1) 'Slot'
	hh.PutUint64(uint64(p.Slot))

	// Field (2) 'PayloadPresent'
	hh.PutBool(p.PayloadPresent)

	// Field (3) 'BlobDataAvailable'
	hh.PutBool(p.BlobDataAvailable)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PayloadAttestationData object
func (p *PayloadAttestationData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
