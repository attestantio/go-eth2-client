// Code generated by fastssz. DO NOT EDIT.
// Hash: 62f3dd270b2b2e69b18a3b7ca2c7cfbe48dcbd02d05d7c7f2e015bed0cda1fee
// Version: 0.1.3
package gloas

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SignedExecutionPayloadHeader object
func (s *SignedExecutionPayloadHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedExecutionPayloadHeader object to a target array
func (s *SignedExecutionPayloadHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(ExecutionPayloadHeader)
	}
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Signature'
	dst = append(dst, s.Signature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the SignedExecutionPayloadHeader object
func (s *SignedExecutionPayloadHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 256 {
		return ssz.ErrSize
	}

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(ExecutionPayloadHeader)
	}
	if err = s.Message.UnmarshalSSZ(buf[0:160]); err != nil {
		return err
	}

	// Field (1) 'Signature'
	copy(s.Signature[:], buf[160:256])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedExecutionPayloadHeader object
func (s *SignedExecutionPayloadHeader) SizeSSZ() (size int) {
	size = 256
	return
}

// HashTreeRoot ssz hashes the SignedExecutionPayloadHeader object
func (s *SignedExecutionPayloadHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedExecutionPayloadHeader object with a hasher
func (s *SignedExecutionPayloadHeader) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(ExecutionPayloadHeader)
	}
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signature'
	hh.PutBytes(s.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedExecutionPayloadHeader object
func (s *SignedExecutionPayloadHeader) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
