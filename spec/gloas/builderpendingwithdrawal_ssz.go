// Code generated by fastssz. DO NOT EDIT.
// Hash: 713478f5af918589f28dafafa147d0a614dd9467e55c5a41184bf13be059b8b6
// Version: 0.1.3
package gloas

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BuilderPendingWithdrawal object
func (b *BuilderPendingWithdrawal) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BuilderPendingWithdrawal object to a target array
func (b *BuilderPendingWithdrawal) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'FeeRecipient'
	dst = append(dst, b.FeeRecipient[:]...)

	// Field (1) 'Amount'
	dst = ssz.MarshalUint64(dst, uint64(b.Amount))

	// Field (2) 'BuilderIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.BuilderIndex))

	// Field (3) 'WithdrawableEpoch'
	dst = ssz.MarshalUint64(dst, uint64(b.WithdrawableEpoch))

	return
}

// UnmarshalSSZ ssz unmarshals the BuilderPendingWithdrawal object
func (b *BuilderPendingWithdrawal) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 44 {
		return ssz.ErrSize
	}

	// Field (0) 'FeeRecipient'
	copy(b.FeeRecipient[:], buf[0:20])

	// Field (1) 'Amount'
	b.Amount = phase0.Gwei(ssz.UnmarshallUint64(buf[20:28]))

	// Field (2) 'BuilderIndex'
	b.BuilderIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[28:36]))

	// Field (3) 'WithdrawableEpoch'
	b.WithdrawableEpoch = phase0.Epoch(ssz.UnmarshallUint64(buf[36:44]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BuilderPendingWithdrawal object
func (b *BuilderPendingWithdrawal) SizeSSZ() (size int) {
	size = 44
	return
}

// HashTreeRoot ssz hashes the BuilderPendingWithdrawal object
func (b *BuilderPendingWithdrawal) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BuilderPendingWithdrawal object with a hasher
func (b *BuilderPendingWithdrawal) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'FeeRecipient'
	hh.PutBytes(b.FeeRecipient[:])

	// Field (1) 'Amount'
	hh.PutUint64(uint64(b.Amount))

	// Field (2) 'BuilderIndex'
	hh.PutUint64(uint64(b.BuilderIndex))

	// Field (3) 'WithdrawableEpoch'
	hh.PutUint64(uint64(b.WithdrawableEpoch))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BuilderPendingWithdrawal object
func (b *BuilderPendingWithdrawal) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
