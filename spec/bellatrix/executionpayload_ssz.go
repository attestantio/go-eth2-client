// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 9744ad67ed200c84c0cf6cd097e66c100fa65270c276d6b6dce8a08b423524e9
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package bellatrix

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionPayload) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ExecutionPayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(ExecutionPayload)
	}
	dstlen := len(dst)
	{ // Field #0 'ParentHash'
		dst = append(dst, []byte(t.ParentHash[:32])...)
	}
	{ // Field #1 'FeeRecipient'
		dst = append(dst, []byte(t.FeeRecipient[:20])...)
	}
	{ // Field #2 'StateRoot'
		dst = append(dst, []byte(t.StateRoot[:32])...)
	}
	{ // Field #3 'ReceiptsRoot'
		dst = append(dst, []byte(t.ReceiptsRoot[:32])...)
	}
	{ // Field #4 'LogsBloom'
		dst = append(dst, []byte(t.LogsBloom[:256])...)
	}
	{ // Field #5 'PrevRandao'
		dst = append(dst, []byte(t.PrevRandao[:32])...)
	}
	{ // Field #6 'BlockNumber'
		dst = sszutils.MarshalUint64(dst, uint64(t.BlockNumber))
	}
	{ // Field #7 'GasLimit'
		dst = sszutils.MarshalUint64(dst, uint64(t.GasLimit))
	}
	{ // Field #8 'GasUsed'
		dst = sszutils.MarshalUint64(dst, uint64(t.GasUsed))
	}
	{ // Field #9 'Timestamp'
		dst = sszutils.MarshalUint64(dst, uint64(t.Timestamp))
	}
	// Offset #10 'ExtraData'
	offset10 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #11 'BaseFeePerGas'
		dst = append(dst, []byte(t.BaseFeePerGas[:32])...)
	}
	{ // Field #12 'BlockHash'
		dst = append(dst, []byte(t.BlockHash[:32])...)
	}
	// Offset #13 'Transactions'
	offset13 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #10 'ExtraData'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		vlen := len(t.ExtraData)
		if vlen > 32 {
			return dst, sszutils.ErrListTooBig
		}
		dst = append(dst, []byte(t.ExtraData[:])...)
	}
	{ // Dynamic Field #13 'Transactions'
		sszutils.UpdateOffset(dst[offset13:offset13+4], len(dst)-dstlen)
		t := t.Transactions
		vlen := len(t)
		if vlen > 1048576 {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			vlen := len(t[i])
			if vlen > 1073741824 {
				return dst, sszutils.ErrListTooBig
			}
			dst = append(dst, []byte(t[i][:])...)
		}
	}
	return dst, nil
}

func (t *ExecutionPayload) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 508 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'ParentHash' (static)
		buf := buf[0:32]
		copy(t.ParentHash[:], buf)
	}
	{ // Field #1 'FeeRecipient' (static)
		buf := buf[32:52]
		copy(t.FeeRecipient[:], buf)
	}
	{ // Field #2 'StateRoot' (static)
		buf := buf[52:84]
		copy(t.StateRoot[:], buf)
	}
	{ // Field #3 'ReceiptsRoot' (static)
		buf := buf[84:116]
		copy(t.ReceiptsRoot[:], buf)
	}
	{ // Field #4 'LogsBloom' (static)
		buf := buf[116:372]
		copy(t.LogsBloom[:], buf)
	}
	{ // Field #5 'PrevRandao' (static)
		buf := buf[372:404]
		copy(t.PrevRandao[:], buf)
	}
	{ // Field #6 'BlockNumber' (static)
		buf := buf[404:412]
		t.BlockNumber = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #7 'GasLimit' (static)
		buf := buf[412:420]
		t.GasLimit = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #8 'GasUsed' (static)
		buf := buf[420:428]
		t.GasUsed = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #9 'Timestamp' (static)
		buf := buf[428:436]
		t.Timestamp = uint64(sszutils.UnmarshallUint64(buf))
	}
	// Field #10 'ExtraData' (offset)
	offset10 := int(sszutils.UnmarshallUint32(buf[436:440]))
	if offset10 != 508 {
		return sszutils.ErrOffset
	}
	{ // Field #11 'BaseFeePerGas' (static)
		buf := buf[440:472]
		copy(t.BaseFeePerGas[:], buf)
	}
	{ // Field #12 'BlockHash' (static)
		buf := buf[472:504]
		copy(t.BlockHash[:], buf)
	}
	// Field #13 'Transactions' (offset)
	offset13 := int(sszutils.UnmarshallUint32(buf[504:508]))
	if offset13 < offset10 || offset13 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #10 'ExtraData' (dynamic)
		buf := buf[offset10:offset13]
		val1 := t.ExtraData
		val1 = sszutils.ExpandSlice(val1, len(buf))
		copy(val1[:], buf)
		t.ExtraData = val1
	}
	{ // Field #13 'Transactions' (dynamic)
		buf := buf[offset13:]
		val2 := t.Transactions
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset / 4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		val2 = sszutils.ExpandSlice(val2, itemCount)
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val3 := val2[i]
			val3 = sszutils.ExpandSlice(val3, len(buf))
			copy(val3[:], buf)
			val2[i] = val3
		}
		t.Transactions = val2
	}
	return nil
}

func (t *ExecutionPayload) SizeSSZ() (size int) {
	if t == nil {
		t = new(ExecutionPayload)
	}
	// Field #0 'ParentHash' static (32 bytes)
	// Field #1 'FeeRecipient' static (20 bytes)
	// Field #2 'StateRoot' static (32 bytes)
	// Field #3 'ReceiptsRoot' static (32 bytes)
	// Field #4 'LogsBloom' static (256 bytes)
	// Field #5 'PrevRandao' static (32 bytes)
	// Field #6 'BlockNumber' static (8 bytes)
	// Field #7 'GasLimit' static (8 bytes)
	// Field #8 'GasUsed' static (8 bytes)
	// Field #9 'Timestamp' static (8 bytes)
	// Field #10 'ExtraData' offset (4 bytes)
	// Field #11 'BaseFeePerGas' static (32 bytes)
	// Field #12 'BlockHash' static (32 bytes)
	// Field #13 'Transactions' offset (4 bytes)
	size += 508
	{ // Dynamic field #10 'ExtraData'
		size += len(t.ExtraData)
	}
	{ // Dynamic field #13 'Transactions'
		t := t.Transactions
		vlen := len(t)
		size += vlen * 4 // Offsets
		for i1 := 0; i1 < vlen; i1++ {
			size += len(t[i1])
		}
	}
	return size
}

func (t *ExecutionPayload) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ExecutionPayload) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(ExecutionPayload)
	}
	idx := hh.Index()
	{ // Field #0 'ParentHash'
		hh.PutBytes(t.ParentHash[:32])
	}
	{ // Field #1 'FeeRecipient'
		hh.PutBytes(t.FeeRecipient[:20])
	}
	{ // Field #2 'StateRoot'
		hh.PutBytes(t.StateRoot[:32])
	}
	{ // Field #3 'ReceiptsRoot'
		hh.PutBytes(t.ReceiptsRoot[:32])
	}
	{ // Field #4 'LogsBloom'
		hh.PutBytes(t.LogsBloom[:256])
	}
	{ // Field #5 'PrevRandao'
		hh.PutBytes(t.PrevRandao[:32])
	}
	{ // Field #6 'BlockNumber'
		hh.PutUint64(uint64(t.BlockNumber))
	}
	{ // Field #7 'GasLimit'
		hh.PutUint64(uint64(t.GasLimit))
	}
	{ // Field #8 'GasUsed'
		hh.PutUint64(uint64(t.GasUsed))
	}
	{ // Field #9 'Timestamp'
		hh.PutUint64(uint64(t.Timestamp))
	}
	{ // Field #10 'ExtraData'
		vlen := uint64(len(t.ExtraData))
		if vlen > 32 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.PutBytes(t.ExtraData[:])
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(32, vlen, 1))
	}
	{ // Field #11 'BaseFeePerGas'
		hh.PutBytes(t.BaseFeePerGas[:32])
	}
	{ // Field #12 'BlockHash'
		hh.PutBytes(t.BlockHash[:32])
	}
	{ // Field #13 'Transactions'
		t := t.Transactions
		vlen := uint64(len(t))
		if vlen > 1048576 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			vlen := uint64(len(t[i]))
			if vlen > 1073741824 {
				return sszutils.ErrListTooBig
			}
			idx := hh.Index()
			hh.PutBytes(t[i][:])
			hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(1073741824, vlen, 1))
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(1048576, vlen, 32))
	}
	hh.Merkleize(idx)
	return nil
}

