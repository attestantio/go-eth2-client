// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 3805d85e58865613b23c845688cf905987008a8437ac11ca34d63bd8df57aa00
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package deneb

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BlobSidecar) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BlobSidecar) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(BlobSidecar)
	}
	{ // Field #0 'Index'
		t := t.Index
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'Blob'
		t := &t.Blob
		dst = append(dst, []byte(t[:131072])...)
	}
	{ // Field #2 'KZGCommitment'
		t := &t.KZGCommitment
		dst = append(dst, []byte(t[:48])...)
	}
	{ // Field #3 'KZGProof'
		t := &t.KZGProof
		dst = append(dst, []byte(t[:48])...)
	}
	{ // Field #4 'SignedBlockHeader'
		t := t.SignedBlockHeader
		if t == nil {
			t = new(phase0.SignedBeaconBlockHeader)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #5 'KZGCommitmentInclusionProof'
		t := &t.KZGCommitmentInclusionProof
		for i := 0; i < 17; i++ {
			t := t[i]
			dst = append(dst, []byte(t[:32])...)
		}
	}
	return dst, nil
}

func (t *BlobSidecar) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 131928 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Index' (static)
		buf := buf[0:8]
		t.Index = BlobIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'Blob' (static)
		buf := buf[8:131080]
		copy(t.Blob[:], buf)
	}
	{ // Field #2 'KZGCommitment' (static)
		buf := buf[131080:131128]
		copy(t.KZGCommitment[:], buf)
	}
	{ // Field #3 'KZGProof' (static)
		buf := buf[131128:131176]
		copy(t.KZGProof[:], buf)
	}
	{ // Field #4 'SignedBlockHeader' (static)
		buf := buf[131176:131384]
		if t.SignedBlockHeader == nil {
			t.SignedBlockHeader = new(phase0.SignedBeaconBlockHeader)
		}
		if err = t.SignedBlockHeader.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #5 'KZGCommitmentInclusionProof' (static)
		buf := buf[131384:131928]
		val1 := t.KZGCommitmentInclusionProof
		for i := 0; i < 17; i++ {
			buf := buf[32*i : 32*(i+1)]
			copy(val1[i][:], buf)
		}
		t.KZGCommitmentInclusionProof = val1
	}
	return nil
}

func (t *BlobSidecar) SizeSSZ() (size int) {
	return 131928
}

func (t *BlobSidecar) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *BlobSidecar) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(BlobSidecar)
	}
	idx := hh.Index()
	{ // Field #0 'Index'
		t := t.Index
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'Blob'
		t := &t.Blob
		hh.PutBytes(t[:131072])
	}
	{ // Field #2 'KZGCommitment'
		t := &t.KZGCommitment
		hh.PutBytes(t[:48])
	}
	{ // Field #3 'KZGProof'
		t := &t.KZGProof
		hh.PutBytes(t[:48])
	}
	{ // Field #4 'SignedBlockHeader'
		t := t.SignedBlockHeader
		if t == nil {
			t = new(phase0.SignedBeaconBlockHeader)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #5 'KZGCommitmentInclusionProof'
		t := &t.KZGCommitmentInclusionProof
		idx := hh.Index()
		for i := 0; i < 17; i++ {
			var val1 KZGCommitmentInclusionProofElement
			if i < 17 {
				val1 = t[i]
			}
			hh.PutBytes(val1[:32])
		}
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

