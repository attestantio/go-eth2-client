// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 03e8b0f6bb335934607cc0d0fcf10e089463400aaa8d51940383b4b179390f98
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package deneb

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BlobSidecar) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *BlobSidecar) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *phase0.SignedBeaconBlockHeader) (err error) { // *phase0.SignedBeaconBlockHeader
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t KZGCommitmentInclusionProof) (err error) { // deneb.KZGCommitmentInclusionProof:17:32
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		return err
	}
	fn3 := func(t *BlobSidecar) (err error) { // *deneb.BlobSidecar
		// Field #0 'Index'
		dst = sszutils.MarshalUint64(dst, uint64(t.Index))
		// Field #1 'Blob'
		dst = append(dst, t.Blob[:]...)
		// Field #2 'KZGCommitment'
		dst = append(dst, t.KZGCommitment[:]...)
		// Field #3 'KZGProof'
		dst = append(dst, t.KZGProof[:]...)
		// Field #4 'SignedBlockHeader'
		if err = fn1(t.SignedBlockHeader); err != nil {
			return err
		}
		// Field #5 'KZGCommitmentInclusionProof'
		if err = fn2(t.KZGCommitmentInclusionProof); err != nil {
			return err
		}
		return err
	}
	err = fn3(t)
	return dst, err
}
func (t *BlobSidecar) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *BlobSidecar) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *BlobSidecar) SizeSSZ() (size int) {
	sfn1 := func(t *BlobSidecar) (size int) { // *BlobSidecar
		size = 131928
		return size
	}
	return sfn1(t)
}

func (t *BlobSidecar) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *BlobSidecar) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *phase0.SignedBeaconBlockHeader, buf []byte) (*phase0.SignedBeaconBlockHeader, error) { // *phase0.SignedBeaconBlockHeader
		var err error
		if t == nil {
			t = new(phase0.SignedBeaconBlockHeader)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t KZGCommitmentInclusionProof, buf []byte) (KZGCommitmentInclusionProof, error) { // KZGCommitmentInclusionProof:17:32
		var err error
		itemsize := 32
		limit := 17
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		for i := 0; i < int(limit); i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn3 := func(t *BlobSidecar, buf []byte) (*BlobSidecar, error) { // *BlobSidecar
		var err error
		if t == nil {
			t = new(BlobSidecar)
		}
		buflen := len(buf)
		if buflen < 131928 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Index'
		t.Index = (BlobIndex)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'Blob'
		copy(t.Blob[:], buf[8:131080])
		// Field #2 'KZGCommitment'
		copy(t.KZGCommitment[:], buf[131080:131128])
		// Field #3 'KZGProof'
		copy(t.KZGProof[:], buf[131128:131176])
		// Field #4 'SignedBlockHeader'
		if t.SignedBlockHeader, err = fn1(t.SignedBlockHeader, buf[131176:131384]); err != nil {
			return t, err
		}
		// Field #5 'KZGCommitmentInclusionProof'
		if t.KZGCommitmentInclusionProof, err = fn2(t.KZGCommitmentInclusionProof, buf[131384:131928]); err != nil {
			return t, err
		}
		return t, err
	}
	_, err = fn3(t, buf)
	return err
}

func (t *BlobSidecar) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *BlobSidecar) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t KZGCommitmentInclusionProof) (err error) { // deneb.KZGCommitmentInclusionProof:17:32
		idx := hh.Index()
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		hh.Merkleize(idx)
		return err
	}
	fn2 := func(t *BlobSidecar) (err error) { // *deneb.BlobSidecar
		idx := hh.Index()
		// Field #0 'Index'
		hh.PutUint64(uint64(t.Index))
		// Field #1 'Blob'
		hh.PutBytes(t.Blob[:])
		// Field #2 'KZGCommitment'
		hh.PutBytes(t.KZGCommitment[:])
		// Field #3 'KZGProof'
		hh.PutBytes(t.KZGProof[:])
		// Field #4 'SignedBlockHeader'
		if err = t.SignedBlockHeader.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #5 'KZGCommitmentInclusionProof'
		if err = fn1(t.KZGCommitmentInclusionProof); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *BlobSidecar) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *BlobSidecar) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
