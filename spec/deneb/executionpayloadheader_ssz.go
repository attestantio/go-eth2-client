// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 8359ea5a5cd25797d6ccb6f7b08b8175c54c77732bd5e73d63a6c4bb0424dc0a
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package deneb

import (
	"github.com/holiman/uint256"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionPayloadHeader) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ExecutionPayloadHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(ExecutionPayloadHeader)
	}
	dstlen := len(dst)
	{ // Field #0 'ParentHash'
		dst = append(dst, []byte(t.ParentHash[:32])...)
	}
	{ // Field #1 'FeeRecipient'
		dst = append(dst, []byte(t.FeeRecipient[:20])...)
	}
	{ // Field #2 'StateRoot'
		dst = append(dst, []byte(t.StateRoot[:32])...)
	}
	{ // Field #3 'ReceiptsRoot'
		dst = append(dst, []byte(t.ReceiptsRoot[:32])...)
	}
	{ // Field #4 'LogsBloom'
		dst = append(dst, []byte(t.LogsBloom[:256])...)
	}
	{ // Field #5 'PrevRandao'
		dst = append(dst, []byte(t.PrevRandao[:32])...)
	}
	{ // Field #6 'BlockNumber'
		dst = sszutils.MarshalUint64(dst, uint64(t.BlockNumber))
	}
	{ // Field #7 'GasLimit'
		dst = sszutils.MarshalUint64(dst, uint64(t.GasLimit))
	}
	{ // Field #8 'GasUsed'
		dst = sszutils.MarshalUint64(dst, uint64(t.GasUsed))
	}
	{ // Field #9 'Timestamp'
		dst = sszutils.MarshalUint64(dst, uint64(t.Timestamp))
	}
	// Offset #10 'ExtraData'
	offset10 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #11 'BaseFeePerGas'
		t := t.BaseFeePerGas
		if t == nil {
			t = new(uint256.Int)
		}
		for i := 0; i < 4; i++ {
			dst = sszutils.MarshalUint64(dst, uint64(t[i]))
		}
	}
	{ // Field #12 'BlockHash'
		dst = append(dst, []byte(t.BlockHash[:32])...)
	}
	{ // Field #13 'TransactionsRoot'
		dst = append(dst, []byte(t.TransactionsRoot[:32])...)
	}
	{ // Field #14 'WithdrawalsRoot'
		dst = append(dst, []byte(t.WithdrawalsRoot[:32])...)
	}
	{ // Field #15 'BlobGasUsed'
		dst = sszutils.MarshalUint64(dst, uint64(t.BlobGasUsed))
	}
	{ // Field #16 'ExcessBlobGas'
		dst = sszutils.MarshalUint64(dst, uint64(t.ExcessBlobGas))
	}
	{ // Dynamic Field #10 'ExtraData'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		vlen := len(t.ExtraData)
		if vlen > 32 {
			return dst, sszutils.ErrListTooBig
		}
		dst = append(dst, []byte(t.ExtraData[:])...)
	}
	return dst, nil
}

func (t *ExecutionPayloadHeader) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 584 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'ParentHash' (static)
		buf := buf[0:32]
		copy(t.ParentHash[:], buf)
	}
	{ // Field #1 'FeeRecipient' (static)
		buf := buf[32:52]
		copy(t.FeeRecipient[:], buf)
	}
	{ // Field #2 'StateRoot' (static)
		buf := buf[52:84]
		copy(t.StateRoot[:], buf)
	}
	{ // Field #3 'ReceiptsRoot' (static)
		buf := buf[84:116]
		copy(t.ReceiptsRoot[:], buf)
	}
	{ // Field #4 'LogsBloom' (static)
		buf := buf[116:372]
		copy(t.LogsBloom[:], buf)
	}
	{ // Field #5 'PrevRandao' (static)
		buf := buf[372:404]
		copy(t.PrevRandao[:], buf)
	}
	{ // Field #6 'BlockNumber' (static)
		buf := buf[404:412]
		t.BlockNumber = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #7 'GasLimit' (static)
		buf := buf[412:420]
		t.GasLimit = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #8 'GasUsed' (static)
		buf := buf[420:428]
		t.GasUsed = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #9 'Timestamp' (static)
		buf := buf[428:436]
		t.Timestamp = uint64(sszutils.UnmarshallUint64(buf))
	}
	// Field #10 'ExtraData' (offset)
	offset10 := int(sszutils.UnmarshallUint32(buf[436:440]))
	if offset10 != 584 {
		return sszutils.ErrOffset
	}
	{ // Field #11 'BaseFeePerGas' (static)
		buf := buf[440:472]
		val1 := t.BaseFeePerGas
		if val1 == nil {
			val1 = new(uint256.Int)
		}
		for i := 0; i < 4; i++ {
			buf := buf[8*i : 8*(i+1)]
			val1[i] = uint64(sszutils.UnmarshallUint64(buf))
		}
		t.BaseFeePerGas = val1
	}
	{ // Field #12 'BlockHash' (static)
		buf := buf[472:504]
		copy(t.BlockHash[:], buf)
	}
	{ // Field #13 'TransactionsRoot' (static)
		buf := buf[504:536]
		copy(t.TransactionsRoot[:], buf)
	}
	{ // Field #14 'WithdrawalsRoot' (static)
		buf := buf[536:568]
		copy(t.WithdrawalsRoot[:], buf)
	}
	{ // Field #15 'BlobGasUsed' (static)
		buf := buf[568:576]
		t.BlobGasUsed = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #16 'ExcessBlobGas' (static)
		buf := buf[576:584]
		t.ExcessBlobGas = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #10 'ExtraData' (dynamic)
		buf := buf[offset10:]
		val2 := t.ExtraData
		val2 = sszutils.ExpandSlice(val2, len(buf))
		copy(val2[:], buf)
		t.ExtraData = val2
	}
	return nil
}

func (t *ExecutionPayloadHeader) SizeSSZ() (size int) {
	if t == nil {
		t = new(ExecutionPayloadHeader)
	}
	// Field #0 'ParentHash' static (32 bytes)
	// Field #1 'FeeRecipient' static (20 bytes)
	// Field #2 'StateRoot' static (32 bytes)
	// Field #3 'ReceiptsRoot' static (32 bytes)
	// Field #4 'LogsBloom' static (256 bytes)
	// Field #5 'PrevRandao' static (32 bytes)
	// Field #6 'BlockNumber' static (8 bytes)
	// Field #7 'GasLimit' static (8 bytes)
	// Field #8 'GasUsed' static (8 bytes)
	// Field #9 'Timestamp' static (8 bytes)
	// Field #10 'ExtraData' offset (4 bytes)
	// Field #11 'BaseFeePerGas' static (32 bytes)
	// Field #12 'BlockHash' static (32 bytes)
	// Field #13 'TransactionsRoot' static (32 bytes)
	// Field #14 'WithdrawalsRoot' static (32 bytes)
	// Field #15 'BlobGasUsed' static (8 bytes)
	// Field #16 'ExcessBlobGas' static (8 bytes)
	size += 584
	{ // Dynamic field #10 'ExtraData'
		size += len(t.ExtraData)
	}
	return size
}

func (t *ExecutionPayloadHeader) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *ExecutionPayloadHeader) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(ExecutionPayloadHeader)
	}
	idx := hh.Index()
	{ // Field #0 'ParentHash'
		hh.PutBytes(t.ParentHash[:32])
	}
	{ // Field #1 'FeeRecipient'
		hh.PutBytes(t.FeeRecipient[:20])
	}
	{ // Field #2 'StateRoot'
		hh.PutBytes(t.StateRoot[:32])
	}
	{ // Field #3 'ReceiptsRoot'
		hh.PutBytes(t.ReceiptsRoot[:32])
	}
	{ // Field #4 'LogsBloom'
		hh.PutBytes(t.LogsBloom[:256])
	}
	{ // Field #5 'PrevRandao'
		hh.PutBytes(t.PrevRandao[:32])
	}
	{ // Field #6 'BlockNumber'
		hh.PutUint64(uint64(t.BlockNumber))
	}
	{ // Field #7 'GasLimit'
		hh.PutUint64(uint64(t.GasLimit))
	}
	{ // Field #8 'GasUsed'
		hh.PutUint64(uint64(t.GasUsed))
	}
	{ // Field #9 'Timestamp'
		hh.PutUint64(uint64(t.Timestamp))
	}
	{ // Field #10 'ExtraData'
		vlen := uint64(len(t.ExtraData))
		if vlen > 32 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.PutBytes(t.ExtraData[:])
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(32, vlen, 1))
	}
	{ // Field #11 'BaseFeePerGas'
		t := t.BaseFeePerGas
		if t == nil {
			t = new(uint256.Int)
		}
		if root, err := t.HashTreeRoot(); err != nil {
			return err
		} else {
			hh.AppendBytes32(root[:])
		}
	}
	{ // Field #12 'BlockHash'
		hh.PutBytes(t.BlockHash[:32])
	}
	{ // Field #13 'TransactionsRoot'
		hh.PutBytes(t.TransactionsRoot[:32])
	}
	{ // Field #14 'WithdrawalsRoot'
		hh.PutBytes(t.WithdrawalsRoot[:32])
	}
	{ // Field #15 'BlobGasUsed'
		hh.PutUint64(uint64(t.BlobGasUsed))
	}
	{ // Field #16 'ExcessBlobGas'
		hh.PutUint64(uint64(t.ExcessBlobGas))
	}
	hh.Merkleize(idx)
	return nil
}

