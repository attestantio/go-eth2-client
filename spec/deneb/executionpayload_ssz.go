// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: beadbd9909ee31ac6d35f332c53d11a2b26370855bfdc2eaf365bad5efcdd230
// Version: v0.0.0-20250923001904-cd6c84c23a24 (https://github.com/pk910/dynamic-ssz)
package deneb

import (
	"github.com/attestantio/go-eth2-client/spec/bellatrix"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/holiman/uint256"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *ExecutionPayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	{ // Field #0 'ParentHash'
		t := t.ParentHash
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #1 'FeeRecipient'
		t := t.FeeRecipient
		limit := 20
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #2 'StateRoot'
		t := t.StateRoot
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #3 'ReceiptsRoot'
		t := t.ReceiptsRoot
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #4 'LogsBloom'
		t := t.LogsBloom
		limit := 256
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #5 'PrevRandao'
		t := t.PrevRandao
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #6 'BlockNumber'
		t := t.BlockNumber
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #7 'GasLimit'
		t := t.GasLimit
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #8 'GasUsed'
		t := t.GasUsed
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #9 'Timestamp'
		t := t.Timestamp
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	// Offset #10 'ExtraData'
	offset10 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #11 'BaseFeePerGas'
		t := t.BaseFeePerGas
		limit := 4
		for i := 0; i < limit; i++ {
			t := t[i]
			dst = sszutils.MarshalUint64(dst, uint64(t))
		}
	}
	{ // Field #12 'BlockHash'
		t := t.BlockHash
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	// Offset #13 'Transactions'
	offset13 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #14 'Withdrawals'
	offset14 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #15 'BlobGasUsed'
		t := t.BlobGasUsed
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #16 'ExcessBlobGas'
		t := t.ExcessBlobGas
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Dynamic Field #10 'ExtraData'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		t := t.ExtraData
		max := 32
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		dst = append(dst, []byte(t[:])...)
	}
	{ // Dynamic Field #13 'Transactions'
		sszutils.UpdateOffset(dst[offset13:offset13+4], len(dst)-dstlen)
		t := t.Transactions
		max := 1048576
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			max := 1073741824
			hasMax := true
			vlen := len(t)
			if hasMax && vlen > int(max) {
				return dst, sszutils.ErrListTooBig
			}
			dst = append(dst, []byte(t[:])...)
		}
	}
	{ // Dynamic Field #14 'Withdrawals'
		sszutils.UpdateOffset(dst[offset14:offset14+4], len(dst)-dstlen)
		t := t.Withdrawals
		max := 16
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *ExecutionPayload) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ExecutionPayload) SizeSSZ() (size int) {
	size += 32 // Field #0 'ParentHash'
	size += 20 // Field #1 'FeeRecipient'
	size += 32 // Field #2 'StateRoot'
	size += 32 // Field #3 'ReceiptsRoot'
	size += 256 // Field #4 'LogsBloom'
	size += 32 // Field #5 'PrevRandao'
	size += 8 // Field #6 'BlockNumber'
	size += 8 // Field #7 'GasLimit'
	size += 8 // Field #8 'GasUsed'
	size += 8 // Field #9 'Timestamp'
	size += 4 // Offset for field #10 'ExtraData'
	size += 32 // Field #11 'BaseFeePerGas'
	size += 32 // Field #12 'BlockHash'
	size += 4 // Offset for field #13 'Transactions'
	size += 4 // Offset for field #14 'Withdrawals'
	size += 8 // Field #15 'BlobGasUsed'
	size += 8 // Field #16 'ExcessBlobGas'
	{ // Dynamic field #10 'ExtraData'
		size += len(t.ExtraData)
	}
	{ // Dynamic field #13 'Transactions'
		vlen := len(t.Transactions)
		size += vlen * 4 // Offsets
		for i := 0; i < vlen; i++ {
			t := t.Transactions[i]
			size += len(t)
		}
	}
	{ // Dynamic field #14 'Withdrawals'
		vlen := len(t.Withdrawals)
		size += vlen * 44
	}
	return size
}

func (t *ExecutionPayload) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 528 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'ParentHash' (static)
		buf := buf[0:32]
		val1 := t.ParentHash
		copy(val1[:], buf)
		t.ParentHash = val1
	}
	{ // Field #1 'FeeRecipient' (static)
		buf := buf[32:52]
		val2 := t.FeeRecipient
		copy(val2[:], buf)
		t.FeeRecipient = val2
	}
	{ // Field #2 'StateRoot' (static)
		buf := buf[52:84]
		val3 := t.StateRoot
		copy(val3[:], buf)
		t.StateRoot = val3
	}
	{ // Field #3 'ReceiptsRoot' (static)
		buf := buf[84:116]
		val4 := t.ReceiptsRoot
		copy(val4[:], buf)
		t.ReceiptsRoot = val4
	}
	{ // Field #4 'LogsBloom' (static)
		buf := buf[116:372]
		val5 := t.LogsBloom
		copy(val5[:], buf)
		t.LogsBloom = val5
	}
	{ // Field #5 'PrevRandao' (static)
		buf := buf[372:404]
		val6 := t.PrevRandao
		copy(val6[:], buf)
		t.PrevRandao = val6
	}
	{ // Field #6 'BlockNumber' (static)
		buf := buf[404:412]
		t.BlockNumber = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #7 'GasLimit' (static)
		buf := buf[412:420]
		t.GasLimit = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #8 'GasUsed' (static)
		buf := buf[420:428]
		t.GasUsed = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #9 'Timestamp' (static)
		buf := buf[428:436]
		t.Timestamp = uint64(sszutils.UnmarshallUint64(buf))
	}
	// Field #10 'ExtraData' (offset)
	offset10 := int(sszutils.UnmarshallUint32(buf[436:440]))
	if offset10 < 528 || offset10 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #11 'BaseFeePerGas' (static)
		buf := buf[440:472]
		val7 := t.BaseFeePerGas
		if val7 == nil {
			val7 = new(uint256.Int)
		}
		for i := 0; i < 4; i++ {
			buf := buf[8*i:8*(i+1)]
			val7[i] = uint64(sszutils.UnmarshallUint64(buf))
		}
		t.BaseFeePerGas = val7
	}
	{ // Field #12 'BlockHash' (static)
		buf := buf[472:504]
		val8 := t.BlockHash
		copy(val8[:], buf)
		t.BlockHash = val8
	}
	// Field #13 'Transactions' (offset)
	offset13 := int(sszutils.UnmarshallUint32(buf[504:508]))
	if offset13 < offset10 || offset13 > buflen {
		return sszutils.ErrOffset
	}
	// Field #14 'Withdrawals' (offset)
	offset14 := int(sszutils.UnmarshallUint32(buf[508:512]))
	if offset14 < offset13 || offset14 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #15 'BlobGasUsed' (static)
		buf := buf[512:520]
		t.BlobGasUsed = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #16 'ExcessBlobGas' (static)
		buf := buf[520:528]
		t.ExcessBlobGas = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #10 'ExtraData' (dynamic)
		buf := buf[offset10:offset13]
		val9 := t.ExtraData
		limit := len(buf)
		if(len(val9) < limit) {
			val9 = make([]byte, limit)
		} else if(len(val9) > limit) {
			val9 = val9[:limit]
		}
		copy(val9[:], buf)
		t.ExtraData = val9
	}
	{ // Field #13 'Transactions' (dynamic)
		buf := buf[offset13:offset14]
		val10 := t.Transactions
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset/4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val10) < itemCount) {
			val10 = make([]bellatrix.Transaction, itemCount)
		} else if(len(val10) > itemCount) {
			val10 = val10[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4:(i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val11 := val10[i]
			limit := len(buf)
			if(len(val11) < limit) {
				val11 = make(bellatrix.Transaction, limit)
			} else if(len(val11) > limit) {
				val11 = val11[:limit]
			}
			copy(val11[:], buf)
			val10[i] = val11
		}
		t.Transactions = val10
	}
	{ // Field #14 'Withdrawals' (dynamic)
		buf := buf[offset14:]
		val12 := t.Withdrawals
		itemCount := len(buf)/44
		if len(buf)%44 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if(len(val12) < itemCount) {
			val12 = make([]*capella.Withdrawal, itemCount)
		} else if(len(val12) > itemCount) {
			val12 = val12[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val13 := val12[i]
			if val13 == nil {
				val13 = new(capella.Withdrawal)
			}
			buf := buf[44*i:44*(i+1)]
			if err = val13.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val12[i] = val13
		}
		t.Withdrawals = val12
	}
	return nil
}

func (t *ExecutionPayload) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'ParentHash'
		t := t.ParentHash
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #1 'FeeRecipient'
		t := t.FeeRecipient
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #2 'StateRoot'
		t := t.StateRoot
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #3 'ReceiptsRoot'
		t := t.ReceiptsRoot
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #4 'LogsBloom'
		t := t.LogsBloom
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #5 'PrevRandao'
		t := t.PrevRandao
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #6 'BlockNumber'
		t := t.BlockNumber
		hh.PutUint64(uint64(t))
	}
	{ // Field #7 'GasLimit'
		t := t.GasLimit
		hh.PutUint64(uint64(t))
	}
	{ // Field #8 'GasUsed'
		t := t.GasUsed
		hh.PutUint64(uint64(t))
	}
	{ // Field #9 'Timestamp'
		t := t.Timestamp
		hh.PutUint64(uint64(t))
	}
	{ // Field #10 'ExtraData'
		t := t.ExtraData
		idx := hh.Index()
		vlen := uint64(len(t))
		hh.PutBytes(t[:])
		limit := sszutils.CalculateLimit(32, vlen, 1)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #11 'BaseFeePerGas'
		t := t.BaseFeePerGas
		vlen := len(t)
		for i := 0; i < 4; i++ {
			var val1 uint64
			if i < vlen {
				val1 = t[i]
			}
			hh.AppendUint64(uint64(val1))
		}
	}
	{ // Field #12 'BlockHash'
		t := t.BlockHash
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #13 'Transactions'
		t := t.Transactions
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			idx := hh.Index()
			vlen := uint64(len(t))
			hh.PutBytes(t[:])
			limit := sszutils.CalculateLimit(1073741824, vlen, 1)
			hh.MerkleizeWithMixin(idx, vlen, limit)
		}
		limit := sszutils.CalculateLimit(1048576, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #14 'Withdrawals'
		t := t.Withdrawals
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := sszutils.CalculateLimit(16, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #15 'BlobGasUsed'
		t := t.BlobGasUsed
		hh.PutUint64(uint64(t))
	}
	{ // Field #16 'ExcessBlobGas'
		t := t.ExcessBlobGas
		hh.PutUint64(uint64(t))
	}
	hh.Merkleize(idx)
	return nil
}

func (t *ExecutionPayload) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
