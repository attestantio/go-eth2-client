// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 6f4b1160cb2da99c1e43665e5ef42dafaa60f2a280d4b39a2ecad9407356f755
// Version: v1.1.1 (https://github.com/pk910/dynamic-ssz)
package deneb

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BlobIdentifier) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BlobIdentifier) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(BlobIdentifier)
	}
	{ // Field #0 'BlockRoot'
		dst = append(dst, []byte(t.BlockRoot[:32])...)
	}
	{ // Field #1 'Index'
		dst = sszutils.MarshalUint64(dst, uint64(t.Index))
	}
	return dst, nil
}

func (t *BlobIdentifier) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 40 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'BlockRoot' (static)
		buf := buf[0:32]
		copy(t.BlockRoot[:], buf)
	}
	{ // Field #1 'Index' (static)
		buf := buf[32:40]
		t.Index = BlobIndex(sszutils.UnmarshallUint64(buf))
	}
	return nil
}

func (t *BlobIdentifier) SizeSSZ() (size int) {
	return 40
}

func (t *BlobIdentifier) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *BlobIdentifier) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(BlobIdentifier)
	}
	idx := hh.Index()
	{ // Field #0 'BlockRoot'
		hh.PutBytes(t.BlockRoot[:32])
	}
	{ // Field #1 'Index'
		hh.PutUint64(uint64(t.Index))
	}
	hh.Merkleize(idx)
	return nil
}

