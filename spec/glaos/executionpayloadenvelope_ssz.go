// Code generated by fastssz. DO NOT EDIT.
// Hash: 4cbe03dabc40614ee402da5e2ab88cdc39c49eaa385eacf60f8150d6cdd01dcb
// Version: 0.1.3
package glaos

import (
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/electra"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ExecutionPayloadEnvelope object
func (e *ExecutionPayloadEnvelope) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionPayloadEnvelope object to a target array
func (e *ExecutionPayloadEnvelope) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(92)

	// Offset (0) 'Payload'
	dst = ssz.WriteOffset(dst, offset)
	if e.Payload == nil {
		e.Payload = new(deneb.ExecutionPayload)
	}
	offset += e.Payload.SizeSSZ()

	// Offset (1) 'ExecutionRequests'
	dst = ssz.WriteOffset(dst, offset)
	if e.ExecutionRequests == nil {
		e.ExecutionRequests = new(electra.ExecutionRequests)
	}
	offset += e.ExecutionRequests.SizeSSZ()

	// Field (2) 'BuilderIndex'
	dst = ssz.MarshalUint64(dst, uint64(e.BuilderIndex))

	// Field (3) 'BeaconBlockRoot'
	dst = append(dst, e.BeaconBlockRoot[:]...)

	// Field (4) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(e.Slot))

	// Offset (5) 'BlobKZGCommitments'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.BlobKZGCommitments) * 48

	// Field (6) 'StateRoot'
	dst = append(dst, e.StateRoot[:]...)

	// Field (0) 'Payload'
	if dst, err = e.Payload.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'ExecutionRequests'
	if dst, err = e.ExecutionRequests.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'BlobKZGCommitments'
	if size := len(e.BlobKZGCommitments); size > 4096 {
		err = ssz.ErrListTooBigFn("ExecutionPayloadEnvelope.BlobKZGCommitments", size, 4096)
		return
	}
	for ii := 0; ii < len(e.BlobKZGCommitments); ii++ {
		dst = append(dst, e.BlobKZGCommitments[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionPayloadEnvelope object
func (e *ExecutionPayloadEnvelope) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 92 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o5 uint64

	// Offset (0) 'Payload'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 92 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'ExecutionRequests'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'BuilderIndex'
	e.BuilderIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[8:16]))

	// Field (3) 'BeaconBlockRoot'
	copy(e.BeaconBlockRoot[:], buf[16:48])

	// Field (4) 'Slot'
	e.Slot = phase0.Slot(ssz.UnmarshallUint64(buf[48:56]))

	// Offset (5) 'BlobKZGCommitments'
	if o5 = ssz.ReadOffset(buf[56:60]); o5 > size || o1 > o5 {
		return ssz.ErrOffset
	}

	// Field (6) 'StateRoot'
	copy(e.StateRoot[:], buf[60:92])

	// Field (0) 'Payload'
	{
		buf = tail[o0:o1]
		if e.Payload == nil {
			e.Payload = new(deneb.ExecutionPayload)
		}
		if err = e.Payload.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'ExecutionRequests'
	{
		buf = tail[o1:o5]
		if e.ExecutionRequests == nil {
			e.ExecutionRequests = new(electra.ExecutionRequests)
		}
		if err = e.ExecutionRequests.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (5) 'BlobKZGCommitments'
	{
		buf = tail[o5:]
		num, err := ssz.DivideInt2(len(buf), 48, 4096)
		if err != nil {
			return err
		}
		e.BlobKZGCommitments = make([]deneb.KZGCommitment, num)
		for ii := 0; ii < num; ii++ {
			copy(e.BlobKZGCommitments[ii][:], buf[ii*48:(ii+1)*48])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionPayloadEnvelope object
func (e *ExecutionPayloadEnvelope) SizeSSZ() (size int) {
	size = 92

	// Field (0) 'Payload'
	if e.Payload == nil {
		e.Payload = new(deneb.ExecutionPayload)
	}
	size += e.Payload.SizeSSZ()

	// Field (1) 'ExecutionRequests'
	if e.ExecutionRequests == nil {
		e.ExecutionRequests = new(electra.ExecutionRequests)
	}
	size += e.ExecutionRequests.SizeSSZ()

	// Field (5) 'BlobKZGCommitments'
	size += len(e.BlobKZGCommitments) * 48

	return
}

// HashTreeRoot ssz hashes the ExecutionPayloadEnvelope object
func (e *ExecutionPayloadEnvelope) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionPayloadEnvelope object with a hasher
func (e *ExecutionPayloadEnvelope) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Payload'
	if err = e.Payload.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'ExecutionRequests'
	if err = e.ExecutionRequests.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'BuilderIndex'
	hh.PutUint64(uint64(e.BuilderIndex))

	// Field (3) 'BeaconBlockRoot'
	hh.PutBytes(e.BeaconBlockRoot[:])

	// Field (4) 'Slot'
	hh.PutUint64(uint64(e.Slot))

	// Field (5) 'BlobKZGCommitments'
	{
		if size := len(e.BlobKZGCommitments); size > 4096 {
			err = ssz.ErrListTooBigFn("ExecutionPayloadEnvelope.BlobKZGCommitments", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range e.BlobKZGCommitments {
			hh.PutBytes(i[:])
		}
		numItems := uint64(len(e.BlobKZGCommitments))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	// Field (6) 'StateRoot'
	hh.PutBytes(e.StateRoot[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ExecutionPayloadEnvelope object
func (e *ExecutionPayloadEnvelope) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}
