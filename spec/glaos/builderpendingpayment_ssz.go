// Code generated by fastssz. DO NOT EDIT.
// Hash: a3493a1cec3e170b95d55d5315ab000397a5d9104219c9f69b8c34a926a5370e
// Version: 0.1.3
package glaos

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BuilderPendingPayment object
func (b *BuilderPendingPayment) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BuilderPendingPayment object to a target array
func (b *BuilderPendingPayment) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Weight'
	dst = ssz.MarshalUint64(dst, uint64(b.Weight))

	// Field (1) 'Withdrawal'
	if b.Withdrawal == nil {
		b.Withdrawal = new(BuilderPendingWithdrawal)
	}
	if dst, err = b.Withdrawal.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BuilderPendingPayment object
func (b *BuilderPendingPayment) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 52 {
		return ssz.ErrSize
	}

	// Field (0) 'Weight'
	b.Weight = phase0.Gwei(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Withdrawal'
	if b.Withdrawal == nil {
		b.Withdrawal = new(BuilderPendingWithdrawal)
	}
	if err = b.Withdrawal.UnmarshalSSZ(buf[8:52]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BuilderPendingPayment object
func (b *BuilderPendingPayment) SizeSSZ() (size int) {
	size = 52
	return
}

// HashTreeRoot ssz hashes the BuilderPendingPayment object
func (b *BuilderPendingPayment) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BuilderPendingPayment object with a hasher
func (b *BuilderPendingPayment) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Weight'
	hh.PutUint64(uint64(b.Weight))

	// Field (1) 'Withdrawal'
	if b.Withdrawal == nil {
		b.Withdrawal = new(BuilderPendingWithdrawal)
	}
	if err = b.Withdrawal.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BuilderPendingPayment object
func (b *BuilderPendingPayment) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
