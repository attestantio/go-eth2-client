// Code generated by fastssz. DO NOT EDIT.
// Hash: 62f3dd270b2b2e69b18a3b7ca2c7cfbe48dcbd02d05d7c7f2e015bed0cda1fee
// Version: 0.1.3
package glaos

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ExecutionPayloadHeader object
func (e *ExecutionPayloadHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionPayloadHeader object to a target array
func (e *ExecutionPayloadHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ParentBlockHash'
	dst = append(dst, e.ParentBlockHash[:]...)

	// Field (1) 'ParentBlockRoot'
	dst = append(dst, e.ParentBlockRoot[:]...)

	// Field (2) 'BlockHash'
	dst = append(dst, e.BlockHash[:]...)

	// Field (3) 'GasLimit'
	dst = ssz.MarshalUint64(dst, e.GasLimit)

	// Field (4) 'BuilderIndex'
	dst = ssz.MarshalUint64(dst, uint64(e.BuilderIndex))

	// Field (5) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(e.Slot))

	// Field (6) 'Value'
	dst = ssz.MarshalUint64(dst, e.Value)

	// Field (7) 'BlobKZGCommitmentsRoot'
	dst = append(dst, e.BlobKZGCommitmentsRoot[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionPayloadHeader object
func (e *ExecutionPayloadHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 160 {
		return ssz.ErrSize
	}

	// Field (0) 'ParentBlockHash'
	copy(e.ParentBlockHash[:], buf[0:32])

	// Field (1) 'ParentBlockRoot'
	copy(e.ParentBlockRoot[:], buf[32:64])

	// Field (2) 'BlockHash'
	copy(e.BlockHash[:], buf[64:96])

	// Field (3) 'GasLimit'
	e.GasLimit = ssz.UnmarshallUint64(buf[96:104])

	// Field (4) 'BuilderIndex'
	e.BuilderIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[104:112]))

	// Field (5) 'Slot'
	e.Slot = phase0.Slot(ssz.UnmarshallUint64(buf[112:120]))

	// Field (6) 'Value'
	e.Value = ssz.UnmarshallUint64(buf[120:128])

	// Field (7) 'BlobKZGCommitmentsRoot'
	copy(e.BlobKZGCommitmentsRoot[:], buf[128:160])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionPayloadHeader object
func (e *ExecutionPayloadHeader) SizeSSZ() (size int) {
	size = 160
	return
}

// HashTreeRoot ssz hashes the ExecutionPayloadHeader object
func (e *ExecutionPayloadHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionPayloadHeader object with a hasher
func (e *ExecutionPayloadHeader) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ParentBlockHash'
	hh.PutBytes(e.ParentBlockHash[:])

	// Field (1) 'ParentBlockRoot'
	hh.PutBytes(e.ParentBlockRoot[:])

	// Field (2) 'BlockHash'
	hh.PutBytes(e.BlockHash[:])

	// Field (3) 'GasLimit'
	hh.PutUint64(e.GasLimit)

	// Field (4) 'BuilderIndex'
	hh.PutUint64(uint64(e.BuilderIndex))

	// Field (5) 'Slot'
	hh.PutUint64(uint64(e.Slot))

	// Field (6) 'Value'
	hh.PutUint64(e.Value)

	// Field (7) 'BlobKZGCommitmentsRoot'
	hh.PutBytes(e.BlobKZGCommitmentsRoot[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ExecutionPayloadHeader object
func (e *ExecutionPayloadHeader) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}
