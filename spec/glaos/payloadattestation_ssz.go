// Code generated by fastssz. DO NOT EDIT.
// Hash: 75465117eb983b2120becf03607ee67db3e49d127bcf7e8e3bd576d6ef79452f
// Version: 0.1.3
package glaos

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PayloadAttestation object
func (p *PayloadAttestation) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PayloadAttestation object to a target array
func (p *PayloadAttestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(141)

	// Offset (0) 'AggregationBits'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.AggregationBits)

	// Field (1) 'Data'
	if p.Data == nil {
		p.Data = new(PayloadAttestationData)
	}
	if dst, err = p.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'Signature'
	dst = append(dst, p.Signature[:]...)

	// Field (0) 'AggregationBits'
	if size := len(p.AggregationBits); size > 64 {
		err = ssz.ErrBytesLengthFn("PayloadAttestation.AggregationBits", size, 64)
		return
	}
	dst = append(dst, p.AggregationBits...)

	return
}

// UnmarshalSSZ ssz unmarshals the PayloadAttestation object
func (p *PayloadAttestation) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 141 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'AggregationBits'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 141 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Data'
	if p.Data == nil {
		p.Data = new(PayloadAttestationData)
	}
	if err = p.Data.UnmarshalSSZ(buf[4:45]); err != nil {
		return err
	}

	// Field (2) 'Signature'
	copy(p.Signature[:], buf[45:141])

	// Field (0) 'AggregationBits'
	{
		buf = tail[o0:]
		if err = ssz.ValidateBitlist(buf, 64); err != nil {
			return err
		}
		if cap(p.AggregationBits) == 0 {
			p.AggregationBits = make([]byte, 0, len(buf))
		}
		p.AggregationBits = append(p.AggregationBits, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PayloadAttestation object
func (p *PayloadAttestation) SizeSSZ() (size int) {
	size = 141

	// Field (0) 'AggregationBits'
	size += len(p.AggregationBits)

	return
}

// HashTreeRoot ssz hashes the PayloadAttestation object
func (p *PayloadAttestation) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PayloadAttestation object with a hasher
func (p *PayloadAttestation) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'AggregationBits'
	if len(p.AggregationBits) == 0 {
		err = ssz.ErrEmptyBitlist
		return
	}
	hh.PutBitlist(p.AggregationBits, 64)

	// Field (1) 'Data'
	if p.Data == nil {
		p.Data = new(PayloadAttestationData)
	}
	if err = p.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'Signature'
	hh.PutBytes(p.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PayloadAttestation object
func (p *PayloadAttestation) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
