// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 1225c615cd5fcc0bf4ab99acb79d0a5363df22b67ddc2100f0ef06d98c068978
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package fulu

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/electra"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BeaconState) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BeaconState) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(BeaconState)
	}
	dstlen := len(dst)
	{ // Field #0 'GenesisTime'
		dst = sszutils.MarshalUint64(dst, uint64(t.GenesisTime))
	}
	{ // Field #1 'GenesisValidatorsRoot'
		dst = append(dst, []byte(t.GenesisValidatorsRoot[:32])...)
	}
	{ // Field #2 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
	}
	{ // Field #3 'Fork'
		t := t.Fork
		if t == nil {
			t = new(phase0.Fork)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #4 'LatestBlockHeader'
		t := t.LatestBlockHeader
		if t == nil {
			t = new(phase0.BeaconBlockHeader)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #5 'BlockRoots'
		t := t.BlockRoots
		vlen := len(t)
		if vlen > 8192 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			dst = append(dst, []byte(t[i][:32])...)
		}
		if vlen < 8192 {
			dst = sszutils.AppendZeroPadding(dst, (8192-vlen)*32)
		}
	}
	{ // Field #6 'StateRoots'
		t := t.StateRoots
		vlen := len(t)
		if vlen > 8192 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			dst = append(dst, []byte(t[i][:32])...)
		}
		if vlen < 8192 {
			dst = sszutils.AppendZeroPadding(dst, (8192-vlen)*32)
		}
	}
	// Offset #7 'HistoricalRoots'
	offset7 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #8 'ETH1Data'
		t := t.ETH1Data
		if t == nil {
			t = new(phase0.ETH1Data)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	// Offset #9 'ETH1DataVotes'
	offset9 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #10 'ETH1DepositIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ETH1DepositIndex))
	}
	// Offset #11 'Validators'
	offset11 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #12 'Balances'
	offset12 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #13 'RANDAOMixes'
		t := t.RANDAOMixes
		vlen := len(t)
		if vlen > 65536 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			dst = append(dst, []byte(t[i][:32])...)
		}
		if vlen < 65536 {
			dst = sszutils.AppendZeroPadding(dst, (65536-vlen)*32)
		}
	}
	{ // Field #14 'Slashings'
		t := t.Slashings
		vlen := len(t)
		if vlen > 8192 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			dst = sszutils.MarshalUint64(dst, uint64(t[i]))
		}
		if vlen < 8192 {
			dst = sszutils.AppendZeroPadding(dst, (8192-vlen)*8)
		}
	}
	// Offset #15 'PreviousEpochParticipation'
	offset15 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #16 'CurrentEpochParticipation'
	offset16 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #17 'JustificationBits'
		vlen := len(t.JustificationBits)
		if vlen > 1 {
			return dst, sszutils.ErrVectorLength
		}
		dst = append(dst, []byte(t.JustificationBits[:vlen])...)
		if vlen < 1 {
			dst = sszutils.AppendZeroPadding(dst, (1-vlen)*1)
		}
	}
	{ // Field #18 'PreviousJustifiedCheckpoint'
		t := t.PreviousJustifiedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #19 'CurrentJustifiedCheckpoint'
		t := t.CurrentJustifiedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #20 'FinalizedCheckpoint'
		t := t.FinalizedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	// Offset #21 'InactivityScores'
	offset21 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #22 'CurrentSyncCommittee'
		t := t.CurrentSyncCommittee
		if t == nil {
			t = new(altair.SyncCommittee)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #23 'NextSyncCommittee'
		t := t.NextSyncCommittee
		if t == nil {
			t = new(altair.SyncCommittee)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	// Offset #24 'LatestExecutionPayloadHeader'
	offset24 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #25 'NextWithdrawalIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.NextWithdrawalIndex))
	}
	{ // Field #26 'NextWithdrawalValidatorIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.NextWithdrawalValidatorIndex))
	}
	// Offset #27 'HistoricalSummaries'
	offset27 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #28 'DepositRequestsStartIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.DepositRequestsStartIndex))
	}
	{ // Field #29 'DepositBalanceToConsume'
		dst = sszutils.MarshalUint64(dst, uint64(t.DepositBalanceToConsume))
	}
	{ // Field #30 'ExitBalanceToConsume'
		dst = sszutils.MarshalUint64(dst, uint64(t.ExitBalanceToConsume))
	}
	{ // Field #31 'EarliestExitEpoch'
		dst = sszutils.MarshalUint64(dst, uint64(t.EarliestExitEpoch))
	}
	{ // Field #32 'ConsolidationBalanceToConsume'
		dst = sszutils.MarshalUint64(dst, uint64(t.ConsolidationBalanceToConsume))
	}
	{ // Field #33 'EarliestConsolidationEpoch'
		dst = sszutils.MarshalUint64(dst, uint64(t.EarliestConsolidationEpoch))
	}
	// Offset #34 'PendingDeposits'
	offset34 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #35 'PendingPartialWithdrawals'
	offset35 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #36 'PendingConsolidations'
	offset36 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #37 'ProposerLookahead'
		t := t.ProposerLookahead
		vlen := len(t)
		if vlen > 64 {
			return dst, sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			dst = sszutils.MarshalUint64(dst, uint64(t[i]))
		}
		if vlen < 64 {
			dst = sszutils.AppendZeroPadding(dst, (64-vlen)*8)
		}
	}
	{ // Dynamic Field #7 'HistoricalRoots'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		t := t.HistoricalRoots
		vlen := len(t)
		if vlen > 16777216 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			dst = append(dst, []byte(t[i][:32])...)
		}
	}
	{ // Dynamic Field #9 'ETH1DataVotes'
		sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
		t := t.ETH1DataVotes
		vlen := len(t)
		if vlen > 2048 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.ETH1Data)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #11 'Validators'
		sszutils.UpdateOffset(dst[offset11:offset11+4], len(dst)-dstlen)
		t := t.Validators
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.Validator)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #12 'Balances'
		sszutils.UpdateOffset(dst[offset12:offset12+4], len(dst)-dstlen)
		t := t.Balances
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			dst = sszutils.MarshalUint64(dst, uint64(t[i]))
		}
	}
	{ // Dynamic Field #15 'PreviousEpochParticipation'
		sszutils.UpdateOffset(dst[offset15:offset15+4], len(dst)-dstlen)
		t := t.PreviousEpochParticipation
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			dst = sszutils.MarshalUint8(dst, uint8(t[i]))
		}
	}
	{ // Dynamic Field #16 'CurrentEpochParticipation'
		sszutils.UpdateOffset(dst[offset16:offset16+4], len(dst)-dstlen)
		t := t.CurrentEpochParticipation
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			dst = sszutils.MarshalUint8(dst, uint8(t[i]))
		}
	}
	{ // Dynamic Field #21 'InactivityScores'
		sszutils.UpdateOffset(dst[offset21:offset21+4], len(dst)-dstlen)
		t := t.InactivityScores
		vlen := len(t)
		if vlen > 1099511627776 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			dst = sszutils.MarshalUint64(dst, uint64(t[i]))
		}
	}
	{ // Dynamic Field #24 'LatestExecutionPayloadHeader'
		sszutils.UpdateOffset(dst[offset24:offset24+4], len(dst)-dstlen)
		t := t.LatestExecutionPayloadHeader
		if t == nil {
			t = new(deneb.ExecutionPayloadHeader)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #27 'HistoricalSummaries'
		sszutils.UpdateOffset(dst[offset27:offset27+4], len(dst)-dstlen)
		t := t.HistoricalSummaries
		vlen := len(t)
		if vlen > 16777216 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(capella.HistoricalSummary)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #34 'PendingDeposits'
		sszutils.UpdateOffset(dst[offset34:offset34+4], len(dst)-dstlen)
		t := t.PendingDeposits
		vlen := len(t)
		if vlen > 134217728 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(electra.PendingDeposit)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #35 'PendingPartialWithdrawals'
		sszutils.UpdateOffset(dst[offset35:offset35+4], len(dst)-dstlen)
		t := t.PendingPartialWithdrawals
		vlen := len(t)
		if vlen > 134217728 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(electra.PendingPartialWithdrawal)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #36 'PendingConsolidations'
		sszutils.UpdateOffset(dst[offset36:offset36+4], len(dst)-dstlen)
		t := t.PendingConsolidations
		vlen := len(t)
		if vlen > 262144 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(electra.PendingConsolidation)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	return dst, nil
}

func (t *BeaconState) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 2737225 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'GenesisTime' (static)
		buf := buf[0:8]
		t.GenesisTime = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'GenesisValidatorsRoot' (static)
		buf := buf[8:40]
		copy(t.GenesisValidatorsRoot[:], buf)
	}
	{ // Field #2 'Slot' (static)
		buf := buf[40:48]
		t.Slot = phase0.Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #3 'Fork' (static)
		buf := buf[48:64]
		if t.Fork == nil {
			t.Fork = new(phase0.Fork)
		}
		if err = t.Fork.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #4 'LatestBlockHeader' (static)
		buf := buf[64:176]
		if t.LatestBlockHeader == nil {
			t.LatestBlockHeader = new(phase0.BeaconBlockHeader)
		}
		if err = t.LatestBlockHeader.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #5 'BlockRoots' (static)
		buf := buf[176:262320]
		val1 := t.BlockRoots
		val1 = sszutils.ExpandSlice(val1, 8192)
		for i := 0; i < 8192; i++ {
			buf := buf[32*i : 32*(i+1)]
			copy(val1[i][:], buf)
		}
		t.BlockRoots = val1
	}
	{ // Field #6 'StateRoots' (static)
		buf := buf[262320:524464]
		val2 := t.StateRoots
		val2 = sszutils.ExpandSlice(val2, 8192)
		for i := 0; i < 8192; i++ {
			buf := buf[32*i : 32*(i+1)]
			copy(val2[i][:], buf)
		}
		t.StateRoots = val2
	}
	// Field #7 'HistoricalRoots' (offset)
	offset7 := int(sszutils.UnmarshallUint32(buf[524464:524468]))
	if offset7 != 2737225 {
		return sszutils.ErrOffset
	}
	{ // Field #8 'ETH1Data' (static)
		buf := buf[524468:524540]
		if t.ETH1Data == nil {
			t.ETH1Data = new(phase0.ETH1Data)
		}
		if err = t.ETH1Data.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	// Field #9 'ETH1DataVotes' (offset)
	offset9 := int(sszutils.UnmarshallUint32(buf[524540:524544]))
	if offset9 < offset7 || offset9 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #10 'ETH1DepositIndex' (static)
		buf := buf[524544:524552]
		t.ETH1DepositIndex = uint64(sszutils.UnmarshallUint64(buf))
	}
	// Field #11 'Validators' (offset)
	offset11 := int(sszutils.UnmarshallUint32(buf[524552:524556]))
	if offset11 < offset9 || offset11 > buflen {
		return sszutils.ErrOffset
	}
	// Field #12 'Balances' (offset)
	offset12 := int(sszutils.UnmarshallUint32(buf[524556:524560]))
	if offset12 < offset11 || offset12 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #13 'RANDAOMixes' (static)
		buf := buf[524560:2621712]
		val3 := t.RANDAOMixes
		val3 = sszutils.ExpandSlice(val3, 65536)
		for i := 0; i < 65536; i++ {
			buf := buf[32*i : 32*(i+1)]
			copy(val3[i][:], buf)
		}
		t.RANDAOMixes = val3
	}
	{ // Field #14 'Slashings' (static)
		buf := buf[2621712:2687248]
		val4 := t.Slashings
		val4 = sszutils.ExpandSlice(val4, 8192)
		for i := 0; i < 8192; i++ {
			buf := buf[8*i : 8*(i+1)]
			val4[i] = phase0.Gwei(sszutils.UnmarshallUint64(buf))
		}
		t.Slashings = val4
	}
	// Field #15 'PreviousEpochParticipation' (offset)
	offset15 := int(sszutils.UnmarshallUint32(buf[2687248:2687252]))
	if offset15 < offset12 || offset15 > buflen {
		return sszutils.ErrOffset
	}
	// Field #16 'CurrentEpochParticipation' (offset)
	offset16 := int(sszutils.UnmarshallUint32(buf[2687252:2687256]))
	if offset16 < offset15 || offset16 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #17 'JustificationBits' (static)
		buf := buf[2687256:2687257]
		t.JustificationBits = sszutils.ExpandSlice(t.JustificationBits, 1)
		copy(t.JustificationBits[:], buf)
	}
	{ // Field #18 'PreviousJustifiedCheckpoint' (static)
		buf := buf[2687257:2687297]
		if t.PreviousJustifiedCheckpoint == nil {
			t.PreviousJustifiedCheckpoint = new(phase0.Checkpoint)
		}
		if err = t.PreviousJustifiedCheckpoint.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #19 'CurrentJustifiedCheckpoint' (static)
		buf := buf[2687297:2687337]
		if t.CurrentJustifiedCheckpoint == nil {
			t.CurrentJustifiedCheckpoint = new(phase0.Checkpoint)
		}
		if err = t.CurrentJustifiedCheckpoint.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #20 'FinalizedCheckpoint' (static)
		buf := buf[2687337:2687377]
		if t.FinalizedCheckpoint == nil {
			t.FinalizedCheckpoint = new(phase0.Checkpoint)
		}
		if err = t.FinalizedCheckpoint.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	// Field #21 'InactivityScores' (offset)
	offset21 := int(sszutils.UnmarshallUint32(buf[2687377:2687381]))
	if offset21 < offset16 || offset21 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #22 'CurrentSyncCommittee' (static)
		buf := buf[2687381:2712005]
		if t.CurrentSyncCommittee == nil {
			t.CurrentSyncCommittee = new(altair.SyncCommittee)
		}
		if err = t.CurrentSyncCommittee.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #23 'NextSyncCommittee' (static)
		buf := buf[2712005:2736629]
		if t.NextSyncCommittee == nil {
			t.NextSyncCommittee = new(altair.SyncCommittee)
		}
		if err = t.NextSyncCommittee.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	// Field #24 'LatestExecutionPayloadHeader' (offset)
	offset24 := int(sszutils.UnmarshallUint32(buf[2736629:2736633]))
	if offset24 < offset21 || offset24 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #25 'NextWithdrawalIndex' (static)
		buf := buf[2736633:2736641]
		t.NextWithdrawalIndex = capella.WithdrawalIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #26 'NextWithdrawalValidatorIndex' (static)
		buf := buf[2736641:2736649]
		t.NextWithdrawalValidatorIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	// Field #27 'HistoricalSummaries' (offset)
	offset27 := int(sszutils.UnmarshallUint32(buf[2736649:2736653]))
	if offset27 < offset24 || offset27 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #28 'DepositRequestsStartIndex' (static)
		buf := buf[2736653:2736661]
		t.DepositRequestsStartIndex = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #29 'DepositBalanceToConsume' (static)
		buf := buf[2736661:2736669]
		t.DepositBalanceToConsume = phase0.Gwei(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #30 'ExitBalanceToConsume' (static)
		buf := buf[2736669:2736677]
		t.ExitBalanceToConsume = phase0.Gwei(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #31 'EarliestExitEpoch' (static)
		buf := buf[2736677:2736685]
		t.EarliestExitEpoch = phase0.Epoch(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #32 'ConsolidationBalanceToConsume' (static)
		buf := buf[2736685:2736693]
		t.ConsolidationBalanceToConsume = phase0.Gwei(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #33 'EarliestConsolidationEpoch' (static)
		buf := buf[2736693:2736701]
		t.EarliestConsolidationEpoch = phase0.Epoch(sszutils.UnmarshallUint64(buf))
	}
	// Field #34 'PendingDeposits' (offset)
	offset34 := int(sszutils.UnmarshallUint32(buf[2736701:2736705]))
	if offset34 < offset27 || offset34 > buflen {
		return sszutils.ErrOffset
	}
	// Field #35 'PendingPartialWithdrawals' (offset)
	offset35 := int(sszutils.UnmarshallUint32(buf[2736705:2736709]))
	if offset35 < offset34 || offset35 > buflen {
		return sszutils.ErrOffset
	}
	// Field #36 'PendingConsolidations' (offset)
	offset36 := int(sszutils.UnmarshallUint32(buf[2736709:2736713]))
	if offset36 < offset35 || offset36 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #37 'ProposerLookahead' (static)
		buf := buf[2736713:2737225]
		val5 := t.ProposerLookahead
		val5 = sszutils.ExpandSlice(val5, 64)
		for i := 0; i < 64; i++ {
			buf := buf[8*i : 8*(i+1)]
			val5[i] = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
		}
		t.ProposerLookahead = val5
	}
	{ // Field #7 'HistoricalRoots' (dynamic)
		buf := buf[offset7:offset9]
		val6 := t.HistoricalRoots
		itemCount := len(buf) / 32
		if len(buf)%32 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val6 = sszutils.ExpandSlice(val6, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[32*i : 32*(i+1)]
			copy(val6[i][:], buf)
		}
		t.HistoricalRoots = val6
	}
	{ // Field #9 'ETH1DataVotes' (dynamic)
		buf := buf[offset9:offset11]
		val7 := t.ETH1DataVotes
		itemCount := len(buf) / 72
		if len(buf)%72 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val7 = sszutils.ExpandSlice(val7, itemCount)
		for i := 0; i < itemCount; i++ {
			if val7[i] == nil {
				val7[i] = new(phase0.ETH1Data)
			}
			buf := buf[72*i : 72*(i+1)]
			if err = val7[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.ETH1DataVotes = val7
	}
	{ // Field #11 'Validators' (dynamic)
		buf := buf[offset11:offset12]
		val8 := t.Validators
		itemCount := len(buf) / 121
		if len(buf)%121 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val8 = sszutils.ExpandSlice(val8, itemCount)
		for i := 0; i < itemCount; i++ {
			if val8[i] == nil {
				val8[i] = new(phase0.Validator)
			}
			buf := buf[121*i : 121*(i+1)]
			if err = val8[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.Validators = val8
	}
	{ // Field #12 'Balances' (dynamic)
		buf := buf[offset12:offset15]
		val9 := t.Balances
		itemCount := len(buf) / 8
		if len(buf)%8 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val9 = sszutils.ExpandSlice(val9, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[8*i : 8*(i+1)]
			val9[i] = phase0.Gwei(sszutils.UnmarshallUint64(buf))
		}
		t.Balances = val9
	}
	{ // Field #15 'PreviousEpochParticipation' (dynamic)
		buf := buf[offset15:offset16]
		val10 := t.PreviousEpochParticipation
		itemCount := len(buf)
		val10 = sszutils.ExpandSlice(val10, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[1*i : 1*(i+1)]
			val10[i] = altair.ParticipationFlags(sszutils.UnmarshallUint8(buf))
		}
		t.PreviousEpochParticipation = val10
	}
	{ // Field #16 'CurrentEpochParticipation' (dynamic)
		buf := buf[offset16:offset21]
		val11 := t.CurrentEpochParticipation
		itemCount := len(buf)
		val11 = sszutils.ExpandSlice(val11, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[1*i : 1*(i+1)]
			val11[i] = altair.ParticipationFlags(sszutils.UnmarshallUint8(buf))
		}
		t.CurrentEpochParticipation = val11
	}
	{ // Field #21 'InactivityScores' (dynamic)
		buf := buf[offset21:offset24]
		val12 := t.InactivityScores
		itemCount := len(buf) / 8
		if len(buf)%8 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val12 = sszutils.ExpandSlice(val12, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[8*i : 8*(i+1)]
			val12[i] = uint64(sszutils.UnmarshallUint64(buf))
		}
		t.InactivityScores = val12
	}
	{ // Field #24 'LatestExecutionPayloadHeader' (dynamic)
		buf := buf[offset24:offset27]
		val13 := t.LatestExecutionPayloadHeader
		if val13 == nil {
			val13 = new(deneb.ExecutionPayloadHeader)
		}
		if err = val13.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.LatestExecutionPayloadHeader = val13
	}
	{ // Field #27 'HistoricalSummaries' (dynamic)
		buf := buf[offset27:offset34]
		val14 := t.HistoricalSummaries
		itemCount := len(buf) / 64
		if len(buf)%64 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val14 = sszutils.ExpandSlice(val14, itemCount)
		for i := 0; i < itemCount; i++ {
			if val14[i] == nil {
				val14[i] = new(capella.HistoricalSummary)
			}
			buf := buf[64*i : 64*(i+1)]
			if err = val14[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.HistoricalSummaries = val14
	}
	{ // Field #34 'PendingDeposits' (dynamic)
		buf := buf[offset34:offset35]
		val15 := t.PendingDeposits
		itemCount := len(buf) / 192
		if len(buf)%192 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val15 = sszutils.ExpandSlice(val15, itemCount)
		for i := 0; i < itemCount; i++ {
			if val15[i] == nil {
				val15[i] = new(electra.PendingDeposit)
			}
			buf := buf[192*i : 192*(i+1)]
			if err = val15[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.PendingDeposits = val15
	}
	{ // Field #35 'PendingPartialWithdrawals' (dynamic)
		buf := buf[offset35:offset36]
		val16 := t.PendingPartialWithdrawals
		itemCount := len(buf) / 24
		if len(buf)%24 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val16 = sszutils.ExpandSlice(val16, itemCount)
		for i := 0; i < itemCount; i++ {
			if val16[i] == nil {
				val16[i] = new(electra.PendingPartialWithdrawal)
			}
			buf := buf[24*i : 24*(i+1)]
			if err = val16[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.PendingPartialWithdrawals = val16
	}
	{ // Field #36 'PendingConsolidations' (dynamic)
		buf := buf[offset36:]
		val17 := t.PendingConsolidations
		itemCount := len(buf) / 16
		if len(buf)%16 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val17 = sszutils.ExpandSlice(val17, itemCount)
		for i := 0; i < itemCount; i++ {
			if val17[i] == nil {
				val17[i] = new(electra.PendingConsolidation)
			}
			buf := buf[16*i : 16*(i+1)]
			if err = val17[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.PendingConsolidations = val17
	}
	return nil
}

func (t *BeaconState) SizeSSZ() (size int) {
	if t == nil {
		t = new(BeaconState)
	}
	// Field #0 'GenesisTime' static (8 bytes)
	// Field #1 'GenesisValidatorsRoot' static (32 bytes)
	// Field #2 'Slot' static (8 bytes)
	// Field #3 'Fork' static (16 bytes)
	// Field #4 'LatestBlockHeader' static (112 bytes)
	// Field #5 'BlockRoots' static (262144 bytes)
	// Field #6 'StateRoots' static (262144 bytes)
	// Field #7 'HistoricalRoots' offset (4 bytes)
	// Field #8 'ETH1Data' static (72 bytes)
	// Field #9 'ETH1DataVotes' offset (4 bytes)
	// Field #10 'ETH1DepositIndex' static (8 bytes)
	// Field #11 'Validators' offset (4 bytes)
	// Field #12 'Balances' offset (4 bytes)
	// Field #13 'RANDAOMixes' static (2097152 bytes)
	// Field #14 'Slashings' static (65536 bytes)
	// Field #15 'PreviousEpochParticipation' offset (4 bytes)
	// Field #16 'CurrentEpochParticipation' offset (4 bytes)
	// Field #17 'JustificationBits' static (1 bytes)
	// Field #18 'PreviousJustifiedCheckpoint' static (40 bytes)
	// Field #19 'CurrentJustifiedCheckpoint' static (40 bytes)
	// Field #20 'FinalizedCheckpoint' static (40 bytes)
	// Field #21 'InactivityScores' offset (4 bytes)
	// Field #22 'CurrentSyncCommittee' static (24624 bytes)
	// Field #23 'NextSyncCommittee' static (24624 bytes)
	// Field #24 'LatestExecutionPayloadHeader' offset (4 bytes)
	// Field #25 'NextWithdrawalIndex' static (8 bytes)
	// Field #26 'NextWithdrawalValidatorIndex' static (8 bytes)
	// Field #27 'HistoricalSummaries' offset (4 bytes)
	// Field #28 'DepositRequestsStartIndex' static (8 bytes)
	// Field #29 'DepositBalanceToConsume' static (8 bytes)
	// Field #30 'ExitBalanceToConsume' static (8 bytes)
	// Field #31 'EarliestExitEpoch' static (8 bytes)
	// Field #32 'ConsolidationBalanceToConsume' static (8 bytes)
	// Field #33 'EarliestConsolidationEpoch' static (8 bytes)
	// Field #34 'PendingDeposits' offset (4 bytes)
	// Field #35 'PendingPartialWithdrawals' offset (4 bytes)
	// Field #36 'PendingConsolidations' offset (4 bytes)
	// Field #37 'ProposerLookahead' static (512 bytes)
	size += 2737225
	{ // Dynamic field #7 'HistoricalRoots'
		size += len(t.HistoricalRoots) * 32
	}
	{ // Dynamic field #9 'ETH1DataVotes'
		size += len(t.ETH1DataVotes) * 72
	}
	{ // Dynamic field #11 'Validators'
		size += len(t.Validators) * 121
	}
	{ // Dynamic field #12 'Balances'
		size += len(t.Balances) * 8
	}
	{ // Dynamic field #15 'PreviousEpochParticipation'
		size += len(t.PreviousEpochParticipation)
	}
	{ // Dynamic field #16 'CurrentEpochParticipation'
		size += len(t.CurrentEpochParticipation)
	}
	{ // Dynamic field #21 'InactivityScores'
		size += len(t.InactivityScores) * 8
	}
	{ // Dynamic field #24 'LatestExecutionPayloadHeader'
		size += t.LatestExecutionPayloadHeader.SizeSSZ()
	}
	{ // Dynamic field #27 'HistoricalSummaries'
		size += len(t.HistoricalSummaries) * 64
	}
	{ // Dynamic field #34 'PendingDeposits'
		size += len(t.PendingDeposits) * 192
	}
	{ // Dynamic field #35 'PendingPartialWithdrawals'
		size += len(t.PendingPartialWithdrawals) * 24
	}
	{ // Dynamic field #36 'PendingConsolidations'
		size += len(t.PendingConsolidations) * 16
	}
	return size
}

func (t *BeaconState) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *BeaconState) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(BeaconState)
	}
	idx := hh.Index()
	{ // Field #0 'GenesisTime'
		hh.PutUint64(uint64(t.GenesisTime))
	}
	{ // Field #1 'GenesisValidatorsRoot'
		hh.PutBytes(t.GenesisValidatorsRoot[:32])
	}
	{ // Field #2 'Slot'
		hh.PutUint64(uint64(t.Slot))
	}
	{ // Field #3 'Fork'
		t := t.Fork
		if t == nil {
			t = new(phase0.Fork)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #4 'LatestBlockHeader'
		t := t.LatestBlockHeader
		if t == nil {
			t = new(phase0.BeaconBlockHeader)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #5 'BlockRoots'
		t := t.BlockRoots
		vlen := len(t)
		if vlen > 8192 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		var val1 *phase0.Root
		for i := 0; i < 8192; i++ {
			if i < vlen {
				val1 = &t[i]
			} else if i == vlen {
				val1 = new(phase0.Root)
			}
			hh.PutBytes(val1[:32])
		}
		hh.Merkleize(idx)
	}
	{ // Field #6 'StateRoots'
		t := t.StateRoots
		vlen := len(t)
		if vlen > 8192 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		var val2 *phase0.Root
		for i := 0; i < 8192; i++ {
			if i < vlen {
				val2 = &t[i]
			} else if i == vlen {
				val2 = new(phase0.Root)
			}
			hh.PutBytes(val2[:32])
		}
		hh.Merkleize(idx)
	}
	{ // Field #7 'HistoricalRoots'
		t := t.HistoricalRoots
		vlen := uint64(len(t))
		if vlen > 16777216 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			hh.PutBytes(t[i][:32])
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(16777216, vlen, 32))
	}
	{ // Field #8 'ETH1Data'
		t := t.ETH1Data
		if t == nil {
			t = new(phase0.ETH1Data)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #9 'ETH1DataVotes'
		t := t.ETH1DataVotes
		vlen := uint64(len(t))
		if vlen > 2048 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.ETH1Data)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(2048, vlen, 32))
	}
	{ // Field #10 'ETH1DepositIndex'
		hh.PutUint64(uint64(t.ETH1DepositIndex))
	}
	{ // Field #11 'Validators'
		t := t.Validators
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.Validator)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(1099511627776, vlen, 32))
	}
	{ // Field #12 'Balances'
		t := t.Balances
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			hh.AppendUint64(uint64(t[i]))
		}
		hh.FillUpTo32()
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(1099511627776, vlen, 8))
	}
	{ // Field #13 'RANDAOMixes'
		t := t.RANDAOMixes
		vlen := len(t)
		if vlen > 65536 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		var val3 *phase0.Root
		for i := 0; i < 65536; i++ {
			if i < vlen {
				val3 = &t[i]
			} else if i == vlen {
				val3 = new(phase0.Root)
			}
			hh.PutBytes(val3[:32])
		}
		hh.Merkleize(idx)
	}
	{ // Field #14 'Slashings'
		t := t.Slashings
		vlen := len(t)
		if vlen > 8192 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		var val4, val4Empty phase0.Gwei
		for i := 0; i < 8192; i++ {
			if i < vlen {
				val4 = t[i]
			} else if i == vlen {
				val4 = val4Empty
			}
			hh.AppendUint64(uint64(val4))
		}
		hh.FillUpTo32()
		hh.Merkleize(idx)
	}
	{ // Field #15 'PreviousEpochParticipation'
		t := t.PreviousEpochParticipation
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			hh.AppendUint8(uint8(t[i]))
		}
		hh.FillUpTo32()
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(1099511627776, vlen, 1))
	}
	{ // Field #16 'CurrentEpochParticipation'
		t := t.CurrentEpochParticipation
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			hh.AppendUint8(uint8(t[i]))
		}
		hh.FillUpTo32()
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(1099511627776, vlen, 1))
	}
	{ // Field #17 'JustificationBits'
		vlen := len(t.JustificationBits)
		if vlen > 1 {
			return sszutils.ErrVectorLength
		}
		val := t.JustificationBits[:]
		if vlen < 1 {
			val = sszutils.AppendZeroPadding(val, (1-vlen)*1)
		}
		hh.PutBytes(val[:1])
	}
	{ // Field #18 'PreviousJustifiedCheckpoint'
		t := t.PreviousJustifiedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #19 'CurrentJustifiedCheckpoint'
		t := t.CurrentJustifiedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #20 'FinalizedCheckpoint'
		t := t.FinalizedCheckpoint
		if t == nil {
			t = new(phase0.Checkpoint)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #21 'InactivityScores'
		t := t.InactivityScores
		vlen := uint64(len(t))
		if vlen > 1099511627776 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			hh.AppendUint64(uint64(t[i]))
		}
		hh.FillUpTo32()
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(1099511627776, vlen, 8))
	}
	{ // Field #22 'CurrentSyncCommittee'
		t := t.CurrentSyncCommittee
		if t == nil {
			t = new(altair.SyncCommittee)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #23 'NextSyncCommittee'
		t := t.NextSyncCommittee
		if t == nil {
			t = new(altair.SyncCommittee)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #24 'LatestExecutionPayloadHeader'
		t := t.LatestExecutionPayloadHeader
		if t == nil {
			t = new(deneb.ExecutionPayloadHeader)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #25 'NextWithdrawalIndex'
		hh.PutUint64(uint64(t.NextWithdrawalIndex))
	}
	{ // Field #26 'NextWithdrawalValidatorIndex'
		hh.PutUint64(uint64(t.NextWithdrawalValidatorIndex))
	}
	{ // Field #27 'HistoricalSummaries'
		t := t.HistoricalSummaries
		vlen := uint64(len(t))
		if vlen > 16777216 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(capella.HistoricalSummary)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(16777216, vlen, 32))
	}
	{ // Field #28 'DepositRequestsStartIndex'
		hh.PutUint64(uint64(t.DepositRequestsStartIndex))
	}
	{ // Field #29 'DepositBalanceToConsume'
		hh.PutUint64(uint64(t.DepositBalanceToConsume))
	}
	{ // Field #30 'ExitBalanceToConsume'
		hh.PutUint64(uint64(t.ExitBalanceToConsume))
	}
	{ // Field #31 'EarliestExitEpoch'
		hh.PutUint64(uint64(t.EarliestExitEpoch))
	}
	{ // Field #32 'ConsolidationBalanceToConsume'
		hh.PutUint64(uint64(t.ConsolidationBalanceToConsume))
	}
	{ // Field #33 'EarliestConsolidationEpoch'
		hh.PutUint64(uint64(t.EarliestConsolidationEpoch))
	}
	{ // Field #34 'PendingDeposits'
		t := t.PendingDeposits
		vlen := uint64(len(t))
		if vlen > 134217728 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(electra.PendingDeposit)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(134217728, vlen, 32))
	}
	{ // Field #35 'PendingPartialWithdrawals'
		t := t.PendingPartialWithdrawals
		vlen := uint64(len(t))
		if vlen > 134217728 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(electra.PendingPartialWithdrawal)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(134217728, vlen, 32))
	}
	{ // Field #36 'PendingConsolidations'
		t := t.PendingConsolidations
		vlen := uint64(len(t))
		if vlen > 262144 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(electra.PendingConsolidation)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(262144, vlen, 32))
	}
	{ // Field #37 'ProposerLookahead'
		t := t.ProposerLookahead
		vlen := len(t)
		if vlen > 64 {
			return sszutils.ErrVectorLength
		}
		idx := hh.Index()
		var val5, val5Empty phase0.ValidatorIndex
		for i := 0; i < 64; i++ {
			if i < vlen {
				val5 = t[i]
			} else if i == vlen {
				val5 = val5Empty
			}
			hh.AppendUint64(uint64(val5))
		}
		hh.FillUpTo32()
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

