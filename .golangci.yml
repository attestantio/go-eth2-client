# golangci-lint configuration file
# Documentation: https://golangci-lint.run/usage/configuration/
# Version: 2 (latest configuration format)

# Configuration version - must be "2" for latest golangci-lint
version: "2"
# Options for analysis running
run:
  # Module download mode for go list command
  # Options: readonly, vendor, mod, sum
  # readonly: prevents automatic go.mod updates (recommended for CI)
  modules-download-mode: readonly
  
  # Include test files in linting analysis
  # Default: true, but disabled for this project to focus on main code
  tests: false
  
  # Allow multiple parallel golangci-lint instances running
  # Useful for CI environments with multiple jobs
  allow-parallel-runners: true
# Output configuration
output:
  formats:
    # Text format output to stderr with colors
    text:
      path: stderr
# Linter configuration
linters:
  # Enable all available linters by default
  default: all
  
  # Disable specific linters that are too strict or generate false positives
  disable:
    - cyclop
    - depguard
    - dupl
    - err113
    - exhaustive
    - exhaustruct
    - forcetypeassert
    - funlen
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - intrange
    - ireturn
    - lll
    - maintidx
    - mnd
    - musttag
    - perfsprint
    - recvcheck
    - varnamelen
    - wrapcheck
    - wsl
  # Linter-specific settings and configurations
  settings:
    # goheader: License header validation
    goheader:
      values:
        regexp:
          # Regex pattern for matching copyright years
          YEARS: (20\d\d - 20\d\d|20\d\d, 20\d\d|20\d\d)
      # Template for required license header
      template: |-
        Copyright Â© {{ YEARS }} Attestant Limited.
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
    # gosec: Security vulnerability scanning
    gosec:
      excludes:
        # Exclude G115: Use of ReadAll is discouraged (false positives)
        - G115
    # lll: Line length linter (disabled but configured for reference)
    lll:
      line-length: 132

    # revive: Advanced Go linter with extensive rules
    revive:
      # Minimum confidence level for reporting issues
      confidence: 0.8
      # Severity level for violations
      severity: error
      # Enable all available rules
      enable-all-rules: true
      rules:
        # Disable specific revive rules
        - name: add-constant
          disabled: true
        - name: cyclomatic
          disabled: true
        - name: cognitive-complexity
          disabled: true
        - name: function-length
          disabled: true
        - name: max-public-structs
          disabled: true
        - name: package-comments
          disabled: true
        # Configure specific rules
        - name: confusing-results
        - name: line-length-limit
          arguments:
            - 132
        - name: struct-tag
          arguments:
            - json,allowempty
        - name: unhandled-error
          arguments:
            - fmt.Fprint
            - fmt.Fprintf
    # staticcheck: Advanced static analysis
    staticcheck:
      checks:
        # Enable all checks except ST1000 (package comment style)
        - all
        - -ST1000

    # tagliatelle: Struct tag naming conventions
    tagliatelle:
      case:
        rules:
          # Use snake_case for JSON and YAML tags
          json: snake
          yaml: snake
  # Exclusions: Files and patterns to exclude from linting
  exclusions:
    # Exclude generated files with lax matching
    generated: lax
    # Exclude common false positive presets
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    # Exclude specific file patterns
    paths:
      - .*_ssz\.go$    # Exclude SSZ generated files
      - third_party$   # Exclude third party code
      - builtin$       # Exclude builtin code
      - examples$      # Exclude example code
# Formatters: Code formatting tools
formatters:
  enable:
    - gofmt      # Standard Go formatter
    - gofumpt    # Stricter Go formatter
    - goimports  # Import organization and formatting
  exclusions:
    # Exclude generated files from formatting
    generated: lax
    # Exclude specific file patterns from formatting
    paths:
      - .*_ssz\.go$    # Exclude SSZ generated files
      - third_party$   # Exclude third party code
      - builtin$       # Exclude builtin code
      - examples$      # Exclude example code
