// Copyright Â© 2020, 2021 Attestant Limited.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package http_test

import (
	"context"
	client "github.com/attestantio/go-eth2-client"
	"github.com/attestantio/go-eth2-client/http"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	"github.com/stretchr/testify/require"
	"os"
	"testing"
)

func TestSubmitProposalSlashing(t *testing.T) {

	service, err := http.New(context.Background(),
		http.WithTimeout(timeout),
		http.WithAddress(os.Getenv("HTTP_ADDRESS")),
	)
	require.NoError(t, err)

	tests := []struct {
		name     string
		slashing phase0.ProposerSlashing
	}{
		{
			name: "Invalid Proposal Slashing",
			slashing: phase0.ProposerSlashing{
				SignedHeader1: &phase0.SignedBeaconBlockHeader{
					Message: &phase0.BeaconBlockHeader{
						Slot:          1,
						ProposerIndex: 1,
						ParentRoot: phase0.Root{
							0xcf, 0x8e, 0x0d, 0x4e, 0x95, 0x87, 0x36, 0x9b, 0x23, 0x01, 0xd0, 0x79, 0x03, 0x47, 0x32, 0x03,
							0x02, 0xcc, 0x09, 0x43, 0xd5, 0xa1, 0x88, 0x45, 0x60, 0x36, 0x7e, 0x82, 0x08, 0xd9, 0x20, 0xf2,
						},
						StateRoot: phase0.Root{
							0xcf, 0x8e, 0x0d, 0x4e, 0x95, 0x87, 0x36, 0x9b, 0x23, 0x01, 0xd0, 0x79, 0x03, 0x47, 0x32, 0x03,
							0x02, 0xcc, 0x09, 0x43, 0xd5, 0xa1, 0x88, 0x45, 0x60, 0x36, 0x7e, 0x82, 0x08, 0xd9, 0x20, 0xf2,
						},
						BodyRoot: phase0.Root{
							0xcf, 0x8e, 0x0d, 0x4e, 0x95, 0x87, 0x36, 0x9b, 0x23, 0x01, 0xd0, 0x79, 0x03, 0x47, 0x32, 0x03,
							0x02, 0xcc, 0x09, 0x43, 0xd5, 0xa1, 0x88, 0x45, 0x60, 0x36, 0x7e, 0x82, 0x08, 0xd9, 0x20, 0xf2,
						},
					},
					Signature: phase0.BLSSignature([96]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}),
				},
				SignedHeader2: &phase0.SignedBeaconBlockHeader{
					Message: &phase0.BeaconBlockHeader{
						Slot:          1,
						ProposerIndex: 1,
						ParentRoot: phase0.Root{
							0xcf, 0x8e, 0x0d, 0x4e, 0x95, 0x87, 0x36, 0x9b, 0x23, 0x01, 0xd0, 0x79, 0x03, 0x47, 0x32, 0x03,
							0x02, 0xcc, 0x09, 0x43, 0xd5, 0xa1, 0x88, 0x45, 0x60, 0x36, 0x7e, 0x82, 0x08, 0xd9, 0x20, 0xf2,
						},
						StateRoot: phase0.Root{
							0xcf, 0x8e, 0x0d, 0x4e, 0x95, 0x87, 0x36, 0x9b, 0x23, 0x01, 0xd0, 0x79, 0x03, 0x47, 0x32, 0x03,
							0x02, 0xcc, 0x09, 0x43, 0xd5, 0xa1, 0x88, 0x45, 0x60, 0x36, 0x7e, 0x82, 0x08, 0xd9, 0x20, 0xf2,
						},
						BodyRoot: phase0.Root{
							0xcf, 0x8e, 0x0d, 0x4e, 0x95, 0x87, 0x36, 0x9b, 0x23, 0x01, 0xd0, 0x79, 0x03, 0x47, 0x32, 0x03,
							0x02, 0xcc, 0x09, 0x43, 0xd5, 0xa1, 0x88, 0x45, 0x60, 0x36, 0x7e, 0x82, 0x08, 0xd9, 0x20, 0xf2,
						},
					},
					Signature: phase0.BLSSignature([96]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}),
				},
			},
		}}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			// Create proposal slashing and submit.
			err := service.(client.ProposalSlashingSubmitter).SubmitProposalSlashing(context.Background(), &test.slashing)
			// This should error on bad slashing
			require.Error(t, err) //we should get error 400 with an invalid signature
		})
	}
}
