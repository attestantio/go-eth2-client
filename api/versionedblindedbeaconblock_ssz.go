// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: d3fa52774f41234f03880598be1a8f3ebc9af00f06414ab79e2b146bb08dffb1
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package api

import (
	"github.com/attestantio/go-eth2-client/api/v1/bellatrix"
	"github.com/attestantio/go-eth2-client/api/v1/capella"
	"github.com/attestantio/go-eth2-client/api/v1/deneb"
	"github.com/attestantio/go-eth2-client/api/v1/electra"
	"github.com/attestantio/go-eth2-client/spec"
	"github.com/attestantio/go-eth2-client/spec/altair"
	capella1 "github.com/attestantio/go-eth2-client/spec/capella"
	deneb1 "github.com/attestantio/go-eth2-client/spec/deneb"
	electra1 "github.com/attestantio/go-eth2-client/spec/electra"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *VersionedBlindedBeaconBlock) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *bellatrix.BlindedBeaconBlock) (err error) { // *bellatrix.BlindedBeaconBlock
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn2 := func(t *capella.BlindedBeaconBlock) (err error) { // *capella.BlindedBeaconBlock
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn3 := func(t *deneb.BlindedBeaconBlock) (err error) { // *deneb.BlindedBeaconBlock
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn4 := func(t *electra.BlindedBeaconBlock) (err error) { // *electra.BlindedBeaconBlock
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn5 := func(t *VersionedBlindedBeaconBlock) (err error) { // *api.VersionedBlindedBeaconBlock
		dstlen := len(dst)
		// Field #0 'Version'
		dst = sszutils.MarshalUint64(dst, uint64(t.Version))
		// Offset #1 'Bellatrix'
		offset1 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #2 'Capella'
		offset2 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #3 'Deneb'
		offset3 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #4 'Electra'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #5 'Fulu'
		offset5 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #1 'Bellatrix'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		if err = fn1(t.Bellatrix); err != nil {
			return err
		}
		// Dynamic Field #2 'Capella'
		sszutils.UpdateOffset(dst[offset2:offset2+4], len(dst)-dstlen)
		if err = fn2(t.Capella); err != nil {
			return err
		}
		// Dynamic Field #3 'Deneb'
		sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
		if err = fn3(t.Deneb); err != nil {
			return err
		}
		// Dynamic Field #4 'Electra'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		if err = fn4(t.Electra); err != nil {
			return err
		}
		// Dynamic Field #5 'Fulu'
		sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
		if err = fn4(t.Fulu); err != nil {
			return err
		}
		return err
	}
	err = fn5(t)
	return dst, err
}
func (t *VersionedBlindedBeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *VersionedBlindedBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *VersionedBlindedBeaconBlock) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t *bellatrix.BlindedBeaconBlock) (size int) { // *bellatrix.BlindedBeaconBlock
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn2 := func(t *capella.BlindedBeaconBlock) (size int) { // *capella.BlindedBeaconBlock
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn3 := func(t *deneb.BlindedBeaconBlock) (size int) { // *deneb.BlindedBeaconBlock
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn4 := func(t *electra.BlindedBeaconBlock) (size int) { // *electra.BlindedBeaconBlock
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn5 := func(t *VersionedBlindedBeaconBlock) (size int) { // *VersionedBlindedBeaconBlock
		size = 8
		size += 4 + sfn1(t.Bellatrix)
		size += 4 + sfn2(t.Capella)
		size += 4 + sfn3(t.Deneb)
		size += 4 + sfn4(t.Electra)
		size += 4 + sfn4(t.Fulu)
		return size
	}
	return sfn5(t)
}
func (t *VersionedBlindedBeaconBlock) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *VersionedBlindedBeaconBlock) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	fn1 := func(t *bellatrix.BlindedBeaconBlock, buf []byte) (*bellatrix.BlindedBeaconBlock, error) { // *bellatrix.BlindedBeaconBlock
		var err error
		if t == nil {
			t = new(bellatrix.BlindedBeaconBlock)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn2 := func(t *capella.BlindedBeaconBlock, buf []byte) (*capella.BlindedBeaconBlock, error) { // *capella.BlindedBeaconBlock
		var err error
		if t == nil {
			t = new(capella.BlindedBeaconBlock)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn3 := func(t *deneb.BlindedBeaconBlock, buf []byte) (*deneb.BlindedBeaconBlock, error) { // *deneb.BlindedBeaconBlock
		var err error
		if t == nil {
			t = new(deneb.BlindedBeaconBlock)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn4 := func(t *electra.BlindedBeaconBlock, buf []byte) (*electra.BlindedBeaconBlock, error) { // *electra.BlindedBeaconBlock
		var err error
		if t == nil {
			t = new(electra.BlindedBeaconBlock)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn5 := func(t *VersionedBlindedBeaconBlock, buf []byte) (*VersionedBlindedBeaconBlock, error) { // *VersionedBlindedBeaconBlock
		var err error
		if t == nil {
			t = new(VersionedBlindedBeaconBlock)
		}
		bufpos := 28
		buflen := len(buf)
		if buflen < 28 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #1 'Bellatrix'
		offset1 := int(sszutils.ReadOffset(buf[8:12]))
		// Read offset #2 'Capella'
		offset2 := int(sszutils.ReadOffset(buf[12:16]))
		// Read offset #3 'Deneb'
		offset3 := int(sszutils.ReadOffset(buf[16:20]))
		// Read offset #4 'Electra'
		offset4 := int(sszutils.ReadOffset(buf[20:24]))
		// Read offset #5 'Fulu'
		offset5 := int(sszutils.ReadOffset(buf[24:28]))
		// Field #0 'Version'
		t.Version = (spec.DataVersion)(sszutils.UnmarshallUint64(buf[0:8]))
		// Dynamic Field #1 'Bellatrix'
		if offset1 < bufpos || offset2 > buflen || offset2 < offset1 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset1:offset2]
			if t.Bellatrix, err = fn1(t.Bellatrix, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #2 'Capella'
		if offset2 < bufpos || offset3 > buflen || offset3 < offset2 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset2:offset3]
			if t.Capella, err = fn2(t.Capella, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #3 'Deneb'
		if offset3 < bufpos || offset4 > buflen || offset4 < offset3 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset3:offset4]
			if t.Deneb, err = fn3(t.Deneb, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #4 'Electra'
		if offset4 < bufpos || offset5 > buflen || offset5 < offset4 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset4:offset5]
			if t.Electra, err = fn4(t.Electra, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #5 'Fulu'
		if offset5 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset5:]
			if t.Fulu, err = fn4(t.Fulu, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn5(t, buf)
	return err
}
func (t *VersionedBlindedBeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *VersionedBlindedBeaconBlock) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t []*phase0.ProposerSlashing) (err error) { // []*phase0.ProposerSlashing:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t []*phase0.AttesterSlashing) (err error) { // []*phase0.AttesterSlashing:2
		maxLen := 2
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn3 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist:2048:MAX_VALIDATORS_PER_COMMITTEE
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 2048
		}
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > maxLen {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (maxLen+255)/256)
		return err
	}
	fn4 := func(t *phase0.Attestation) (err error) { // *phase0.Attestation:pack
		idx := hh.Index()
		// Field #0 'AggregationBits'
		if err = fn3(t.AggregationBits); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	fn5 := func(t []*phase0.Attestation) (err error) { // []*phase0.Attestation:128
		maxLen := 128
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn6 := func(t [][]byte) (err error) { // [][]uint8:33:DEPOSIT_CONTRACT_TREE_DEPTH+1:32
		hasLimit, limit, err := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 33
		}
		idx := hh.Index()
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		for i := vlen; i < int(limit); i++ {
			hh.PutUint8(0)
		}
		hh.Merkleize(idx)
		return err
	}
	fn7 := func(t *phase0.Deposit) (err error) { // *phase0.Deposit:pack
		idx := hh.Index()
		// Field #0 'Proof'
		if err = fn6(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn8 := func(t []*phase0.Deposit) (err error) { // []*phase0.Deposit:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn7(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn9 := func(t []*phase0.SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn10 := func(t go_bitfield.Bitvector512) (err error) { // bitfield.Bitvector512:64:SYNC_COMMITTEE_SIZE/8
		hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 64
		}
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn11 := func(t *altair.SyncAggregate) (err error) { // *altair.SyncAggregate
		idx := hh.Index()
		// Field #0 'SyncCommitteeBits'
		if err = fn10(t.SyncCommitteeBits); err != nil {
			return err
		}
		// Field #1 'SyncCommitteeSignature'
		hh.PutBytes(t.SyncCommitteeSignature[:])
		hh.Merkleize(idx)
		return err
	}
	fn12 := func(t *bellatrix.BlindedBeaconBlockBody) (err error) { // *bellatrix.BlindedBeaconBlockBody
		idx := hh.Index()
		// Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:])
		// Field #1 'ETH1Data'
		if err = t.ETH1Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:])
		// Field #3 'ProposerSlashings'
		if err = fn1(t.ProposerSlashings); err != nil {
			return err
		}
		// Field #4 'AttesterSlashings'
		if err = fn2(t.AttesterSlashings); err != nil {
			return err
		}
		// Field #5 'Attestations'
		if err = fn5(t.Attestations); err != nil {
			return err
		}
		// Field #6 'Deposits'
		if err = fn8(t.Deposits); err != nil {
			return err
		}
		// Field #7 'VoluntaryExits'
		if err = fn9(t.VoluntaryExits); err != nil {
			return err
		}
		// Field #8 'SyncAggregate'
		if err = fn11(t.SyncAggregate); err != nil {
			return err
		}
		// Field #9 'ExecutionPayloadHeader'
		if err = t.ExecutionPayloadHeader.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn13 := func(t *bellatrix.BlindedBeaconBlock) (err error) { // *bellatrix.BlindedBeaconBlock
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'Body'
		if err = fn12(t.Body); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn14 := func(t []*capella1.SignedBLSToExecutionChange) (err error) { // []*capella.SignedBLSToExecutionChange:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn15 := func(t *capella.BlindedBeaconBlockBody) (err error) { // *capella.BlindedBeaconBlockBody
		idx := hh.Index()
		// Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:])
		// Field #1 'ETH1Data'
		if err = t.ETH1Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:])
		// Field #3 'ProposerSlashings'
		if err = fn1(t.ProposerSlashings); err != nil {
			return err
		}
		// Field #4 'AttesterSlashings'
		if err = fn2(t.AttesterSlashings); err != nil {
			return err
		}
		// Field #5 'Attestations'
		if err = fn5(t.Attestations); err != nil {
			return err
		}
		// Field #6 'Deposits'
		if err = fn8(t.Deposits); err != nil {
			return err
		}
		// Field #7 'VoluntaryExits'
		if err = fn9(t.VoluntaryExits); err != nil {
			return err
		}
		// Field #8 'SyncAggregate'
		if err = fn11(t.SyncAggregate); err != nil {
			return err
		}
		// Field #9 'ExecutionPayloadHeader'
		if err = t.ExecutionPayloadHeader.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #10 'BLSToExecutionChanges'
		if err = fn14(t.BLSToExecutionChanges); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn16 := func(t *capella.BlindedBeaconBlock) (err error) { // *capella.BlindedBeaconBlock
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'Body'
		if err = fn15(t.Body); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn17 := func(t []deneb1.KZGCommitment) (err error) { // []deneb.KZGCommitment:4096:48
		maxLen := 4096
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn18 := func(t *deneb.BlindedBeaconBlockBody) (err error) { // *deneb.BlindedBeaconBlockBody
		idx := hh.Index()
		// Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:])
		// Field #1 'ETH1Data'
		if err = t.ETH1Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:])
		// Field #3 'ProposerSlashings'
		if err = fn1(t.ProposerSlashings); err != nil {
			return err
		}
		// Field #4 'AttesterSlashings'
		if err = fn2(t.AttesterSlashings); err != nil {
			return err
		}
		// Field #5 'Attestations'
		if err = fn5(t.Attestations); err != nil {
			return err
		}
		// Field #6 'Deposits'
		if err = fn8(t.Deposits); err != nil {
			return err
		}
		// Field #7 'VoluntaryExits'
		if err = fn9(t.VoluntaryExits); err != nil {
			return err
		}
		// Field #8 'SyncAggregate'
		if err = fn11(t.SyncAggregate); err != nil {
			return err
		}
		// Field #9 'ExecutionPayloadHeader'
		if err = t.ExecutionPayloadHeader.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #10 'BLSToExecutionChanges'
		if err = fn14(t.BLSToExecutionChanges); err != nil {
			return err
		}
		// Field #11 'BlobKZGCommitments'
		if err = fn17(t.BlobKZGCommitments); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn19 := func(t *deneb.BlindedBeaconBlock) (err error) { // *deneb.BlindedBeaconBlock
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'Body'
		if err = fn18(t.Body); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn20 := func(t []uint64) (err error) { // []uint64:131072:MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 131072
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.AppendUint64(uint64(t[i]))
		}
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(8))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn21 := func(t *electra1.IndexedAttestation) (err error) { // *electra.IndexedAttestation
		idx := hh.Index()
		// Field #0 'AttestingIndices'
		if err = fn20(t.AttestingIndices); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	fn22 := func(t *electra1.AttesterSlashing) (err error) { // *electra.AttesterSlashing:pack
		idx := hh.Index()
		// Field #0 'Attestation1'
		if err = fn21(t.Attestation1); err != nil {
			return err
		}
		// Field #1 'Attestation2'
		if err = fn21(t.Attestation2); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn23 := func(t []*electra1.AttesterSlashing) (err error) { // []*electra.AttesterSlashing:1
		maxLen := 1
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn22(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn24 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist:131072:MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 131072
		}
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > maxLen {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (maxLen+255)/256)
		return err
	}
	fn25 := func(t go_bitfield.Bitvector64) (err error) { // bitfield.Bitvector64:8:MAX_COMMITTEES_PER_SLOT/8
		hasLimit, limit, err := ds.ResolveSpecValue("MAX_COMMITTEES_PER_SLOT/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 8
		}
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn26 := func(t *electra1.Attestation) (err error) { // *electra.Attestation:pack
		idx := hh.Index()
		// Field #0 'AggregationBits'
		if err = fn24(t.AggregationBits); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		// Field #3 'CommitteeBits'
		if err = fn25(t.CommitteeBits); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn27 := func(t []*electra1.Attestation) (err error) { // []*electra.Attestation:8
		maxLen := 8
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn26(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn28 := func(t []*electra1.DepositRequest) (err error) { // []*electra.DepositRequest:8192:MAX_DEPOSIT_REQUESTS_PER_PAYLOAD
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_DEPOSIT_REQUESTS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 8192
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn29 := func(t []*electra1.WithdrawalRequest) (err error) { // []*electra.WithdrawalRequest:16:MAX_WITHDRAWAL_REQUESTS_PER_PAYLOAD
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_WITHDRAWAL_REQUESTS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn30 := func(t []*electra1.ConsolidationRequest) (err error) { // []*electra.ConsolidationRequest:2:MAX_CONSOLIDATION_REQUESTS_PER_PAYLOAD
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_CONSOLIDATION_REQUESTS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 2
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn31 := func(t *electra1.ExecutionRequests) (err error) { // *electra.ExecutionRequests
		idx := hh.Index()
		// Field #0 'Deposits'
		if err = fn28(t.Deposits); err != nil {
			return err
		}
		// Field #1 'Withdrawals'
		if err = fn29(t.Withdrawals); err != nil {
			return err
		}
		// Field #2 'Consolidations'
		if err = fn30(t.Consolidations); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn32 := func(t *electra.BlindedBeaconBlockBody) (err error) { // *electra.BlindedBeaconBlockBody
		idx := hh.Index()
		// Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:])
		// Field #1 'ETH1Data'
		if err = t.ETH1Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:])
		// Field #3 'ProposerSlashings'
		if err = fn1(t.ProposerSlashings); err != nil {
			return err
		}
		// Field #4 'AttesterSlashings'
		if err = fn23(t.AttesterSlashings); err != nil {
			return err
		}
		// Field #5 'Attestations'
		if err = fn27(t.Attestations); err != nil {
			return err
		}
		// Field #6 'Deposits'
		if err = fn8(t.Deposits); err != nil {
			return err
		}
		// Field #7 'VoluntaryExits'
		if err = fn9(t.VoluntaryExits); err != nil {
			return err
		}
		// Field #8 'SyncAggregate'
		if err = fn11(t.SyncAggregate); err != nil {
			return err
		}
		// Field #9 'ExecutionPayloadHeader'
		if err = t.ExecutionPayloadHeader.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #10 'BLSToExecutionChanges'
		if err = fn14(t.BLSToExecutionChanges); err != nil {
			return err
		}
		// Field #11 'BlobKZGCommitments'
		if err = fn17(t.BlobKZGCommitments); err != nil {
			return err
		}
		// Field #12 'ExecutionRequests'
		if err = fn31(t.ExecutionRequests); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn33 := func(t *electra.BlindedBeaconBlock) (err error) { // *electra.BlindedBeaconBlock
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'Body'
		if err = fn32(t.Body); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn34 := func(t *VersionedBlindedBeaconBlock) (err error) { // *api.VersionedBlindedBeaconBlock
		idx := hh.Index()
		// Field #0 'Version'
		hh.PutUint64(uint64(t.Version))
		// Field #1 'Bellatrix'
		if err = fn13(t.Bellatrix); err != nil {
			return err
		}
		// Field #2 'Capella'
		if err = fn16(t.Capella); err != nil {
			return err
		}
		// Field #3 'Deneb'
		if err = fn19(t.Deneb); err != nil {
			return err
		}
		// Field #4 'Electra'
		if err = fn33(t.Electra); err != nil {
			return err
		}
		// Field #5 'Fulu'
		if err = fn33(t.Fulu); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn34(t)
}
func (t *VersionedBlindedBeaconBlock) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *VersionedBlindedBeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *VersionedBlindedBeaconBlock) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
