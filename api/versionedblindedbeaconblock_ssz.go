// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: e021079d0bfa684976c9ad278f0ebe295a3d7f59029cdbfd7c33a9fbdeaaf721
// Version: v1.1.1 (https://github.com/pk910/dynamic-ssz)
package api

import (
	"github.com/attestantio/go-eth2-client/api/v1/bellatrix"
	"github.com/attestantio/go-eth2-client/api/v1/capella"
	"github.com/attestantio/go-eth2-client/api/v1/deneb"
	"github.com/attestantio/go-eth2-client/api/v1/electra"
	"github.com/attestantio/go-eth2-client/spec"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *VersionedBlindedBeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *VersionedBlindedBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(VersionedBlindedBeaconBlock)
	}
	dstlen := len(dst)
	{ // Field #0 'Version'
		dst = sszutils.MarshalUint64(dst, uint64(t.Version))
	}
	// Offset #1 'Bellatrix'
	offset1 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #2 'Capella'
	offset2 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #3 'Deneb'
	offset3 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #4 'Electra'
	offset4 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #5 'Fulu'
	offset5 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #1 'Bellatrix'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		t := t.Bellatrix
		if t == nil {
			t = new(bellatrix.BlindedBeaconBlock)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #2 'Capella'
		sszutils.UpdateOffset(dst[offset2:offset2+4], len(dst)-dstlen)
		t := t.Capella
		if t == nil {
			t = new(capella.BlindedBeaconBlock)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #3 'Deneb'
		sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
		t := t.Deneb
		if t == nil {
			t = new(deneb.BlindedBeaconBlock)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #4 'Electra'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		t := t.Electra
		if t == nil {
			t = new(electra.BlindedBeaconBlock)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #5 'Fulu'
		sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
		t := t.Fulu
		if t == nil {
			t = new(electra.BlindedBeaconBlock)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *VersionedBlindedBeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 28 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Version' (static)
		buf := buf[0:8]
		t.Version = spec.DataVersion(sszutils.UnmarshallUint64(buf))
	}
	// Field #1 'Bellatrix' (offset)
	offset1 := int(sszutils.UnmarshallUint32(buf[8:12]))
	if offset1 != 28 {
		return sszutils.ErrOffset
	}
	// Field #2 'Capella' (offset)
	offset2 := int(sszutils.UnmarshallUint32(buf[12:16]))
	if offset2 < offset1 || offset2 > buflen {
		return sszutils.ErrOffset
	}
	// Field #3 'Deneb' (offset)
	offset3 := int(sszutils.UnmarshallUint32(buf[16:20]))
	if offset3 < offset2 || offset3 > buflen {
		return sszutils.ErrOffset
	}
	// Field #4 'Electra' (offset)
	offset4 := int(sszutils.UnmarshallUint32(buf[20:24]))
	if offset4 < offset3 || offset4 > buflen {
		return sszutils.ErrOffset
	}
	// Field #5 'Fulu' (offset)
	offset5 := int(sszutils.UnmarshallUint32(buf[24:28]))
	if offset5 < offset4 || offset5 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #1 'Bellatrix' (dynamic)
		buf := buf[offset1:offset2]
		val1 := t.Bellatrix
		if val1 == nil {
			val1 = new(bellatrix.BlindedBeaconBlock)
		}
		if err = val1.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Bellatrix = val1
	}
	{ // Field #2 'Capella' (dynamic)
		buf := buf[offset2:offset3]
		val2 := t.Capella
		if val2 == nil {
			val2 = new(capella.BlindedBeaconBlock)
		}
		if err = val2.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Capella = val2
	}
	{ // Field #3 'Deneb' (dynamic)
		buf := buf[offset3:offset4]
		val3 := t.Deneb
		if val3 == nil {
			val3 = new(deneb.BlindedBeaconBlock)
		}
		if err = val3.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Deneb = val3
	}
	{ // Field #4 'Electra' (dynamic)
		buf := buf[offset4:offset5]
		val4 := t.Electra
		if val4 == nil {
			val4 = new(electra.BlindedBeaconBlock)
		}
		if err = val4.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Electra = val4
	}
	{ // Field #5 'Fulu' (dynamic)
		buf := buf[offset5:]
		val5 := t.Fulu
		if val5 == nil {
			val5 = new(electra.BlindedBeaconBlock)
		}
		if err = val5.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Fulu = val5
	}
	return nil
}

func (t *VersionedBlindedBeaconBlock) SizeSSZ() (size int) {
	if t == nil {
		t = new(VersionedBlindedBeaconBlock)
	}
	// Field #0 'Version' static (8 bytes)
	// Field #1 'Bellatrix' offset (4 bytes)
	// Field #2 'Capella' offset (4 bytes)
	// Field #3 'Deneb' offset (4 bytes)
	// Field #4 'Electra' offset (4 bytes)
	// Field #5 'Fulu' offset (4 bytes)
	size += 28
	{ // Dynamic field #1 'Bellatrix'
		size += t.Bellatrix.SizeSSZ()
	}
	{ // Dynamic field #2 'Capella'
		size += t.Capella.SizeSSZ()
	}
	{ // Dynamic field #3 'Deneb'
		size += t.Deneb.SizeSSZ()
	}
	{ // Dynamic field #4 'Electra'
		size += t.Electra.SizeSSZ()
	}
	{ // Dynamic field #5 'Fulu'
		size += t.Fulu.SizeSSZ()
	}
	return size
}

func (t *VersionedBlindedBeaconBlock) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *VersionedBlindedBeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(VersionedBlindedBeaconBlock)
	}
	idx := hh.Index()
	{ // Field #0 'Version'
		hh.PutUint64(uint64(t.Version))
	}
	{ // Field #1 'Bellatrix'
		t := t.Bellatrix
		if t == nil {
			t = new(bellatrix.BlindedBeaconBlock)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #2 'Capella'
		t := t.Capella
		if t == nil {
			t = new(capella.BlindedBeaconBlock)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #3 'Deneb'
		t := t.Deneb
		if t == nil {
			t = new(deneb.BlindedBeaconBlock)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #4 'Electra'
		t := t.Electra
		if t == nil {
			t = new(electra.BlindedBeaconBlock)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #5 'Fulu'
		t := t.Fulu
		if t == nil {
			t = new(electra.BlindedBeaconBlock)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

