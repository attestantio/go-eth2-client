// Code generated by fastssz. DO NOT EDIT.
// Hash: b276d9aad6cbae7805608c3adb43fa696d04a0acf5d2b67b74e90f4fdcbd4cc0
// Version: 0.1.3
package api

import (
	apiv1 "github.com/attestantio/go-eth2-client/api/v1"
	"github.com/attestantio/go-eth2-client/spec"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the VersionedSignedValidatorRegistration object
func (v *VersionedSignedValidatorRegistration) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the VersionedSignedValidatorRegistration object to a target array
func (v *VersionedSignedValidatorRegistration) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Version'
	dst = ssz.MarshalUint64(dst, uint64(v.Version))

	// Field (1) 'V1'
	if v.V1 == nil {
		v.V1 = new(apiv1.SignedValidatorRegistration)
	}
	if dst, err = v.V1.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the VersionedSignedValidatorRegistration object
func (v *VersionedSignedValidatorRegistration) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 188 {
		return ssz.ErrSize
	}

	// Field (0) 'Version'
	v.Version = spec.BuilderVersion(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'V1'
	if v.V1 == nil {
		v.V1 = new(apiv1.SignedValidatorRegistration)
	}
	if err = v.V1.UnmarshalSSZ(buf[8:188]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the VersionedSignedValidatorRegistration object
func (v *VersionedSignedValidatorRegistration) SizeSSZ() (size int) {
	size = 188
	return
}

// HashTreeRoot ssz hashes the VersionedSignedValidatorRegistration object
func (v *VersionedSignedValidatorRegistration) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the VersionedSignedValidatorRegistration object with a hasher
func (v *VersionedSignedValidatorRegistration) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Version'
	hh.PutUint64(uint64(v.Version))

	// Field (1) 'V1'
	if v.V1 == nil {
		v.V1 = new(apiv1.SignedValidatorRegistration)
	}
	if err = v.V1.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the VersionedSignedValidatorRegistration object
func (v *VersionedSignedValidatorRegistration) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}
