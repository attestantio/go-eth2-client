// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 5f722495d6e0cdc8ad1b5b5f68a6256da8798f980afab20551e0c39cf193a282
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package api

import (
	"github.com/attestantio/go-eth2-client/api/v1"
	"github.com/attestantio/go-eth2-client/spec"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *VersionedSignedValidatorRegistration) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *v1.SignedValidatorRegistration) (err error) { // *v1.SignedValidatorRegistration
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *VersionedSignedValidatorRegistration) (err error) { // *api.VersionedSignedValidatorRegistration
		// Field #0 'Version'
		dst = sszutils.MarshalUint64(dst, uint64(t.Version))
		// Field #1 'V1'
		if err = fn1(t.V1); err != nil {
			return err
		}
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *VersionedSignedValidatorRegistration) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *VersionedSignedValidatorRegistration) SizeSSZ() (size int) {
	sfn1 := func(t *VersionedSignedValidatorRegistration) (size int) { // *VersionedSignedValidatorRegistration
		size = 188
		return size
	}
	return sfn1(t)
}

func (t *VersionedSignedValidatorRegistration) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *v1.SignedValidatorRegistration, buf []byte) (*v1.SignedValidatorRegistration, error) { // *v1.SignedValidatorRegistration
		var err error
		if t == nil {
			t = new(v1.SignedValidatorRegistration)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *VersionedSignedValidatorRegistration, buf []byte) (*VersionedSignedValidatorRegistration, error) { // *VersionedSignedValidatorRegistration
		var err error
		if t == nil {
			t = new(VersionedSignedValidatorRegistration)
		}
		buflen := len(buf)
		if buflen < 188 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Version'
		t.Version = (spec.BuilderVersion)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'V1'
		if t.V1, err = fn1(t.V1, buf[8:188]); err != nil {
			return t, err
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}

func (t *VersionedSignedValidatorRegistration) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *VersionedSignedValidatorRegistration) (err error) { // *api.VersionedSignedValidatorRegistration
		idx := hh.Index()
		// Field #0 'Version'
		hh.PutUint64(uint64(t.Version))
		// Field #1 'V1'
		if err = t.V1.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *VersionedSignedValidatorRegistration) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
