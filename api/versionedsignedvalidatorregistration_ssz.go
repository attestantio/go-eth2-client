// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 8d7152a48af817e6e053ac650c3cb9022249a6b5f9c621c4a1af186ee52ff3a7
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package api

import (
	"github.com/attestantio/go-eth2-client/api/v1"
	"github.com/attestantio/go-eth2-client/spec"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *VersionedSignedValidatorRegistration) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *VersionedSignedValidatorRegistration) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(VersionedSignedValidatorRegistration)
	}
	{ // Field #0 'Version'
		t := t.Version
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'V1'
		t := t.V1
		if t == nil {
			t = new(v1.SignedValidatorRegistration)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *VersionedSignedValidatorRegistration) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 188 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Version' (static)
		buf := buf[0:8]
		t.Version = spec.BuilderVersion(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'V1' (static)
		buf := buf[8:188]
		if t.V1 == nil {
			t.V1 = new(v1.SignedValidatorRegistration)
		}
		if err = t.V1.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return nil
}

func (t *VersionedSignedValidatorRegistration) SizeSSZ() (size int) {
	return 188
}

func (t *VersionedSignedValidatorRegistration) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *VersionedSignedValidatorRegistration) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(VersionedSignedValidatorRegistration)
	}
	idx := hh.Index()
	{ // Field #0 'Version'
		t := t.Version
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'V1'
		t := t.V1
		if t == nil {
			t = new(v1.SignedValidatorRegistration)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

