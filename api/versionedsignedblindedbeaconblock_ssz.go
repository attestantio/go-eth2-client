// Code generated by fastssz. DO NOT EDIT.
// Hash: e371ee6f21c994d503a1000c053237f74da44138364110925fe5acc0b1ffe3cd
// Version: 0.1.3
package api

import (
	apiv1bellatrix "github.com/attestantio/go-eth2-client/api/v1/bellatrix"
	apiv1capella "github.com/attestantio/go-eth2-client/api/v1/capella"
	apiv1deneb "github.com/attestantio/go-eth2-client/api/v1/deneb"
	apiv1electra "github.com/attestantio/go-eth2-client/api/v1/electra"
	"github.com/attestantio/go-eth2-client/spec"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the VersionedSignedBlindedBeaconBlock object
func (v *VersionedSignedBlindedBeaconBlock) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the VersionedSignedBlindedBeaconBlock object to a target array
func (v *VersionedSignedBlindedBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(28)

	// Field (0) 'Version'
	dst = ssz.MarshalUint64(dst, uint64(v.Version))

	// Offset (1) 'Bellatrix'
	dst = ssz.WriteOffset(dst, offset)
	if v.Bellatrix == nil {
		v.Bellatrix = new(apiv1bellatrix.SignedBlindedBeaconBlock)
	}
	offset += v.Bellatrix.SizeSSZ()

	// Offset (2) 'Capella'
	dst = ssz.WriteOffset(dst, offset)
	if v.Capella == nil {
		v.Capella = new(apiv1capella.SignedBlindedBeaconBlock)
	}
	offset += v.Capella.SizeSSZ()

	// Offset (3) 'Deneb'
	dst = ssz.WriteOffset(dst, offset)
	if v.Deneb == nil {
		v.Deneb = new(apiv1deneb.SignedBlindedBeaconBlock)
	}
	offset += v.Deneb.SizeSSZ()

	// Offset (4) 'Electra'
	dst = ssz.WriteOffset(dst, offset)
	if v.Electra == nil {
		v.Electra = new(apiv1electra.SignedBlindedBeaconBlock)
	}
	offset += v.Electra.SizeSSZ()

	// Offset (5) 'Fulu'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Bellatrix'
	if dst, err = v.Bellatrix.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'Capella'
	if dst, err = v.Capella.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'Deneb'
	if dst, err = v.Deneb.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'Electra'
	if dst, err = v.Electra.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'Fulu'
	if dst, err = v.Fulu.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the VersionedSignedBlindedBeaconBlock object
func (v *VersionedSignedBlindedBeaconBlock) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 28 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2, o3, o4, o5 uint64

	// Field (0) 'Version'
	v.Version = spec.DataVersion(ssz.UnmarshallUint64(buf[0:8]))

	// Offset (1) 'Bellatrix'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 28 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'Capella'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'Deneb'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'Electra'
	if o4 = ssz.ReadOffset(buf[20:24]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Offset (5) 'Fulu'
	if o5 = ssz.ReadOffset(buf[24:28]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Field (1) 'Bellatrix'
	{
		buf = tail[o1:o2]
		if v.Bellatrix == nil {
			v.Bellatrix = new(apiv1bellatrix.SignedBlindedBeaconBlock)
		}
		if err = v.Bellatrix.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (2) 'Capella'
	{
		buf = tail[o2:o3]
		if v.Capella == nil {
			v.Capella = new(apiv1capella.SignedBlindedBeaconBlock)
		}
		if err = v.Capella.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'Deneb'
	{
		buf = tail[o3:o4]
		if v.Deneb == nil {
			v.Deneb = new(apiv1deneb.SignedBlindedBeaconBlock)
		}
		if err = v.Deneb.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (4) 'Electra'
	{
		buf = tail[o4:o5]
		if v.Electra == nil {
			v.Electra = new(apiv1electra.SignedBlindedBeaconBlock)
		}
		if err = v.Electra.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (5) 'Fulu'
	{
		buf = tail[o5:]
		if v.Fulu == nil {
			v.Fulu = new(apiv1electra.SignedBlindedBeaconBlock)
		}
		if err = v.Fulu.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the VersionedSignedBlindedBeaconBlock object
func (v *VersionedSignedBlindedBeaconBlock) SizeSSZ() (size int) {
	size = 28

	// Field (1) 'Bellatrix'
	if v.Bellatrix == nil {
		v.Bellatrix = new(apiv1bellatrix.SignedBlindedBeaconBlock)
	}
	size += v.Bellatrix.SizeSSZ()

	// Field (2) 'Capella'
	if v.Capella == nil {
		v.Capella = new(apiv1capella.SignedBlindedBeaconBlock)
	}
	size += v.Capella.SizeSSZ()

	// Field (3) 'Deneb'
	if v.Deneb == nil {
		v.Deneb = new(apiv1deneb.SignedBlindedBeaconBlock)
	}
	size += v.Deneb.SizeSSZ()

	// Field (4) 'Electra'
	if v.Electra == nil {
		v.Electra = new(apiv1electra.SignedBlindedBeaconBlock)
	}
	size += v.Electra.SizeSSZ()

	// Field (5) 'Fulu'
	if v.Fulu == nil {
		v.Fulu = new(apiv1electra.SignedBlindedBeaconBlock)
	}
	size += v.Fulu.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the VersionedSignedBlindedBeaconBlock object
func (v *VersionedSignedBlindedBeaconBlock) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the VersionedSignedBlindedBeaconBlock object with a hasher
func (v *VersionedSignedBlindedBeaconBlock) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Version'
	hh.PutUint64(uint64(v.Version))

	// Field (1) 'Bellatrix'
	if err = v.Bellatrix.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'Capella'
	if err = v.Capella.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'Deneb'
	if err = v.Deneb.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'Electra'
	if err = v.Electra.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'Fulu'
	if err = v.Fulu.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the VersionedSignedBlindedBeaconBlock object
func (v *VersionedSignedBlindedBeaconBlock) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}
