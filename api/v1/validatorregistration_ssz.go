// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: e0e47a5179a8d109953a6d27350d84971ec2b7b0f260956a42297618a1657311
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package v1

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	"time"
)

var _ = sszutils.ErrListTooBig

func (t *ValidatorRegistration) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}
func (t *ValidatorRegistration) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *ValidatorRegistration) (err error) { // *v1.ValidatorRegistration
		// Field #0 'FeeRecipient'
		dst = append(dst, t.FeeRecipient[:]...)
		// Field #1 'GasLimit'
		dst = sszutils.MarshalUint64(dst, uint64(t.GasLimit))
		// Field #2 'Timestamp'
		dst = sszutils.MarshalUint64(dst, uint64(t.Timestamp.Unix()))
		// Field #3 'Pubkey'
		dst = append(dst, t.Pubkey[:]...)
		return err
	}
	err = fn1(t)
	return dst, err
}
func (t *ValidatorRegistration) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *ValidatorRegistration) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}
func (t *ValidatorRegistration) SizeSSZ() (size int) {
	sfn1 := func(t *ValidatorRegistration) (size int) { // *ValidatorRegistration
		size = 84
		return size
	}
	return sfn1(t)
}

func (t *ValidatorRegistration) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}
func (t *ValidatorRegistration) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *ValidatorRegistration, buf []byte) (*ValidatorRegistration, error) { // *ValidatorRegistration
		var err error
		if t == nil {
			t = new(ValidatorRegistration)
		}
		buflen := len(buf)
		if buflen < 84 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'FeeRecipient'
		copy(t.FeeRecipient[:], buf[0:20])
		// Field #1 'GasLimit'
		t.GasLimit = (uint64)(sszutils.UnmarshallUint64(buf[20:28]))
		// Field #2 'Timestamp'
		t.Timestamp = (time.Time)(time.Unix(int64(sszutils.UnmarshallUint64(buf[28:36])), 0))
		// Field #3 'Pubkey'
		copy(t.Pubkey[:], buf[36:84])
		return t, err
	}
	_, err = fn1(t, buf)
	return err
}

func (t *ValidatorRegistration) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}
func (t *ValidatorRegistration) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t *ValidatorRegistration) (err error) { // *v1.ValidatorRegistration
		idx := hh.Index()
		// Field #0 'FeeRecipient'
		hh.PutBytes(t.FeeRecipient[:])
		// Field #1 'GasLimit'
		hh.PutUint64(uint64(t.GasLimit))
		// Field #2 'Timestamp'
		hh.PutUint64(uint64(t.Timestamp.Unix()))
		// Field #3 'Pubkey'
		hh.PutBytes(t.Pubkey[:])
		hh.Merkleize(idx)
		return err
	}
	return fn1(t)
}
func (t *ValidatorRegistration) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *ValidatorRegistration) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
