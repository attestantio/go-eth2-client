// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: c8981a2569c94de8646e321ec725e3a9a43541801d9942b95e37a36768c35197
// Version: v1.0.1 (https://github.com/pk910/dynamic-ssz)
package v1

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	"time"
)

var _ = sszutils.ErrListTooBig

func (t *ValidatorRegistration) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	{ // Field #0 'FeeRecipient'
		t := t.FeeRecipient
		limit := 20
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #1 'GasLimit'
		t := t.GasLimit
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #2 'Timestamp'
		t := t.Timestamp
		dst = sszutils.MarshalUint64(dst, uint64(t.Unix()))
	}
	{ // Field #3 'Pubkey'
		t := t.Pubkey
		limit := 48
		dst = append(dst, []byte(t[:limit])...)
	}
	return dst, nil
}

func (t *ValidatorRegistration) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *ValidatorRegistration) SizeSSZ() (size int) {
	return 84
}

func (t *ValidatorRegistration) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 84 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'FeeRecipient' (static)
		buf := buf[0:20]
		copy(t.FeeRecipient[:], buf)
	}
	{ // Field #1 'GasLimit' (static)
		buf := buf[20:28]
		t.GasLimit = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'Timestamp' (static)
		buf := buf[28:36]
		t.Timestamp = time.Time(time.Unix(int64(sszutils.UnmarshallUint64(buf)), 0).UTC())
	}
	{ // Field #3 'Pubkey' (static)
		buf := buf[36:84]
		copy(t.Pubkey[:], buf)
	}
	return nil
}

func (t *ValidatorRegistration) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'FeeRecipient'
		t := t.FeeRecipient
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #1 'GasLimit'
		t := t.GasLimit
		hh.PutUint64(uint64(t))
	}
	{ // Field #2 'Timestamp'
		t := t.Timestamp
		hh.PutUint64(uint64(t.Unix()))
	}
	{ // Field #3 'Pubkey'
		t := t.Pubkey
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *ValidatorRegistration) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
