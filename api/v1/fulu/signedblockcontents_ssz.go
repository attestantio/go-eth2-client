// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: fd426781a3ff0fee489c4b9794c6b01cfe6569a5faaefdcbee6ac189511dc5ad
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package fulu

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/bellatrix"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/electra"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	"github.com/holiman/uint256"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *SignedBlockContents) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *phase0.ETH1Data) (err error) { // *phase0.ETH1Data
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *phase0.ProposerSlashing) (err error) { // *phase0.ProposerSlashing
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn3 := func(t []*phase0.ProposerSlashing) (err error) { // []*phase0.ProposerSlashing
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn2(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn4 := func(t *electra.AttesterSlashing) (err error) { // *electra.AttesterSlashing
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn5 := func(t []*electra.AttesterSlashing) (err error) { // []*electra.AttesterSlashing
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn6 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist
		dst = append(dst, t[:]...)
		return err
	}
	fn7 := func(t *phase0.AttestationData) (err error) { // *phase0.AttestationData
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn8 := func(t go_bitfield.Bitvector64) (err error) { // bitfield.Bitvector64:8
		limit := 8
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		vlimit := int(limit)
		if vlimit > vlen {
			vlimit = vlen
		}
		dst = append(dst, t[:vlimit]...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, int(limit)-vlen)
		}
		return err
	}
	fn9 := func(t *electra.Attestation) (err error) { // *electra.Attestation
		dstlen := len(dst)
		// Offset #0 'AggregationBits'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #1 'Data'
		if err = fn7(t.Data); err != nil {
			return err
		}
		// Field #2 'Signature'
		dst = append(dst, t.Signature[:]...)
		// Field #3 'CommitteeBits'
		if err = fn8(t.CommitteeBits); err != nil {
			return err
		}
		// Dynamic Field #0 'AggregationBits'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn6(t.AggregationBits); err != nil {
			return err
		}
		return err
	}
	fn10 := func(t []*electra.Attestation) (err error) { // []*electra.Attestation
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			if err = fn9(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn11 := func(t [][]byte) (err error) { // [][]uint8:33:32
		limit := 33
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			if len(t[i]) > 32 {
				dst = append(dst, t[i][:32]...)
			} else {
				dst = append(dst, t[i][:]...)
				if len(t[i]) < 32 {
					dst = sszutils.AppendZeroPadding(dst, 32-len(t[i]))
				}
			}
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*32)
		}
		return err
	}
	fn12 := func(t *phase0.DepositData) (err error) { // *phase0.DepositData
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn13 := func(t *phase0.Deposit) (err error) { // *phase0.Deposit
		// Field #0 'Proof'
		if err = fn11(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = fn12(t.Data); err != nil {
			return err
		}
		return err
	}
	fn14 := func(t []*phase0.Deposit) (err error) { // []*phase0.Deposit
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn13(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn15 := func(t *phase0.SignedVoluntaryExit) (err error) { // *phase0.SignedVoluntaryExit
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn16 := func(t []*phase0.SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn15(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn17 := func(t go_bitfield.Bitvector512) (err error) { // bitfield.Bitvector512:64
		limit := 64
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		vlimit := int(limit)
		if vlimit > vlen {
			vlimit = vlen
		}
		dst = append(dst, t[:vlimit]...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, int(limit)-vlen)
		}
		return err
	}
	fn18 := func(t *altair.SyncAggregate) (err error) { // *altair.SyncAggregate
		// Field #0 'SyncCommitteeBits'
		if err = fn17(t.SyncCommitteeBits); err != nil {
			return err
		}
		// Field #1 'SyncCommitteeSignature'
		dst = append(dst, t.SyncCommitteeSignature[:]...)
		return err
	}
	fn19 := func(t *deneb.ExecutionPayload) (err error) { // *deneb.ExecutionPayload
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn20 := func(t *capella.SignedBLSToExecutionChange) (err error) { // *capella.SignedBLSToExecutionChange
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn21 := func(t []*capella.SignedBLSToExecutionChange) (err error) { // []*capella.SignedBLSToExecutionChange
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn20(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn22 := func(t []deneb.KZGCommitment) (err error) { // []deneb.KZGCommitment:48
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		return err
	}
	fn23 := func(t *electra.ExecutionRequests) (err error) { // *electra.ExecutionRequests
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn24 := func(t *electra.BeaconBlockBody) (err error) { // *electra.BeaconBlockBody
		dstlen := len(dst)
		// Field #0 'RANDAOReveal'
		dst = append(dst, t.RANDAOReveal[:]...)
		// Field #1 'ETH1Data'
		if err = fn1(t.ETH1Data); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		dst = append(dst, t.Graffiti[:]...)
		// Offset #3 'ProposerSlashings'
		offset3 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #4 'AttesterSlashings'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #5 'Attestations'
		offset5 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #6 'Deposits'
		offset6 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #7 'VoluntaryExits'
		offset7 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #8 'SyncAggregate'
		if err = fn18(t.SyncAggregate); err != nil {
			return err
		}
		// Offset #9 'ExecutionPayload'
		offset9 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #10 'BLSToExecutionChanges'
		offset10 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #11 'BlobKZGCommitments'
		offset11 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #12 'ExecutionRequests'
		offset12 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #3 'ProposerSlashings'
		sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
		if err = fn3(t.ProposerSlashings); err != nil {
			return err
		}
		// Dynamic Field #4 'AttesterSlashings'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		if err = fn5(t.AttesterSlashings); err != nil {
			return err
		}
		// Dynamic Field #5 'Attestations'
		sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
		if err = fn10(t.Attestations); err != nil {
			return err
		}
		// Dynamic Field #6 'Deposits'
		sszutils.UpdateOffset(dst[offset6:offset6+4], len(dst)-dstlen)
		if err = fn14(t.Deposits); err != nil {
			return err
		}
		// Dynamic Field #7 'VoluntaryExits'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		if err = fn16(t.VoluntaryExits); err != nil {
			return err
		}
		// Dynamic Field #9 'ExecutionPayload'
		sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
		if err = fn19(t.ExecutionPayload); err != nil {
			return err
		}
		// Dynamic Field #10 'BLSToExecutionChanges'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		if err = fn21(t.BLSToExecutionChanges); err != nil {
			return err
		}
		// Dynamic Field #11 'BlobKZGCommitments'
		sszutils.UpdateOffset(dst[offset11:offset11+4], len(dst)-dstlen)
		if err = fn22(t.BlobKZGCommitments); err != nil {
			return err
		}
		// Dynamic Field #12 'ExecutionRequests'
		sszutils.UpdateOffset(dst[offset12:offset12+4], len(dst)-dstlen)
		if err = fn23(t.ExecutionRequests); err != nil {
			return err
		}
		return err
	}
	fn25 := func(t *electra.BeaconBlock) (err error) { // *electra.BeaconBlock
		dstlen := len(dst)
		// Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
		// Field #1 'ProposerIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		dst = append(dst, t.ParentRoot[:]...)
		// Field #3 'StateRoot'
		dst = append(dst, t.StateRoot[:]...)
		// Offset #4 'Body'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #4 'Body'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		if err = fn24(t.Body); err != nil {
			return err
		}
		return err
	}
	fn26 := func(t *electra.SignedBeaconBlock) (err error) { // *electra.SignedBeaconBlock
		dstlen := len(dst)
		// Offset #0 'Message'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #1 'Signature'
		dst = append(dst, t.Signature[:]...)
		// Dynamic Field #0 'Message'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn25(t.Message); err != nil {
			return err
		}
		return err
	}
	fn27 := func(t []deneb.KZGProof) (err error) { // []deneb.KZGProof:48
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		return err
	}
	fn28 := func(t []deneb.Blob) (err error) { // []deneb.Blob:131072
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		return err
	}
	fn29 := func(t *SignedBlockContents) (err error) { // *fulu.SignedBlockContents
		dstlen := len(dst)
		// Offset #0 'SignedBlock'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #1 'KZGProofs'
		offset1 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #2 'Blobs'
		offset2 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #0 'SignedBlock'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn26(t.SignedBlock); err != nil {
			return err
		}
		// Dynamic Field #1 'KZGProofs'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		if err = fn27(t.KZGProofs); err != nil {
			return err
		}
		// Dynamic Field #2 'Blobs'
		sszutils.UpdateOffset(dst[offset2:offset2+4], len(dst)-dstlen)
		if err = fn28(t.Blobs); err != nil {
			return err
		}
		return err
	}
	err = fn29(t)
	return dst, err
}
func (t *SignedBlockContents) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}

func (t *SignedBlockContents) SizeSSZ() (size int) {
	sfn1 := func(t []*phase0.ProposerSlashing) (size int) { // []*phase0.ProposerSlashing
		size += len(t) * 416
		return size
	}
	sfn2 := func(t *electra.AttesterSlashing) (size int) { // *electra.AttesterSlashing
		size = t.SizeSSZ()
		return size
	}
	sfn3 := func(t []*electra.AttesterSlashing) (size int) { // []*electra.AttesterSlashing
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn2(t[i])
		}
		return size
	}
	sfn4 := func(t go_bitfield.Bitlist) (size int) { // go_bitfield.Bitlist
		size += len(t)
		return size
	}
	sfn5 := func(t go_bitfield.Bitvector64) (size int) { // go_bitfield.Bitvector64:8
		limit := 8
		size += int(limit) * 1
		return size
	}
	sfn6 := func(t *electra.Attestation) (size int) { // *electra.Attestation
		size = 224
		size += 4 + sfn4(t.AggregationBits)
		size += sfn5(t.CommitteeBits)
		return size
	}
	sfn7 := func(t []*electra.Attestation) (size int) { // []*electra.Attestation
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn6(t[i])
		}
		return size
	}
	sfn8 := func(t [][]byte) (size int) { // [][]byte:33:32
		limit := 33
		size += int(limit) * 32
		return size
	}
	sfn9 := func(t *phase0.Deposit) (size int) { // *phase0.Deposit
		size = 184
		size += sfn8(t.Proof)
		return size
	}
	sfn10 := func(t []*phase0.Deposit) (size int) { // []*phase0.Deposit
		if len(t) > 0 {
			size += len(t) * sfn9(t[0])
		}
		return size
	}
	sfn11 := func(t []*phase0.SignedVoluntaryExit) (size int) { // []*phase0.SignedVoluntaryExit
		size += len(t) * 112
		return size
	}
	sfn12 := func(t go_bitfield.Bitvector512) (size int) { // go_bitfield.Bitvector512:64
		limit := 64
		size += int(limit) * 1
		return size
	}
	sfn13 := func(t *altair.SyncAggregate) (size int) { // *altair.SyncAggregate
		size = 96
		size += sfn12(t.SyncCommitteeBits)
		return size
	}
	sfn14 := func(t *deneb.ExecutionPayload) (size int) { // *deneb.ExecutionPayload
		size = t.SizeSSZ()
		return size
	}
	sfn15 := func(t []*capella.SignedBLSToExecutionChange) (size int) { // []*capella.SignedBLSToExecutionChange
		size += len(t) * 172
		return size
	}
	sfn16 := func(t []deneb.KZGCommitment) (size int) { // []deneb.KZGCommitment:48
		size += len(t) * 48
		return size
	}
	sfn17 := func(t *electra.ExecutionRequests) (size int) { // *electra.ExecutionRequests
		size = t.SizeSSZ()
		return size
	}
	sfn18 := func(t *electra.BeaconBlockBody) (size int) { // *electra.BeaconBlockBody
		size = 200
		size += 4 + sfn1(t.ProposerSlashings)
		size += 4 + sfn3(t.AttesterSlashings)
		size += 4 + sfn7(t.Attestations)
		size += 4 + sfn10(t.Deposits)
		size += 4 + sfn11(t.VoluntaryExits)
		size += sfn13(t.SyncAggregate)
		size += 4 + sfn14(t.ExecutionPayload)
		size += 4 + sfn15(t.BLSToExecutionChanges)
		size += 4 + sfn16(t.BlobKZGCommitments)
		size += 4 + sfn17(t.ExecutionRequests)
		return size
	}
	sfn19 := func(t *electra.BeaconBlock) (size int) { // *electra.BeaconBlock
		size = 80
		size += 4 + sfn18(t.Body)
		return size
	}
	sfn20 := func(t *electra.SignedBeaconBlock) (size int) { // *electra.SignedBeaconBlock
		size = 96
		size += 4 + sfn19(t.Message)
		return size
	}
	sfn21 := func(t []deneb.KZGProof) (size int) { // []deneb.KZGProof:48
		size += len(t) * 48
		return size
	}
	sfn22 := func(t []deneb.Blob) (size int) { // []deneb.Blob:131072
		size += len(t) * 131072
		return size
	}
	sfn23 := func(t *SignedBlockContents) (size int) { // *SignedBlockContents
		size = 0
		size += 4 + sfn20(t.SignedBlock)
		size += 4 + sfn21(t.KZGProofs)
		size += 4 + sfn22(t.Blobs)
		return size
	}
	return sfn23(t)
}

func (t *SignedBlockContents) UnmarshalSSZ(buf []byte) (err error) {
	fn1 := func(t *phase0.ETH1Data, buf []byte) (*phase0.ETH1Data, error) { // *phase0.ETH1Data
		var err error
		if t == nil {
			t = new(phase0.ETH1Data)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *phase0.ProposerSlashing, buf []byte) (*phase0.ProposerSlashing, error) { // *phase0.ProposerSlashing
		var err error
		if t == nil {
			t = new(phase0.ProposerSlashing)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn3 := func(t []*phase0.ProposerSlashing, buf []byte) ([]*phase0.ProposerSlashing, error) { // []*phase0.ProposerSlashing
		var err error
		buflen := len(buf)
		itemsize := 416
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.ProposerSlashing, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn2(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn4 := func(t *electra.AttesterSlashing, buf []byte) (*electra.AttesterSlashing, error) { // *electra.AttesterSlashing
		var err error
		if t == nil {
			t = new(electra.AttesterSlashing)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn5 := func(t []*electra.AttesterSlashing, buf []byte) ([]*electra.AttesterSlashing, error) { // []*electra.AttesterSlashing
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*electra.AttesterSlashing, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if t[i], err = fn4(t[i], buf[offset:endOffset]); err != nil {
				return t, err
			}
			offset = endOffset
		}
		return t, err
	}
	fn6 := func(t go_bitfield.Bitlist, buf []byte) (go_bitfield.Bitlist, error) { // go_bitfield.Bitlist
		var err error
		if len(t) < len(buf) {
			t = make(go_bitfield.Bitlist, len(buf))
		} else {
			t = t[:len(buf)]
		}
		if len(buf) > 0 {
			copy(t[:], buf)
		}
		return t, err
	}
	fn7 := func(t *phase0.AttestationData, buf []byte) (*phase0.AttestationData, error) { // *phase0.AttestationData
		var err error
		if t == nil {
			t = new(phase0.AttestationData)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn8 := func(t go_bitfield.Bitvector64, buf []byte) (go_bitfield.Bitvector64, error) { // go_bitfield.Bitvector64:8
		var err error
		itemsize := 1
		limit := 8
		if len(t) < int(limit) {
			t = make(go_bitfield.Bitvector64, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		copy(t[:], buf)
		return t, err
	}
	fn9 := func(t *electra.Attestation, buf []byte) (*electra.Attestation, error) { // *electra.Attestation
		var err error
		if t == nil {
			t = new(electra.Attestation)
		}
		bufpos := 236
		buflen := len(buf)
		if buflen < 236 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'AggregationBits'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Field #1 'Data'
		if t.Data, err = fn7(t.Data, buf[4:132]); err != nil {
			return t, err
		}
		// Field #2 'Signature'
		copy(t.Signature[:], buf[132:228])
		// Field #3 'CommitteeBits'
		if t.CommitteeBits, err = fn8(t.CommitteeBits, buf[228:236]); err != nil {
			return t, err
		}
		// Dynamic Field #0 'AggregationBits'
		if offset0 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:]
			if t.AggregationBits, err = fn6(t.AggregationBits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	fn10 := func(t []*electra.Attestation, buf []byte) ([]*electra.Attestation, error) { // []*electra.Attestation
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*electra.Attestation, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if t[i], err = fn9(t[i], buf[offset:endOffset]); err != nil {
				return t, err
			}
			offset = endOffset
		}
		return t, err
	}
	fn11 := func(t [][]byte, buf []byte) ([][]byte, error) { // [][]byte:33:32
		var err error
		itemsize := 32
		limit := 33
		if len(t) < int(limit) {
			t = make([][]byte, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		for i := 0; i < int(limit); i++ {
			if len(t[i]) < 32 {
				t[i] = make([]byte, 32)
			} else {
				t[i] = t[i][:32]
			}
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn12 := func(t *phase0.DepositData, buf []byte) (*phase0.DepositData, error) { // *phase0.DepositData
		var err error
		if t == nil {
			t = new(phase0.DepositData)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn13 := func(t *phase0.Deposit, buf []byte) (*phase0.Deposit, error) { // *phase0.Deposit
		var err error
		if t == nil {
			t = new(phase0.Deposit)
		}
		buflen := len(buf)
		if buflen < 1240 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Proof'
		if t.Proof, err = fn11(t.Proof, buf[0:1056]); err != nil {
			return t, err
		}
		// Field #1 'Data'
		if t.Data, err = fn12(t.Data, buf[1056:1240]); err != nil {
			return t, err
		}
		return t, err
	}
	fn14 := func(t []*phase0.Deposit, buf []byte) ([]*phase0.Deposit, error) { // []*phase0.Deposit
		var err error
		buflen := len(buf)
		itemsize := 1240
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.Deposit, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn13(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn15 := func(t *phase0.SignedVoluntaryExit, buf []byte) (*phase0.SignedVoluntaryExit, error) { // *phase0.SignedVoluntaryExit
		var err error
		if t == nil {
			t = new(phase0.SignedVoluntaryExit)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn16 := func(t []*phase0.SignedVoluntaryExit, buf []byte) ([]*phase0.SignedVoluntaryExit, error) { // []*phase0.SignedVoluntaryExit
		var err error
		buflen := len(buf)
		itemsize := 112
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.SignedVoluntaryExit, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn15(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn17 := func(t go_bitfield.Bitvector512, buf []byte) (go_bitfield.Bitvector512, error) { // go_bitfield.Bitvector512:64
		var err error
		itemsize := 1
		limit := 64
		if len(t) < int(limit) {
			t = make(go_bitfield.Bitvector512, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		copy(t[:], buf)
		return t, err
	}
	fn18 := func(t *altair.SyncAggregate, buf []byte) (*altair.SyncAggregate, error) { // *altair.SyncAggregate
		var err error
		if t == nil {
			t = new(altair.SyncAggregate)
		}
		buflen := len(buf)
		if buflen < 160 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'SyncCommitteeBits'
		if t.SyncCommitteeBits, err = fn17(t.SyncCommitteeBits, buf[0:64]); err != nil {
			return t, err
		}
		// Field #1 'SyncCommitteeSignature'
		copy(t.SyncCommitteeSignature[:], buf[64:160])
		return t, err
	}
	fn19 := func(t *deneb.ExecutionPayload, buf []byte) (*deneb.ExecutionPayload, error) { // *deneb.ExecutionPayload
		var err error
		if t == nil {
			t = new(deneb.ExecutionPayload)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn20 := func(t *capella.SignedBLSToExecutionChange, buf []byte) (*capella.SignedBLSToExecutionChange, error) { // *capella.SignedBLSToExecutionChange
		var err error
		if t == nil {
			t = new(capella.SignedBLSToExecutionChange)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn21 := func(t []*capella.SignedBLSToExecutionChange, buf []byte) ([]*capella.SignedBLSToExecutionChange, error) { // []*capella.SignedBLSToExecutionChange
		var err error
		buflen := len(buf)
		itemsize := 172
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*capella.SignedBLSToExecutionChange, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn20(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn22 := func(t []deneb.KZGCommitment, buf []byte) ([]deneb.KZGCommitment, error) { // []deneb.KZGCommitment:48
		var err error
		buflen := len(buf)
		itemsize := 48
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]deneb.KZGCommitment, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn23 := func(t *electra.ExecutionRequests, buf []byte) (*electra.ExecutionRequests, error) { // *electra.ExecutionRequests
		var err error
		if t == nil {
			t = new(electra.ExecutionRequests)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn24 := func(t *electra.BeaconBlockBody, buf []byte) (*electra.BeaconBlockBody, error) { // *electra.BeaconBlockBody
		var err error
		if t == nil {
			t = new(electra.BeaconBlockBody)
		}
		bufpos := 396
		buflen := len(buf)
		if buflen < 396 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #3 'ProposerSlashings'
		offset3 := int(sszutils.ReadOffset(buf[200:204]))
		// Read offset #4 'AttesterSlashings'
		offset4 := int(sszutils.ReadOffset(buf[204:208]))
		// Read offset #5 'Attestations'
		offset5 := int(sszutils.ReadOffset(buf[208:212]))
		// Read offset #6 'Deposits'
		offset6 := int(sszutils.ReadOffset(buf[212:216]))
		// Read offset #7 'VoluntaryExits'
		offset7 := int(sszutils.ReadOffset(buf[216:220]))
		// Read offset #9 'ExecutionPayload'
		offset9 := int(sszutils.ReadOffset(buf[380:384]))
		// Read offset #10 'BLSToExecutionChanges'
		offset10 := int(sszutils.ReadOffset(buf[384:388]))
		// Read offset #11 'BlobKZGCommitments'
		offset11 := int(sszutils.ReadOffset(buf[388:392]))
		// Read offset #12 'ExecutionRequests'
		offset12 := int(sszutils.ReadOffset(buf[392:396]))
		// Field #0 'RANDAOReveal'
		copy(t.RANDAOReveal[:], buf[0:96])
		// Field #1 'ETH1Data'
		if t.ETH1Data, err = fn1(t.ETH1Data, buf[96:168]); err != nil {
			return t, err
		}
		// Field #2 'Graffiti'
		copy(t.Graffiti[:], buf[168:200])
		// Field #8 'SyncAggregate'
		if t.SyncAggregate, err = fn18(t.SyncAggregate, buf[220:380]); err != nil {
			return t, err
		}
		// Dynamic Field #3 'ProposerSlashings'
		if offset3 < bufpos || offset4 > buflen || offset4 < offset3 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset3:offset4]
			if t.ProposerSlashings, err = fn3(t.ProposerSlashings, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #4 'AttesterSlashings'
		if offset4 < bufpos || offset5 > buflen || offset5 < offset4 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset4:offset5]
			if t.AttesterSlashings, err = fn5(t.AttesterSlashings, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #5 'Attestations'
		if offset5 < bufpos || offset6 > buflen || offset6 < offset5 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset5:offset6]
			if t.Attestations, err = fn10(t.Attestations, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #6 'Deposits'
		if offset6 < bufpos || offset7 > buflen || offset7 < offset6 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset6:offset7]
			if t.Deposits, err = fn14(t.Deposits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #7 'VoluntaryExits'
		if offset7 < bufpos || offset9 > buflen || offset9 < offset7 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset7:offset9]
			if t.VoluntaryExits, err = fn16(t.VoluntaryExits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #9 'ExecutionPayload'
		if offset9 < bufpos || offset10 > buflen || offset10 < offset9 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset9:offset10]
			if t.ExecutionPayload, err = fn19(t.ExecutionPayload, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #10 'BLSToExecutionChanges'
		if offset10 < bufpos || offset11 > buflen || offset11 < offset10 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset10:offset11]
			if t.BLSToExecutionChanges, err = fn21(t.BLSToExecutionChanges, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #11 'BlobKZGCommitments'
		if offset11 < bufpos || offset12 > buflen || offset12 < offset11 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset11:offset12]
			if t.BlobKZGCommitments, err = fn22(t.BlobKZGCommitments, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #12 'ExecutionRequests'
		if offset12 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset12:]
			if t.ExecutionRequests, err = fn23(t.ExecutionRequests, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	fn25 := func(t *electra.BeaconBlock, buf []byte) (*electra.BeaconBlock, error) { // *electra.BeaconBlock
		var err error
		if t == nil {
			t = new(electra.BeaconBlock)
		}
		bufpos := 84
		buflen := len(buf)
		if buflen < 84 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #4 'Body'
		offset4 := int(sszutils.ReadOffset(buf[80:84]))
		// Field #0 'Slot'
		t.Slot = (phase0.Slot)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'ProposerIndex'
		t.ProposerIndex = (phase0.ValidatorIndex)(sszutils.UnmarshallUint64(buf[8:16]))
		// Field #2 'ParentRoot'
		copy(t.ParentRoot[:], buf[16:48])
		// Field #3 'StateRoot'
		copy(t.StateRoot[:], buf[48:80])
		// Dynamic Field #4 'Body'
		if offset4 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset4:]
			if t.Body, err = fn24(t.Body, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	fn26 := func(t *electra.SignedBeaconBlock, buf []byte) (*electra.SignedBeaconBlock, error) { // *electra.SignedBeaconBlock
		var err error
		if t == nil {
			t = new(electra.SignedBeaconBlock)
		}
		bufpos := 100
		buflen := len(buf)
		if buflen < 100 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'Message'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Field #1 'Signature'
		copy(t.Signature[:], buf[4:100])
		// Dynamic Field #0 'Message'
		if offset0 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:]
			if t.Message, err = fn25(t.Message, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	fn27 := func(t []deneb.KZGProof, buf []byte) ([]deneb.KZGProof, error) { // []deneb.KZGProof:48
		var err error
		buflen := len(buf)
		itemsize := 48
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]deneb.KZGProof, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn28 := func(t []deneb.Blob, buf []byte) ([]deneb.Blob, error) { // []deneb.Blob:131072
		var err error
		buflen := len(buf)
		itemsize := 131072
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]deneb.Blob, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn29 := func(t *SignedBlockContents, buf []byte) (*SignedBlockContents, error) { // *SignedBlockContents
		var err error
		if t == nil {
			t = new(SignedBlockContents)
		}
		bufpos := 12
		buflen := len(buf)
		if buflen < 12 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'SignedBlock'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Read offset #1 'KZGProofs'
		offset1 := int(sszutils.ReadOffset(buf[4:8]))
		// Read offset #2 'Blobs'
		offset2 := int(sszutils.ReadOffset(buf[8:12]))
		// Dynamic Field #0 'SignedBlock'
		if offset0 < bufpos || offset1 > buflen || offset1 < offset0 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:offset1]
			if t.SignedBlock, err = fn26(t.SignedBlock, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #1 'KZGProofs'
		if offset1 < bufpos || offset2 > buflen || offset2 < offset1 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset1:offset2]
			if t.KZGProofs, err = fn27(t.KZGProofs, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #2 'Blobs'
		if offset2 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset2:]
			if t.Blobs, err = fn28(t.Blobs, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn29(t, buf)
	return err
}

func (t *SignedBlockContents) HashTreeRootWith(hh sszutils.HashWalker) error {
	fn1 := func(t []*phase0.ProposerSlashing) (err error) { // []*phase0.ProposerSlashing:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t []uint64) (err error) { // []uint64:131072
		maxLen := 131072
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.AppendUint64(uint64(t[i]))
		}
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(8))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn3 := func(t *electra.IndexedAttestation) (err error) { // *electra.IndexedAttestation
		idx := hh.Index()
		// Field #0 'AttestingIndices'
		if err = fn2(t.AttestingIndices); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	fn4 := func(t *electra.AttesterSlashing) (err error) { // *electra.AttesterSlashing:pack
		idx := hh.Index()
		// Field #0 'Attestation1'
		if err = fn3(t.Attestation1); err != nil {
			return err
		}
		// Field #1 'Attestation2'
		if err = fn3(t.Attestation2); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn5 := func(t []*electra.AttesterSlashing) (err error) { // []*electra.AttesterSlashing:1
		maxLen := 1
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn6 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist:131072
		maxLen := uint64(131072)
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > maxLen {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (maxLen+255)/256)
		return err
	}
	fn7 := func(t go_bitfield.Bitvector64) (err error) { // bitfield.Bitvector64:8
		limit := 8
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn8 := func(t *electra.Attestation) (err error) { // *electra.Attestation:pack
		idx := hh.Index()
		// Field #0 'AggregationBits'
		if err = fn6(t.AggregationBits); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		// Field #3 'CommitteeBits'
		if err = fn7(t.CommitteeBits); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn9 := func(t []*electra.Attestation) (err error) { // []*electra.Attestation:8
		maxLen := 8
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn8(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn10 := func(t [][]byte) (err error) { // [][]uint8:33:32
		limit := 33
		idx := hh.Index()
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		for i := vlen; i < int(limit); i++ {
			hh.PutUint8(0)
		}
		hh.Merkleize(idx)
		return err
	}
	fn11 := func(t *phase0.Deposit) (err error) { // *phase0.Deposit:pack
		idx := hh.Index()
		// Field #0 'Proof'
		if err = fn10(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn12 := func(t []*phase0.Deposit) (err error) { // []*phase0.Deposit:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn11(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn13 := func(t []*phase0.SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn14 := func(t go_bitfield.Bitvector512) (err error) { // bitfield.Bitvector512:64
		limit := 64
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn15 := func(t *altair.SyncAggregate) (err error) { // *altair.SyncAggregate
		idx := hh.Index()
		// Field #0 'SyncCommitteeBits'
		if err = fn14(t.SyncCommitteeBits); err != nil {
			return err
		}
		// Field #1 'SyncCommitteeSignature'
		hh.PutBytes(t.SyncCommitteeSignature[:])
		hh.Merkleize(idx)
		return err
	}
	fn16 := func(t []byte) (err error) { // []uint8:32
		maxLen := 32
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn17 := func(t *uint256.Int) (err error) { // *uint256.Int:4
		var root [32]byte
		if root, err = t.HashTreeRoot(); err == nil {
			hh.Append(root[:])
		}
		return err
	}
	fn18 := func(t bellatrix.Transaction) (err error) { // bellatrix.Transaction:1073741824:pack
		maxLen := 1073741824
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn19 := func(t []bellatrix.Transaction) (err error) { // []bellatrix.Transaction:1048576
		maxLen := 1048576
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn18(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn20 := func(t []*capella.Withdrawal) (err error) { // []*capella.Withdrawal:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn21 := func(t *deneb.ExecutionPayload) (err error) { // *deneb.ExecutionPayload
		idx := hh.Index()
		// Field #0 'ParentHash'
		hh.PutBytes(t.ParentHash[:])
		// Field #1 'FeeRecipient'
		hh.PutBytes(t.FeeRecipient[:])
		// Field #2 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #3 'ReceiptsRoot'
		hh.PutBytes(t.ReceiptsRoot[:])
		// Field #4 'LogsBloom'
		hh.PutBytes(t.LogsBloom[:])
		// Field #5 'PrevRandao'
		hh.PutBytes(t.PrevRandao[:])
		// Field #6 'BlockNumber'
		hh.PutUint64(uint64(t.BlockNumber))
		// Field #7 'GasLimit'
		hh.PutUint64(uint64(t.GasLimit))
		// Field #8 'GasUsed'
		hh.PutUint64(uint64(t.GasUsed))
		// Field #9 'Timestamp'
		hh.PutUint64(uint64(t.Timestamp))
		// Field #10 'ExtraData'
		if err = fn16(t.ExtraData); err != nil {
			return err
		}
		// Field #11 'BaseFeePerGas'
		if err = fn17(t.BaseFeePerGas); err != nil {
			return err
		}
		// Field #12 'BlockHash'
		hh.PutBytes(t.BlockHash[:])
		// Field #13 'Transactions'
		if err = fn19(t.Transactions); err != nil {
			return err
		}
		// Field #14 'Withdrawals'
		if err = fn20(t.Withdrawals); err != nil {
			return err
		}
		// Field #15 'BlobGasUsed'
		hh.PutUint64(uint64(t.BlobGasUsed))
		// Field #16 'ExcessBlobGas'
		hh.PutUint64(uint64(t.ExcessBlobGas))
		hh.Merkleize(idx)
		return err
	}
	fn22 := func(t []*capella.SignedBLSToExecutionChange) (err error) { // []*capella.SignedBLSToExecutionChange:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn23 := func(t []deneb.KZGCommitment) (err error) { // []deneb.KZGCommitment:4096:48
		maxLen := 4096
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn24 := func(t []*electra.DepositRequest) (err error) { // []*electra.DepositRequest:8192
		maxLen := 8192
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn25 := func(t []*electra.WithdrawalRequest) (err error) { // []*electra.WithdrawalRequest:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn26 := func(t []*electra.ConsolidationRequest) (err error) { // []*electra.ConsolidationRequest:2
		maxLen := 2
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn27 := func(t *electra.ExecutionRequests) (err error) { // *electra.ExecutionRequests
		idx := hh.Index()
		// Field #0 'Deposits'
		if err = fn24(t.Deposits); err != nil {
			return err
		}
		// Field #1 'Withdrawals'
		if err = fn25(t.Withdrawals); err != nil {
			return err
		}
		// Field #2 'Consolidations'
		if err = fn26(t.Consolidations); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn28 := func(t *electra.BeaconBlockBody) (err error) { // *electra.BeaconBlockBody
		idx := hh.Index()
		// Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:])
		// Field #1 'ETH1Data'
		if err = t.ETH1Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:])
		// Field #3 'ProposerSlashings'
		if err = fn1(t.ProposerSlashings); err != nil {
			return err
		}
		// Field #4 'AttesterSlashings'
		if err = fn5(t.AttesterSlashings); err != nil {
			return err
		}
		// Field #5 'Attestations'
		if err = fn9(t.Attestations); err != nil {
			return err
		}
		// Field #6 'Deposits'
		if err = fn12(t.Deposits); err != nil {
			return err
		}
		// Field #7 'VoluntaryExits'
		if err = fn13(t.VoluntaryExits); err != nil {
			return err
		}
		// Field #8 'SyncAggregate'
		if err = fn15(t.SyncAggregate); err != nil {
			return err
		}
		// Field #9 'ExecutionPayload'
		if err = fn21(t.ExecutionPayload); err != nil {
			return err
		}
		// Field #10 'BLSToExecutionChanges'
		if err = fn22(t.BLSToExecutionChanges); err != nil {
			return err
		}
		// Field #11 'BlobKZGCommitments'
		if err = fn23(t.BlobKZGCommitments); err != nil {
			return err
		}
		// Field #12 'ExecutionRequests'
		if err = fn27(t.ExecutionRequests); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn29 := func(t *electra.BeaconBlock) (err error) { // *electra.BeaconBlock
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'Body'
		if err = fn28(t.Body); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn30 := func(t *electra.SignedBeaconBlock) (err error) { // *electra.SignedBeaconBlock
		idx := hh.Index()
		// Field #0 'Message'
		if err = fn29(t.Message); err != nil {
			return err
		}
		// Field #1 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	fn31 := func(t []deneb.KZGProof) (err error) { // []deneb.KZGProof:33554432:48
		maxLen := 33554432
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn32 := func(t []deneb.Blob) (err error) { // []deneb.Blob:4096:131072
		maxLen := 4096
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn33 := func(t *SignedBlockContents) (err error) { // *fulu.SignedBlockContents
		idx := hh.Index()
		// Field #0 'SignedBlock'
		if err = fn30(t.SignedBlock); err != nil {
			return err
		}
		// Field #1 'KZGProofs'
		if err = fn31(t.KZGProofs); err != nil {
			return err
		}
		// Field #2 'Blobs'
		if err = fn32(t.Blobs); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn33(t)
}
func (t *SignedBlockContents) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
