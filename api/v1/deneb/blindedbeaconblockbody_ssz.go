// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 50f0c9944245d3c2d0419ae3bd921ef2ca5d29eb30d40e0b32196f1d44c88d66
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package deneb

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BlindedBeaconBlockBody) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BlindedBeaconBlockBody) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(BlindedBeaconBlockBody)
	}
	dstlen := len(dst)
	{ // Field #0 'RANDAOReveal'
		dst = append(dst, []byte(t.RANDAOReveal[:96])...)
	}
	{ // Field #1 'ETH1Data'
		t := t.ETH1Data
		if t == nil {
			t = new(phase0.ETH1Data)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #2 'Graffiti'
		dst = append(dst, []byte(t.Graffiti[:32])...)
	}
	// Offset #3 'ProposerSlashings'
	offset3 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #4 'AttesterSlashings'
	offset4 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #5 'Attestations'
	offset5 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #6 'Deposits'
	offset6 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #7 'VoluntaryExits'
	offset7 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #8 'SyncAggregate'
		t := t.SyncAggregate
		if t == nil {
			t = new(altair.SyncAggregate)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	// Offset #9 'ExecutionPayloadHeader'
	offset9 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #10 'BLSToExecutionChanges'
	offset10 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #11 'BlobKZGCommitments'
	offset11 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #3 'ProposerSlashings'
		sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
		t := t.ProposerSlashings
		vlen := len(t)
		if vlen > 16 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.ProposerSlashing)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #4 'AttesterSlashings'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		t := t.AttesterSlashings
		vlen := len(t)
		if vlen > 2 {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			if t == nil {
				t = new(phase0.AttesterSlashing)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #5 'Attestations'
		sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
		t := t.Attestations
		vlen := len(t)
		if vlen > 128 {
			return dst, sszutils.ErrListTooBig
		}
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			t := t[i]
			if t == nil {
				t = new(phase0.Attestation)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #6 'Deposits'
		sszutils.UpdateOffset(dst[offset6:offset6+4], len(dst)-dstlen)
		t := t.Deposits
		vlen := len(t)
		if vlen > 16 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.Deposit)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #7 'VoluntaryExits'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		t := t.VoluntaryExits
		vlen := len(t)
		if vlen > 16 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.SignedVoluntaryExit)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #9 'ExecutionPayloadHeader'
		sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
		t := t.ExecutionPayloadHeader
		if t == nil {
			t = new(deneb.ExecutionPayloadHeader)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #10 'BLSToExecutionChanges'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		t := t.BLSToExecutionChanges
		vlen := len(t)
		if vlen > 16 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			if t == nil {
				t = new(capella.SignedBLSToExecutionChange)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
	}
	{ // Dynamic Field #11 'BlobKZGCommitments'
		sszutils.UpdateOffset(dst[offset11:offset11+4], len(dst)-dstlen)
		t := t.BlobKZGCommitments
		vlen := len(t)
		if vlen > 4096 {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			dst = append(dst, []byte(t[i][:48])...)
		}
	}
	return dst, nil
}

func (t *BlindedBeaconBlockBody) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 392 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'RANDAOReveal' (static)
		buf := buf[0:96]
		copy(t.RANDAOReveal[:], buf)
	}
	{ // Field #1 'ETH1Data' (static)
		buf := buf[96:168]
		if t.ETH1Data == nil {
			t.ETH1Data = new(phase0.ETH1Data)
		}
		if err = t.ETH1Data.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #2 'Graffiti' (static)
		buf := buf[168:200]
		copy(t.Graffiti[:], buf)
	}
	// Field #3 'ProposerSlashings' (offset)
	offset3 := int(sszutils.UnmarshallUint32(buf[200:204]))
	if offset3 != 392 {
		return sszutils.ErrOffset
	}
	// Field #4 'AttesterSlashings' (offset)
	offset4 := int(sszutils.UnmarshallUint32(buf[204:208]))
	if offset4 < offset3 || offset4 > buflen {
		return sszutils.ErrOffset
	}
	// Field #5 'Attestations' (offset)
	offset5 := int(sszutils.UnmarshallUint32(buf[208:212]))
	if offset5 < offset4 || offset5 > buflen {
		return sszutils.ErrOffset
	}
	// Field #6 'Deposits' (offset)
	offset6 := int(sszutils.UnmarshallUint32(buf[212:216]))
	if offset6 < offset5 || offset6 > buflen {
		return sszutils.ErrOffset
	}
	// Field #7 'VoluntaryExits' (offset)
	offset7 := int(sszutils.UnmarshallUint32(buf[216:220]))
	if offset7 < offset6 || offset7 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #8 'SyncAggregate' (static)
		buf := buf[220:380]
		if t.SyncAggregate == nil {
			t.SyncAggregate = new(altair.SyncAggregate)
		}
		if err = t.SyncAggregate.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	// Field #9 'ExecutionPayloadHeader' (offset)
	offset9 := int(sszutils.UnmarshallUint32(buf[380:384]))
	if offset9 < offset7 || offset9 > buflen {
		return sszutils.ErrOffset
	}
	// Field #10 'BLSToExecutionChanges' (offset)
	offset10 := int(sszutils.UnmarshallUint32(buf[384:388]))
	if offset10 < offset9 || offset10 > buflen {
		return sszutils.ErrOffset
	}
	// Field #11 'BlobKZGCommitments' (offset)
	offset11 := int(sszutils.UnmarshallUint32(buf[388:392]))
	if offset11 < offset10 || offset11 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #3 'ProposerSlashings' (dynamic)
		buf := buf[offset3:offset4]
		val1 := t.ProposerSlashings
		itemCount := len(buf) / 416
		if len(buf)%416 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val1 = sszutils.ExpandSlice(val1, itemCount)
		for i := 0; i < itemCount; i++ {
			if val1[i] == nil {
				val1[i] = new(phase0.ProposerSlashing)
			}
			buf := buf[416*i : 416*(i+1)]
			if err = val1[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.ProposerSlashings = val1
	}
	{ // Field #4 'AttesterSlashings' (dynamic)
		buf := buf[offset4:offset5]
		val2 := t.AttesterSlashings
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset / 4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		val2 = sszutils.ExpandSlice(val2, itemCount)
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val3 := val2[i]
			if val3 == nil {
				val3 = new(phase0.AttesterSlashing)
			}
			if err = val3.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val2[i] = val3
		}
		t.AttesterSlashings = val2
	}
	{ // Field #5 'Attestations' (dynamic)
		buf := buf[offset5:offset6]
		val4 := t.Attestations
		startOffset := int(0)
		if len(buf) != 0 {
			if len(buf) < 4 {
				return sszutils.ErrUnexpectedEOF
			}
			startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
		}
		itemCount := startOffset / 4
		if startOffset%4 != 0 || len(buf) < startOffset {
			return sszutils.ErrUnexpectedEOF
		}
		val4 = sszutils.ExpandSlice(val4, itemCount)
		for i := 0; i < itemCount; i++ {
			var endOffset int
			if i < itemCount-1 {
				endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = len(buf)
			}
			if endOffset < startOffset || endOffset > len(buf) {
				return sszutils.ErrOffset
			}
			buf := buf[startOffset:endOffset]
			startOffset = endOffset
			val5 := val4[i]
			if val5 == nil {
				val5 = new(phase0.Attestation)
			}
			if err = val5.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val4[i] = val5
		}
		t.Attestations = val4
	}
	{ // Field #6 'Deposits' (dynamic)
		buf := buf[offset6:offset7]
		val6 := t.Deposits
		itemCount := len(buf) / 1240
		if len(buf)%1240 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val6 = sszutils.ExpandSlice(val6, itemCount)
		for i := 0; i < itemCount; i++ {
			if val6[i] == nil {
				val6[i] = new(phase0.Deposit)
			}
			buf := buf[1240*i : 1240*(i+1)]
			if err = val6[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.Deposits = val6
	}
	{ // Field #7 'VoluntaryExits' (dynamic)
		buf := buf[offset7:offset9]
		val7 := t.VoluntaryExits
		itemCount := len(buf) / 112
		if len(buf)%112 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val7 = sszutils.ExpandSlice(val7, itemCount)
		for i := 0; i < itemCount; i++ {
			if val7[i] == nil {
				val7[i] = new(phase0.SignedVoluntaryExit)
			}
			buf := buf[112*i : 112*(i+1)]
			if err = val7[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.VoluntaryExits = val7
	}
	{ // Field #9 'ExecutionPayloadHeader' (dynamic)
		buf := buf[offset9:offset10]
		val8 := t.ExecutionPayloadHeader
		if val8 == nil {
			val8 = new(deneb.ExecutionPayloadHeader)
		}
		if err = val8.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.ExecutionPayloadHeader = val8
	}
	{ // Field #10 'BLSToExecutionChanges' (dynamic)
		buf := buf[offset10:offset11]
		val9 := t.BLSToExecutionChanges
		itemCount := len(buf) / 172
		if len(buf)%172 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val9 = sszutils.ExpandSlice(val9, itemCount)
		for i := 0; i < itemCount; i++ {
			if val9[i] == nil {
				val9[i] = new(capella.SignedBLSToExecutionChange)
			}
			buf := buf[172*i : 172*(i+1)]
			if err = val9[i].UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		t.BLSToExecutionChanges = val9
	}
	{ // Field #11 'BlobKZGCommitments' (dynamic)
		buf := buf[offset11:]
		val10 := t.BlobKZGCommitments
		itemCount := len(buf) / 48
		if len(buf)%48 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		val10 = sszutils.ExpandSlice(val10, itemCount)
		for i := 0; i < itemCount; i++ {
			buf := buf[48*i : 48*(i+1)]
			copy(val10[i][:], buf)
		}
		t.BlobKZGCommitments = val10
	}
	return nil
}

func (t *BlindedBeaconBlockBody) SizeSSZ() (size int) {
	if t == nil {
		t = new(BlindedBeaconBlockBody)
	}
	// Field #0 'RANDAOReveal' static (96 bytes)
	// Field #1 'ETH1Data' static (72 bytes)
	// Field #2 'Graffiti' static (32 bytes)
	// Field #3 'ProposerSlashings' offset (4 bytes)
	// Field #4 'AttesterSlashings' offset (4 bytes)
	// Field #5 'Attestations' offset (4 bytes)
	// Field #6 'Deposits' offset (4 bytes)
	// Field #7 'VoluntaryExits' offset (4 bytes)
	// Field #8 'SyncAggregate' static (160 bytes)
	// Field #9 'ExecutionPayloadHeader' offset (4 bytes)
	// Field #10 'BLSToExecutionChanges' offset (4 bytes)
	// Field #11 'BlobKZGCommitments' offset (4 bytes)
	size += 392
	{ // Dynamic field #3 'ProposerSlashings'
		size += len(t.ProposerSlashings) * 416
	}
	{ // Dynamic field #4 'AttesterSlashings'
		t := t.AttesterSlashings
		vlen := len(t)
		size += vlen * 4 // Offsets
		for i1 := 0; i1 < vlen; i1++ {
			size += t[i1].SizeSSZ()
		}
	}
	{ // Dynamic field #5 'Attestations'
		t := t.Attestations
		vlen := len(t)
		size += vlen * 4 // Offsets
		for i2 := 0; i2 < vlen; i2++ {
			size += t[i2].SizeSSZ()
		}
	}
	{ // Dynamic field #6 'Deposits'
		size += len(t.Deposits) * 1240
	}
	{ // Dynamic field #7 'VoluntaryExits'
		size += len(t.VoluntaryExits) * 112
	}
	{ // Dynamic field #9 'ExecutionPayloadHeader'
		size += t.ExecutionPayloadHeader.SizeSSZ()
	}
	{ // Dynamic field #10 'BLSToExecutionChanges'
		size += len(t.BLSToExecutionChanges) * 172
	}
	{ // Dynamic field #11 'BlobKZGCommitments'
		size += len(t.BlobKZGCommitments) * 48
	}
	return size
}

func (t *BlindedBeaconBlockBody) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *BlindedBeaconBlockBody) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(BlindedBeaconBlockBody)
	}
	idx := hh.Index()
	{ // Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:96])
	}
	{ // Field #1 'ETH1Data'
		t := t.ETH1Data
		if t == nil {
			t = new(phase0.ETH1Data)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:32])
	}
	{ // Field #3 'ProposerSlashings'
		t := t.ProposerSlashings
		vlen := uint64(len(t))
		if vlen > 16 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.ProposerSlashing)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(16, vlen, 32))
	}
	{ // Field #4 'AttesterSlashings'
		t := t.AttesterSlashings
		vlen := uint64(len(t))
		if vlen > 2 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.AttesterSlashing)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(2, vlen, 32))
	}
	{ // Field #5 'Attestations'
		t := t.Attestations
		vlen := uint64(len(t))
		if vlen > 128 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.Attestation)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(128, vlen, 32))
	}
	{ // Field #6 'Deposits'
		t := t.Deposits
		vlen := uint64(len(t))
		if vlen > 16 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.Deposit)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(16, vlen, 32))
	}
	{ // Field #7 'VoluntaryExits'
		t := t.VoluntaryExits
		vlen := uint64(len(t))
		if vlen > 16 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(phase0.SignedVoluntaryExit)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(16, vlen, 32))
	}
	{ // Field #8 'SyncAggregate'
		t := t.SyncAggregate
		if t == nil {
			t = new(altair.SyncAggregate)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #9 'ExecutionPayloadHeader'
		t := t.ExecutionPayloadHeader
		if t == nil {
			t = new(deneb.ExecutionPayloadHeader)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #10 'BLSToExecutionChanges'
		t := t.BLSToExecutionChanges
		vlen := uint64(len(t))
		if vlen > 16 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			if t == nil {
				t = new(capella.SignedBLSToExecutionChange)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(16, vlen, 32))
	}
	{ // Field #11 'BlobKZGCommitments'
		t := t.BlobKZGCommitments
		vlen := uint64(len(t))
		if vlen > 4096 {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < int(vlen); i++ {
			hh.PutBytes(t[i][:48])
		}
		hh.MerkleizeWithMixin(idx, vlen, sszutils.CalculateLimit(4096, vlen, 32))
	}
	hh.Merkleize(idx)
	return nil
}

