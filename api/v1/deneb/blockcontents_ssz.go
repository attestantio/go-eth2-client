// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: ab186536f4e3abc490b64b665207af1be8f68c4fdc30d92afbbbe54beaafde06
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package deneb

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/bellatrix"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	"github.com/holiman/uint256"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *BlockContents) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *deneb.BeaconBlock) (err error) { // *deneb.BeaconBlock
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn2 := func(t []deneb.KZGProof) (err error) { // []deneb.KZGProof:48
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		return err
	}
	fn3 := func(t []deneb.Blob) (err error) { // []deneb.Blob:131072
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		return err
	}
	fn4 := func(t *BlockContents) (err error) { // *deneb.BlockContents
		dstlen := len(dst)
		// Offset #0 'Block'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #1 'KZGProofs'
		offset1 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #2 'Blobs'
		offset2 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #0 'Block'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn1(t.Block); err != nil {
			return err
		}
		// Dynamic Field #1 'KZGProofs'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		if err = fn2(t.KZGProofs); err != nil {
			return err
		}
		// Dynamic Field #2 'Blobs'
		sszutils.UpdateOffset(dst[offset2:offset2+4], len(dst)-dstlen)
		if err = fn3(t.Blobs); err != nil {
			return err
		}
		return err
	}
	err = fn4(t)
	return dst, err
}
func (t *BlockContents) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BlockContents) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *BlockContents) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t *deneb.BeaconBlock) (size int) { // *deneb.BeaconBlock
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn2 := func(t []deneb.KZGProof) (size int) { // []deneb.KZGProof:48
		size += len(t) * 48
		return size
	}
	sfn3 := func(t []deneb.Blob) (size int) { // []deneb.Blob:131072
		size += len(t) * 131072
		return size
	}
	sfn4 := func(t *BlockContents) (size int) { // *BlockContents
		size = 0
		size += 4 + sfn1(t.Block)
		size += 4 + sfn2(t.KZGProofs)
		size += 4 + sfn3(t.Blobs)
		return size
	}
	return sfn4(t)
}
func (t *BlockContents) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *BlockContents) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	fn1 := func(t *deneb.BeaconBlock, buf []byte) (*deneb.BeaconBlock, error) { // *deneb.BeaconBlock
		var err error
		if t == nil {
			t = new(deneb.BeaconBlock)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn2 := func(t []deneb.KZGProof, buf []byte) ([]deneb.KZGProof, error) { // []deneb.KZGProof:48
		var err error
		buflen := len(buf)
		itemsize := 48
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]deneb.KZGProof, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn3 := func(t []deneb.Blob, buf []byte) ([]deneb.Blob, error) { // []deneb.Blob:131072
		var err error
		buflen := len(buf)
		itemsize := 131072
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]deneb.Blob, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn4 := func(t *BlockContents, buf []byte) (*BlockContents, error) { // *BlockContents
		var err error
		if t == nil {
			t = new(BlockContents)
		}
		bufpos := 12
		buflen := len(buf)
		if buflen < 12 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'Block'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Read offset #1 'KZGProofs'
		offset1 := int(sszutils.ReadOffset(buf[4:8]))
		// Read offset #2 'Blobs'
		offset2 := int(sszutils.ReadOffset(buf[8:12]))
		// Dynamic Field #0 'Block'
		if offset0 < bufpos || offset1 > buflen || offset1 < offset0 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:offset1]
			if t.Block, err = fn1(t.Block, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #1 'KZGProofs'
		if offset1 < bufpos || offset2 > buflen || offset2 < offset1 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset1:offset2]
			if t.KZGProofs, err = fn2(t.KZGProofs, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #2 'Blobs'
		if offset2 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset2:]
			if t.Blobs, err = fn3(t.Blobs, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn4(t, buf)
	return err
}
func (t *BlockContents) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *BlockContents) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t []*phase0.ProposerSlashing) (err error) { // []*phase0.ProposerSlashing:16:MAX_PROPOSER_SLASHINGS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_PROPOSER_SLASHINGS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t []*phase0.AttesterSlashing) (err error) { // []*phase0.AttesterSlashing:2:MAX_ATTESTER_SLASHINGS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_ATTESTER_SLASHINGS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 2
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn3 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist:2048:MAX_VALIDATORS_PER_COMMITTEE
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 2048
		}
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > maxLen {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (maxLen+255)/256)
		return err
	}
	fn4 := func(t *phase0.Attestation) (err error) { // *phase0.Attestation:pack
		idx := hh.Index()
		// Field #0 'AggregationBits'
		if err = fn3(t.AggregationBits); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	fn5 := func(t []*phase0.Attestation) (err error) { // []*phase0.Attestation:128:MAX_ATTESTATIONS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_ATTESTATIONS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 128
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn6 := func(t [][]byte) (err error) { // [][]uint8:33:DEPOSIT_CONTRACT_TREE_DEPTH+1:32
		hasLimit, limit, err := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 33
		}
		idx := hh.Index()
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		for i := vlen; i < int(limit); i++ {
			hh.PutUint8(0)
		}
		hh.Merkleize(idx)
		return err
	}
	fn7 := func(t *phase0.Deposit) (err error) { // *phase0.Deposit:pack
		idx := hh.Index()
		// Field #0 'Proof'
		if err = fn6(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn8 := func(t []*phase0.Deposit) (err error) { // []*phase0.Deposit:16:MAX_DEPOSITS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_DEPOSITS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn7(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn9 := func(t []*phase0.SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit:16:MAX_VOLUNTARY_EXITS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VOLUNTARY_EXITS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn10 := func(t go_bitfield.Bitvector512) (err error) { // bitfield.Bitvector512:64:SYNC_COMMITTEE_SIZE/8
		hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 64
		}
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn11 := func(t *altair.SyncAggregate) (err error) { // *altair.SyncAggregate
		idx := hh.Index()
		// Field #0 'SyncCommitteeBits'
		if err = fn10(t.SyncCommitteeBits); err != nil {
			return err
		}
		// Field #1 'SyncCommitteeSignature'
		hh.PutBytes(t.SyncCommitteeSignature[:])
		hh.Merkleize(idx)
		return err
	}
	fn12 := func(t []byte) (err error) { // []uint8:32:MAX_EXTRA_DATA_BYTES
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_EXTRA_DATA_BYTES")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 32
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn13 := func(t *uint256.Int) (err error) { // *uint256.Int:4
		var root [32]byte
		if root, err = t.HashTreeRoot(); err == nil {
			hh.Append(root[:])
		}
		return err
	}
	fn14 := func(t bellatrix.Transaction) (err error) { // bellatrix.Transaction:1073741824:MAX_BYTES_PER_TRANSACTION:pack
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_BYTES_PER_TRANSACTION")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 1073741824
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn15 := func(t []bellatrix.Transaction) (err error) { // []bellatrix.Transaction:1048576:MAX_TRANSACTIONS_PER_PAYLOAD:MAX_BYTES_PER_TRANSACTION
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_TRANSACTIONS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 1048576
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn14(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn16 := func(t []*capella.Withdrawal) (err error) { // []*capella.Withdrawal:16:MAX_WITHDRAWALS_PER_PAYLOAD
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_WITHDRAWALS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn17 := func(t *deneb.ExecutionPayload) (err error) { // *deneb.ExecutionPayload
		idx := hh.Index()
		// Field #0 'ParentHash'
		hh.PutBytes(t.ParentHash[:])
		// Field #1 'FeeRecipient'
		hh.PutBytes(t.FeeRecipient[:])
		// Field #2 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #3 'ReceiptsRoot'
		hh.PutBytes(t.ReceiptsRoot[:])
		// Field #4 'LogsBloom'
		hh.PutBytes(t.LogsBloom[:])
		// Field #5 'PrevRandao'
		hh.PutBytes(t.PrevRandao[:])
		// Field #6 'BlockNumber'
		hh.PutUint64(uint64(t.BlockNumber))
		// Field #7 'GasLimit'
		hh.PutUint64(uint64(t.GasLimit))
		// Field #8 'GasUsed'
		hh.PutUint64(uint64(t.GasUsed))
		// Field #9 'Timestamp'
		hh.PutUint64(uint64(t.Timestamp))
		// Field #10 'ExtraData'
		if err = fn12(t.ExtraData); err != nil {
			return err
		}
		// Field #11 'BaseFeePerGas'
		if err = fn13(t.BaseFeePerGas); err != nil {
			return err
		}
		// Field #12 'BlockHash'
		hh.PutBytes(t.BlockHash[:])
		// Field #13 'Transactions'
		if err = fn15(t.Transactions); err != nil {
			return err
		}
		// Field #14 'Withdrawals'
		if err = fn16(t.Withdrawals); err != nil {
			return err
		}
		// Field #15 'BlobGasUsed'
		hh.PutUint64(uint64(t.BlobGasUsed))
		// Field #16 'ExcessBlobGas'
		hh.PutUint64(uint64(t.ExcessBlobGas))
		hh.Merkleize(idx)
		return err
	}
	fn18 := func(t []*capella.SignedBLSToExecutionChange) (err error) { // []*capella.SignedBLSToExecutionChange:16:MAX_BLS_TO_EXECUTION_CHANGES
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_BLS_TO_EXECUTION_CHANGES")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn19 := func(t []deneb.KZGCommitment) (err error) { // []deneb.KZGCommitment:4096:MAX_BLOB_COMMITMENTS_PER_BLOCK:48
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_BLOB_COMMITMENTS_PER_BLOCK")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 4096
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn20 := func(t *deneb.BeaconBlockBody) (err error) { // *deneb.BeaconBlockBody
		idx := hh.Index()
		// Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:])
		// Field #1 'ETH1Data'
		if err = t.ETH1Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:])
		// Field #3 'ProposerSlashings'
		if err = fn1(t.ProposerSlashings); err != nil {
			return err
		}
		// Field #4 'AttesterSlashings'
		if err = fn2(t.AttesterSlashings); err != nil {
			return err
		}
		// Field #5 'Attestations'
		if err = fn5(t.Attestations); err != nil {
			return err
		}
		// Field #6 'Deposits'
		if err = fn8(t.Deposits); err != nil {
			return err
		}
		// Field #7 'VoluntaryExits'
		if err = fn9(t.VoluntaryExits); err != nil {
			return err
		}
		// Field #8 'SyncAggregate'
		if err = fn11(t.SyncAggregate); err != nil {
			return err
		}
		// Field #9 'ExecutionPayload'
		if err = fn17(t.ExecutionPayload); err != nil {
			return err
		}
		// Field #10 'BLSToExecutionChanges'
		if err = fn18(t.BLSToExecutionChanges); err != nil {
			return err
		}
		// Field #11 'BlobKZGCommitments'
		if err = fn19(t.BlobKZGCommitments); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn21 := func(t *deneb.BeaconBlock) (err error) { // *deneb.BeaconBlock
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'Body'
		if err = fn20(t.Body); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn22 := func(t []deneb.KZGProof) (err error) { // []deneb.KZGProof:4096:48
		maxLen := 4096
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn23 := func(t []deneb.Blob) (err error) { // []deneb.Blob:4096:131072
		maxLen := 4096
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn24 := func(t *BlockContents) (err error) { // *deneb.BlockContents
		idx := hh.Index()
		// Field #0 'Block'
		if err = fn21(t.Block); err != nil {
			return err
		}
		// Field #1 'KZGProofs'
		if err = fn22(t.KZGProofs); err != nil {
			return err
		}
		// Field #2 'Blobs'
		if err = fn23(t.Blobs); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn24(t)
}
func (t *BlockContents) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *BlockContents) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *BlockContents) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
