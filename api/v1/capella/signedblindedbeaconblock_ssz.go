// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: ffad08eb351bc04ebe33acd3d621b8dca4032131091b4adf94cd172161f5413c
// Version: v1.0.1 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *SignedBlindedBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	// Offset #0 'Message'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #1 'Signature'
		t := t.Signature
		limit := 96
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Dynamic Field #0 'Message'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.Message
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *SignedBlindedBeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *SignedBlindedBeaconBlock) SizeSSZ() (size int) {
	// Field #0 'Message' offset (4 bytes)
	// Field #1 'Signature' static (96 bytes)
	size += 100
	{ // Dynamic field #0 'Message'
		size += t.Message.SizeSSZ()
	}
	return size
}

func (t *SignedBlindedBeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 100 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'Message' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 100 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #1 'Signature' (static)
		buf := buf[4:100]
		copy(t.Signature[:], buf)
	}
	{ // Field #0 'Message' (dynamic)
		buf := buf[offset0:]
		val1 := t.Message
		if val1 == nil {
			val1 = new(BlindedBeaconBlock)
		}
		if err = val1.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Message = val1
	}
	return nil
}

func (t *SignedBlindedBeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Message'
		t := t.Message
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #1 'Signature'
		t := t.Signature
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *SignedBlindedBeaconBlock) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
