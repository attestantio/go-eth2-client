// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 6140197280f312649f6c21658f4458277821fc9845f0a270dbfb124524b3505f
// Version: v1.1.1 (https://github.com/pk910/dynamic-ssz)
package capella

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BlindedBeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BlindedBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(BlindedBeaconBlock)
	}
	dstlen := len(dst)
	{ // Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
	}
	{ // Field #1 'ProposerIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ProposerIndex))
	}
	{ // Field #2 'ParentRoot'
		dst = append(dst, []byte(t.ParentRoot[:32])...)
	}
	{ // Field #3 'StateRoot'
		dst = append(dst, []byte(t.StateRoot[:32])...)
	}
	// Offset #4 'Body'
	offset4 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #4 'Body'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		t := t.Body
		if t == nil {
			t = new(BlindedBeaconBlockBody)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *BlindedBeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 84 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Slot' (static)
		buf := buf[0:8]
		t.Slot = phase0.Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'ProposerIndex' (static)
		buf := buf[8:16]
		t.ProposerIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'ParentRoot' (static)
		buf := buf[16:48]
		copy(t.ParentRoot[:], buf)
	}
	{ // Field #3 'StateRoot' (static)
		buf := buf[48:80]
		copy(t.StateRoot[:], buf)
	}
	// Field #4 'Body' (offset)
	offset4 := int(sszutils.UnmarshallUint32(buf[80:84]))
	if offset4 != 84 {
		return sszutils.ErrOffset
	}
	{ // Field #4 'Body' (dynamic)
		buf := buf[offset4:]
		val1 := t.Body
		if val1 == nil {
			val1 = new(BlindedBeaconBlockBody)
		}
		if err = val1.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Body = val1
	}
	return nil
}

func (t *BlindedBeaconBlock) SizeSSZ() (size int) {
	if t == nil {
		t = new(BlindedBeaconBlock)
	}
	// Field #0 'Slot' static (8 bytes)
	// Field #1 'ProposerIndex' static (8 bytes)
	// Field #2 'ParentRoot' static (32 bytes)
	// Field #3 'StateRoot' static (32 bytes)
	// Field #4 'Body' offset (4 bytes)
	size += 84
	{ // Dynamic field #4 'Body'
		size += t.Body.SizeSSZ()
	}
	return size
}

func (t *BlindedBeaconBlock) HashTreeRoot() (root [32]byte, err error) {
	err = hasher.WithDefaultHasher(func(hh sszutils.HashWalker) (err error) {
		err = t.HashTreeRootWith(hh)
		if err == nil {
			root, err = hh.HashRoot()
		}
		return
	})
	return
}
func (t *BlindedBeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(BlindedBeaconBlock)
	}
	idx := hh.Index()
	{ // Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
	}
	{ // Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
	}
	{ // Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:32])
	}
	{ // Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:32])
	}
	{ // Field #4 'Body'
		t := t.Body
		if t == nil {
			t = new(BlindedBeaconBlockBody)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

