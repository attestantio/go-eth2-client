// Code generated by fastssz, but manually edited.
// Version: 0.1.3
package v1

import (
	"github.com/attestantio/go-eth2-client/spec/deneb"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Blobs object
func (b *Blobs) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the Blobs object to a target array
func (b *Blobs) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Blobs'
	if size := len(*b); size > 72 {
		err = ssz.ErrListTooBigFn("Blobs", size, 72)
		return
	}
	for ii := 0; ii < len(*b); ii++ {
		if size := len((*b)[ii]); size != 131072 {
			err = ssz.ErrBytesLengthFn("Blobs[ii]", size, 131072)
			return
		}
		dst = append(dst, (*b)[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Blobs object
func (b *Blobs) UnmarshalSSZ(buf []byte) error {
	// Field (0) 'Blobs'
	{
		num, err := ssz.DivideInt2(len(buf), 131072, 72)
		if err != nil {
			return err
		}
		*b = make(Blobs, num)
		for ii := 0; ii < num; ii++ {
			if (*b)[ii] == nil {
				(*b)[ii] = new(deneb.Blob)
			}
			copy((*b)[ii][:], buf[ii*131072:(ii+1)*131072])
		}
	}
	return nil
}

// SizeSSZ returns the ssz encoded size in bytes for the Blobs object
func (b *Blobs) SizeSSZ() (size int) {
	size = 0

	// Field (0) 'Blobs'
	size += len(*b) * 131072

	return
}

// HashTreeRoot ssz hashes the Blobs object
func (b *Blobs) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the Blobs object with a hasher
func (b *Blobs) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	// Field (0) 'Blobs'
	{
		if size := len(*b); size > 72 {
			err = ssz.ErrListTooBigFn("Blobs", size, 72)
			return
		}
		subIndx := hh.Index()
		for _, i := range *b {
			if len(i) != 131072 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i[:])
		}
		numItems := uint64(len(*b))
		hh.MerkleizeWithMixin(subIndx, numItems, 72)
	}

	return
}

// GetTree ssz hashes the Blobs object
func (b *Blobs) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
