// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: f22c54662cbf4d2919c51a7f8d9c4762afec2f07ba7a02bbfc8c937b152a5537
// Version: v0.0.0-20250924020059-826e7b1c49b5 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/electra"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BlockContents) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	// Offset #0 'Block'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #1 'KZGProofs'
	offset1 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #2 'Blobs'
	offset2 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #0 'Block'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.Block
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Dynamic Field #1 'KZGProofs'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		t := t.KZGProofs
		max := 4096
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			limit := 48
			dst = append(dst, []byte(t[:limit])...)
		}
	}
	{ // Dynamic Field #2 'Blobs'
		sszutils.UpdateOffset(dst[offset2:offset2+4], len(dst)-dstlen)
		t := t.Blobs
		max := 4096
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			limit := 131072
			dst = append(dst, []byte(t[:limit])...)
		}
	}
	return dst, nil
}

func (t *BlockContents) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BlockContents) SizeSSZ() (size int) {
	// Field #0 'Block' offset (4 bytes)
	// Field #1 'KZGProofs' offset (4 bytes)
	// Field #2 'Blobs' offset (4 bytes)
	size += 12
	{ // Dynamic field #0 'Block'
		size += t.Block.SizeSSZ()
	}
	{ // Dynamic field #1 'KZGProofs'
		vlen := len(t.KZGProofs)
		size += vlen * 48
	}
	{ // Dynamic field #2 'Blobs'
		vlen := len(t.Blobs)
		size += vlen * 131072
	}
	return size
}

func (t *BlockContents) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 12 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'Block' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 12 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	// Field #1 'KZGProofs' (offset)
	offset1 := int(sszutils.UnmarshallUint32(buf[4:8]))
	if offset1 < offset0 || offset1 > buflen {
		return sszutils.ErrOffset
	}
	// Field #2 'Blobs' (offset)
	offset2 := int(sszutils.UnmarshallUint32(buf[8:12]))
	if offset2 < offset1 || offset2 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #0 'Block' (dynamic)
		buf := buf[offset0:offset1]
		val1 := t.Block
		if val1 == nil {
			val1 = new(electra.BeaconBlock)
		}
		if err = val1.UnmarshalSSZ(buf); err != nil {
			return err
		}
		t.Block = val1
	}
	{ // Field #1 'KZGProofs' (dynamic)
		buf := buf[offset1:offset2]
		val2 := t.KZGProofs
		itemCount := len(buf) / 48
		if len(buf)%48 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val2) < itemCount {
			val2 = make([]deneb.KZGProof, itemCount)
		} else if len(val2) > itemCount {
			val2 = val2[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			buf := buf[48*i : 48*(i+1)]
			copy(val2[i][:], buf)
		}
		t.KZGProofs = val2
	}
	{ // Field #2 'Blobs' (dynamic)
		buf := buf[offset2:]
		val3 := t.Blobs
		itemCount := len(buf) / 131072
		if len(buf)%131072 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val3) < itemCount {
			val3 = make([]deneb.Blob, itemCount)
		} else if len(val3) > itemCount {
			val3 = val3[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			buf := buf[131072*i : 131072*(i+1)]
			copy(val3[i][:], buf)
		}
		t.Blobs = val3
	}
	return nil
}

func (t *BlockContents) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'Block'
		t := t.Block
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	{ // Field #1 'KZGProofs'
		t := t.KZGProofs
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			idx := hh.Index()
			hh.PutBytes(t[:])
			hh.Merkleize(idx)
		}
		limit := sszutils.CalculateLimit(4096, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #2 'Blobs'
		t := t.Blobs
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			idx := hh.Index()
			hh.PutBytes(t[:])
			hh.Merkleize(idx)
		}
		limit := sszutils.CalculateLimit(4096, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *BlockContents) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
