// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 2cd8809eb72b3c5043347cd93b1a470fc05a6cbf67fc8ba96008c01c07842958
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/electra"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *BlindedBeaconBlockBody) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *phase0.ETH1Data) (err error) { // *phase0.ETH1Data
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *phase0.ProposerSlashing) (err error) { // *phase0.ProposerSlashing
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn3 := func(t []*phase0.ProposerSlashing) (err error) { // []*phase0.ProposerSlashing
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn2(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn4 := func(t *electra.AttesterSlashing) (err error) { // *electra.AttesterSlashing
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn5 := func(t []*electra.AttesterSlashing) (err error) { // []*electra.AttesterSlashing
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn6 := func(t *electra.Attestation) (err error) { // *electra.Attestation
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn7 := func(t []*electra.Attestation) (err error) { // []*electra.Attestation
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			if err = fn6(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn8 := func(t *phase0.Deposit) (err error) { // *phase0.Deposit
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn9 := func(t []*phase0.Deposit) (err error) { // []*phase0.Deposit
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn8(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn10 := func(t *phase0.SignedVoluntaryExit) (err error) { // *phase0.SignedVoluntaryExit
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn11 := func(t []*phase0.SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn10(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn12 := func(t *altair.SyncAggregate) (err error) { // *altair.SyncAggregate
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn13 := func(t *deneb.ExecutionPayloadHeader) (err error) { // *deneb.ExecutionPayloadHeader
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn14 := func(t *capella.SignedBLSToExecutionChange) (err error) { // *capella.SignedBLSToExecutionChange
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn15 := func(t []*capella.SignedBLSToExecutionChange) (err error) { // []*capella.SignedBLSToExecutionChange
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn14(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn16 := func(t []deneb.KZGCommitment) (err error) { // []deneb.KZGCommitment:48
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		return err
	}
	fn17 := func(t *electra.ExecutionRequests) (err error) { // *electra.ExecutionRequests
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn18 := func(t *BlindedBeaconBlockBody) (err error) { // *electra.BlindedBeaconBlockBody
		dstlen := len(dst)
		// Field #0 'RANDAOReveal'
		dst = append(dst, t.RANDAOReveal[:]...)
		// Field #1 'ETH1Data'
		if err = fn1(t.ETH1Data); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		dst = append(dst, t.Graffiti[:]...)
		// Offset #3 'ProposerSlashings'
		offset3 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #4 'AttesterSlashings'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #5 'Attestations'
		offset5 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #6 'Deposits'
		offset6 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #7 'VoluntaryExits'
		offset7 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #8 'SyncAggregate'
		if err = fn12(t.SyncAggregate); err != nil {
			return err
		}
		// Offset #9 'ExecutionPayloadHeader'
		offset9 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #10 'BLSToExecutionChanges'
		offset10 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #11 'BlobKZGCommitments'
		offset11 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #12 'ExecutionRequests'
		offset12 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #3 'ProposerSlashings'
		sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
		if err = fn3(t.ProposerSlashings); err != nil {
			return err
		}
		// Dynamic Field #4 'AttesterSlashings'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		if err = fn5(t.AttesterSlashings); err != nil {
			return err
		}
		// Dynamic Field #5 'Attestations'
		sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
		if err = fn7(t.Attestations); err != nil {
			return err
		}
		// Dynamic Field #6 'Deposits'
		sszutils.UpdateOffset(dst[offset6:offset6+4], len(dst)-dstlen)
		if err = fn9(t.Deposits); err != nil {
			return err
		}
		// Dynamic Field #7 'VoluntaryExits'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		if err = fn11(t.VoluntaryExits); err != nil {
			return err
		}
		// Dynamic Field #9 'ExecutionPayloadHeader'
		sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
		if err = fn13(t.ExecutionPayloadHeader); err != nil {
			return err
		}
		// Dynamic Field #10 'BLSToExecutionChanges'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		if err = fn15(t.BLSToExecutionChanges); err != nil {
			return err
		}
		// Dynamic Field #11 'BlobKZGCommitments'
		sszutils.UpdateOffset(dst[offset11:offset11+4], len(dst)-dstlen)
		if err = fn16(t.BlobKZGCommitments); err != nil {
			return err
		}
		// Dynamic Field #12 'ExecutionRequests'
		sszutils.UpdateOffset(dst[offset12:offset12+4], len(dst)-dstlen)
		if err = fn17(t.ExecutionRequests); err != nil {
			return err
		}
		return err
	}
	err = fn18(t)
	return dst, err
}
func (t *BlindedBeaconBlockBody) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BlindedBeaconBlockBody) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *BlindedBeaconBlockBody) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t []*phase0.ProposerSlashing) (size int) { // []*phase0.ProposerSlashing
		size += len(t) * 416
		return size
	}
	sfn2 := func(t *electra.AttesterSlashing) (size int) { // *electra.AttesterSlashing
		size = t.SizeSSZ()
		return size
	}
	sfn3 := func(t []*electra.AttesterSlashing) (size int) { // []*electra.AttesterSlashing
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn2(t[i])
		}
		return size
	}
	sfn4 := func(t *electra.Attestation) (size int) { // *electra.Attestation
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn5 := func(t []*electra.Attestation) (size int) { // []*electra.Attestation
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn4(t[i])
		}
		return size
	}
	sfn6 := func(t *phase0.Deposit) (size int) { // *phase0.Deposit
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn7 := func(t []*phase0.Deposit) (size int) { // []*phase0.Deposit
		if len(t) > 0 {
			size += len(t) * sfn6(t[0])
		}
		return size
	}
	sfn8 := func(t []*phase0.SignedVoluntaryExit) (size int) { // []*phase0.SignedVoluntaryExit
		size += len(t) * 112
		return size
	}
	sfn9 := func(t *altair.SyncAggregate) (size int) { // *altair.SyncAggregate
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn10 := func(t *deneb.ExecutionPayloadHeader) (size int) { // *deneb.ExecutionPayloadHeader
		size = t.SizeSSZ()
		return size
	}
	sfn11 := func(t []*capella.SignedBLSToExecutionChange) (size int) { // []*capella.SignedBLSToExecutionChange
		size += len(t) * 172
		return size
	}
	sfn12 := func(t []deneb.KZGCommitment) (size int) { // []deneb.KZGCommitment:48
		size += len(t) * 48
		return size
	}
	sfn13 := func(t *electra.ExecutionRequests) (size int) { // *electra.ExecutionRequests
		size = t.SizeSSZ()
		return size
	}
	sfn14 := func(t *BlindedBeaconBlockBody) (size int) { // *BlindedBeaconBlockBody
		size = 200
		size += 4 + sfn1(t.ProposerSlashings)
		size += 4 + sfn3(t.AttesterSlashings)
		size += 4 + sfn5(t.Attestations)
		size += 4 + sfn7(t.Deposits)
		size += 4 + sfn8(t.VoluntaryExits)
		size += sfn9(t.SyncAggregate)
		size += 4 + sfn10(t.ExecutionPayloadHeader)
		size += 4 + sfn11(t.BLSToExecutionChanges)
		size += 4 + sfn12(t.BlobKZGCommitments)
		size += 4 + sfn13(t.ExecutionRequests)
		return size
	}
	return sfn14(t)
}
func (t *BlindedBeaconBlockBody) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *BlindedBeaconBlockBody) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	sfn1 := func() (size int) { // [][]byte:33:DEPOSIT_CONTRACT_TREE_DEPTH+1:32
		hasLimit, limit, _ := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
		if !hasLimit {
			limit = 33
		}
		size += int(limit) * 32
		return size
	}()
	sfn2 := func() (size int) { // *phase0.Deposit
		size = 184
		size += sfn1
		return size
	}()
	sfn3 := func() (size int) { // go_bitfield.Bitvector512:64:SYNC_COMMITTEE_SIZE/8
		hasLimit, limit, _ := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
		if !hasLimit {
			limit = 64
		}
		size += int(limit) * 1
		return size
	}()
	sfn4 := func() (size int) { // *altair.SyncAggregate
		size = 96
		size += sfn3
		return size
	}()
	fn1 := func(t *phase0.ETH1Data, buf []byte) (*phase0.ETH1Data, error) { // *phase0.ETH1Data
		var err error
		if t == nil {
			t = new(phase0.ETH1Data)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *phase0.ProposerSlashing, buf []byte) (*phase0.ProposerSlashing, error) { // *phase0.ProposerSlashing
		var err error
		if t == nil {
			t = new(phase0.ProposerSlashing)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn3 := func(t []*phase0.ProposerSlashing, buf []byte) ([]*phase0.ProposerSlashing, error) { // []*phase0.ProposerSlashing
		var err error
		buflen := len(buf)
		itemsize := 416
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.ProposerSlashing, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn2(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn4 := func(t *electra.AttesterSlashing, buf []byte) (*electra.AttesterSlashing, error) { // *electra.AttesterSlashing
		var err error
		if t == nil {
			t = new(electra.AttesterSlashing)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn5 := func(t []*electra.AttesterSlashing, buf []byte) ([]*electra.AttesterSlashing, error) { // []*electra.AttesterSlashing
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*electra.AttesterSlashing, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if t[i], err = fn4(t[i], buf[offset:endOffset]); err != nil {
				return t, err
			}
			offset = endOffset
		}
		return t, err
	}
	fn6 := func(t *electra.Attestation, buf []byte) (*electra.Attestation, error) { // *electra.Attestation
		var err error
		if t == nil {
			t = new(electra.Attestation)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn7 := func(t []*electra.Attestation, buf []byte) ([]*electra.Attestation, error) { // []*electra.Attestation
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*electra.Attestation, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if t[i], err = fn6(t[i], buf[offset:endOffset]); err != nil {
				return t, err
			}
			offset = endOffset
		}
		return t, err
	}
	fn8 := func(t *phase0.Deposit, buf []byte) (*phase0.Deposit, error) { // *phase0.Deposit
		var err error
		if t == nil {
			t = new(phase0.Deposit)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn9 := func(t []*phase0.Deposit, buf []byte) ([]*phase0.Deposit, error) { // []*phase0.Deposit
		var err error
		buflen := len(buf)
		itemsize := sfn2
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.Deposit, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn8(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn10 := func(t *phase0.SignedVoluntaryExit, buf []byte) (*phase0.SignedVoluntaryExit, error) { // *phase0.SignedVoluntaryExit
		var err error
		if t == nil {
			t = new(phase0.SignedVoluntaryExit)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn11 := func(t []*phase0.SignedVoluntaryExit, buf []byte) ([]*phase0.SignedVoluntaryExit, error) { // []*phase0.SignedVoluntaryExit
		var err error
		buflen := len(buf)
		itemsize := 112
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.SignedVoluntaryExit, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn10(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn12 := func(t *altair.SyncAggregate, buf []byte) (*altair.SyncAggregate, error) { // *altair.SyncAggregate
		var err error
		if t == nil {
			t = new(altair.SyncAggregate)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn13 := func(t *deneb.ExecutionPayloadHeader, buf []byte) (*deneb.ExecutionPayloadHeader, error) { // *deneb.ExecutionPayloadHeader
		var err error
		if t == nil {
			t = new(deneb.ExecutionPayloadHeader)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn14 := func(t *capella.SignedBLSToExecutionChange, buf []byte) (*capella.SignedBLSToExecutionChange, error) { // *capella.SignedBLSToExecutionChange
		var err error
		if t == nil {
			t = new(capella.SignedBLSToExecutionChange)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn15 := func(t []*capella.SignedBLSToExecutionChange, buf []byte) ([]*capella.SignedBLSToExecutionChange, error) { // []*capella.SignedBLSToExecutionChange
		var err error
		buflen := len(buf)
		itemsize := 172
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*capella.SignedBLSToExecutionChange, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn14(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn16 := func(t []deneb.KZGCommitment, buf []byte) ([]deneb.KZGCommitment, error) { // []deneb.KZGCommitment:48
		var err error
		buflen := len(buf)
		itemsize := 48
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]deneb.KZGCommitment, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn17 := func(t *electra.ExecutionRequests, buf []byte) (*electra.ExecutionRequests, error) { // *electra.ExecutionRequests
		var err error
		if t == nil {
			t = new(electra.ExecutionRequests)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn18 := func(t *BlindedBeaconBlockBody, buf []byte) (*BlindedBeaconBlockBody, error) { // *BlindedBeaconBlockBody
		var err error
		if t == nil {
			t = new(BlindedBeaconBlockBody)
		}
		bufpos := 0
		buflen := len(buf)
		minsize := 236
		if buflen < minsize {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'RANDAOReveal'
		{
			fieldsize := 96
			copy(t.RANDAOReveal[:], buf[bufpos:bufpos+fieldsize])
			bufpos += fieldsize
		}
		// Field #1 'ETH1Data'
		{
			fieldsize := 72
			if t.ETH1Data, err = fn1(t.ETH1Data, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Field #2 'Graffiti'
		{
			fieldsize := 32
			copy(t.Graffiti[:], buf[bufpos:bufpos+fieldsize])
			bufpos += fieldsize
		}
		// Offset #3 'ProposerSlashings'
		offset3 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #4 'AttesterSlashings'
		offset4 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #5 'Attestations'
		offset5 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #6 'Deposits'
		offset6 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #7 'VoluntaryExits'
		offset7 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Field #8 'SyncAggregate'
		{
			fieldsize := sfn4
			minsize += fieldsize
			if buflen < minsize {
				return t, sszutils.ErrUnexpectedEOF
			}
			if t.SyncAggregate, err = fn12(t.SyncAggregate, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Offset #9 'ExecutionPayloadHeader'
		offset9 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #10 'BLSToExecutionChanges'
		offset10 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #11 'BlobKZGCommitments'
		offset11 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #12 'ExecutionRequests'
		offset12 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Dynamic Field #3 'ProposerSlashings'
		if offset3 < bufpos || offset4 > buflen || offset4 < offset3 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset3:offset4]
			if t.ProposerSlashings, err = fn3(t.ProposerSlashings, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #4 'AttesterSlashings'
		if offset4 < bufpos || offset5 > buflen || offset5 < offset4 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset4:offset5]
			if t.AttesterSlashings, err = fn5(t.AttesterSlashings, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #5 'Attestations'
		if offset5 < bufpos || offset6 > buflen || offset6 < offset5 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset5:offset6]
			if t.Attestations, err = fn7(t.Attestations, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #6 'Deposits'
		if offset6 < bufpos || offset7 > buflen || offset7 < offset6 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset6:offset7]
			if t.Deposits, err = fn9(t.Deposits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #7 'VoluntaryExits'
		if offset7 < bufpos || offset9 > buflen || offset9 < offset7 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset7:offset9]
			if t.VoluntaryExits, err = fn11(t.VoluntaryExits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #9 'ExecutionPayloadHeader'
		if offset9 < bufpos || offset10 > buflen || offset10 < offset9 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset9:offset10]
			if t.ExecutionPayloadHeader, err = fn13(t.ExecutionPayloadHeader, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #10 'BLSToExecutionChanges'
		if offset10 < bufpos || offset11 > buflen || offset11 < offset10 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset10:offset11]
			if t.BLSToExecutionChanges, err = fn15(t.BLSToExecutionChanges, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #11 'BlobKZGCommitments'
		if offset11 < bufpos || offset12 > buflen || offset12 < offset11 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset11:offset12]
			if t.BlobKZGCommitments, err = fn16(t.BlobKZGCommitments, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #12 'ExecutionRequests'
		if offset12 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset12:]
			if t.ExecutionRequests, err = fn17(t.ExecutionRequests, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn18(t, buf)
	return err
}
func (t *BlindedBeaconBlockBody) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *BlindedBeaconBlockBody) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t []*phase0.ProposerSlashing) (err error) { // []*phase0.ProposerSlashing:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t []uint64) (err error) { // []uint64:131072:MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 131072
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.AppendUint64(uint64(t[i]))
		}
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(8))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn3 := func(t *electra.IndexedAttestation) (err error) { // *electra.IndexedAttestation
		idx := hh.Index()
		// Field #0 'AttestingIndices'
		if err = fn2(t.AttestingIndices); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	fn4 := func(t *electra.AttesterSlashing) (err error) { // *electra.AttesterSlashing:pack
		idx := hh.Index()
		// Field #0 'Attestation1'
		if err = fn3(t.Attestation1); err != nil {
			return err
		}
		// Field #1 'Attestation2'
		if err = fn3(t.Attestation2); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn5 := func(t []*electra.AttesterSlashing) (err error) { // []*electra.AttesterSlashing:1
		maxLen := 1
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn6 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist:131072:MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE*MAX_COMMITTEES_PER_SLOT")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 131072
		}
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > maxLen {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (maxLen+255)/256)
		return err
	}
	fn7 := func(t go_bitfield.Bitvector64) (err error) { // bitfield.Bitvector64:8:MAX_COMMITTEES_PER_SLOT/8
		hasLimit, limit, err := ds.ResolveSpecValue("MAX_COMMITTEES_PER_SLOT/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 8
		}
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn8 := func(t *electra.Attestation) (err error) { // *electra.Attestation:pack
		idx := hh.Index()
		// Field #0 'AggregationBits'
		if err = fn6(t.AggregationBits); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		// Field #3 'CommitteeBits'
		if err = fn7(t.CommitteeBits); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn9 := func(t []*electra.Attestation) (err error) { // []*electra.Attestation:8
		maxLen := 8
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn8(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn10 := func(t [][]byte) (err error) { // [][]uint8:33:DEPOSIT_CONTRACT_TREE_DEPTH+1:32
		hasLimit, limit, err := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 33
		}
		idx := hh.Index()
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		for i := vlen; i < int(limit); i++ {
			hh.PutUint8(0)
		}
		hh.Merkleize(idx)
		return err
	}
	fn11 := func(t *phase0.Deposit) (err error) { // *phase0.Deposit:pack
		idx := hh.Index()
		// Field #0 'Proof'
		if err = fn10(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn12 := func(t []*phase0.Deposit) (err error) { // []*phase0.Deposit:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn11(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn13 := func(t []*phase0.SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn14 := func(t go_bitfield.Bitvector512) (err error) { // bitfield.Bitvector512:64:SYNC_COMMITTEE_SIZE/8
		hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 64
		}
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn15 := func(t *altair.SyncAggregate) (err error) { // *altair.SyncAggregate
		idx := hh.Index()
		// Field #0 'SyncCommitteeBits'
		if err = fn14(t.SyncCommitteeBits); err != nil {
			return err
		}
		// Field #1 'SyncCommitteeSignature'
		hh.PutBytes(t.SyncCommitteeSignature[:])
		hh.Merkleize(idx)
		return err
	}
	fn16 := func(t []*capella.SignedBLSToExecutionChange) (err error) { // []*capella.SignedBLSToExecutionChange:16
		maxLen := 16
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn17 := func(t []deneb.KZGCommitment) (err error) { // []deneb.KZGCommitment:4096:48
		maxLen := 4096
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn18 := func(t []*electra.DepositRequest) (err error) { // []*electra.DepositRequest:8192:MAX_DEPOSIT_REQUESTS_PER_PAYLOAD
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_DEPOSIT_REQUESTS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 8192
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn19 := func(t []*electra.WithdrawalRequest) (err error) { // []*electra.WithdrawalRequest:16:MAX_WITHDRAWAL_REQUESTS_PER_PAYLOAD
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_WITHDRAWAL_REQUESTS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn20 := func(t []*electra.ConsolidationRequest) (err error) { // []*electra.ConsolidationRequest:2:MAX_CONSOLIDATION_REQUESTS_PER_PAYLOAD
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_CONSOLIDATION_REQUESTS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 2
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn21 := func(t *electra.ExecutionRequests) (err error) { // *electra.ExecutionRequests
		idx := hh.Index()
		// Field #0 'Deposits'
		if err = fn18(t.Deposits); err != nil {
			return err
		}
		// Field #1 'Withdrawals'
		if err = fn19(t.Withdrawals); err != nil {
			return err
		}
		// Field #2 'Consolidations'
		if err = fn20(t.Consolidations); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn22 := func(t *BlindedBeaconBlockBody) (err error) { // *electra.BlindedBeaconBlockBody
		idx := hh.Index()
		// Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:])
		// Field #1 'ETH1Data'
		if err = t.ETH1Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:])
		// Field #3 'ProposerSlashings'
		if err = fn1(t.ProposerSlashings); err != nil {
			return err
		}
		// Field #4 'AttesterSlashings'
		if err = fn5(t.AttesterSlashings); err != nil {
			return err
		}
		// Field #5 'Attestations'
		if err = fn9(t.Attestations); err != nil {
			return err
		}
		// Field #6 'Deposits'
		if err = fn12(t.Deposits); err != nil {
			return err
		}
		// Field #7 'VoluntaryExits'
		if err = fn13(t.VoluntaryExits); err != nil {
			return err
		}
		// Field #8 'SyncAggregate'
		if err = fn15(t.SyncAggregate); err != nil {
			return err
		}
		// Field #9 'ExecutionPayloadHeader'
		if err = t.ExecutionPayloadHeader.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #10 'BLSToExecutionChanges'
		if err = fn16(t.BLSToExecutionChanges); err != nil {
			return err
		}
		// Field #11 'BlobKZGCommitments'
		if err = fn17(t.BlobKZGCommitments); err != nil {
			return err
		}
		// Field #12 'ExecutionRequests'
		if err = fn21(t.ExecutionRequests); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn22(t)
}
func (t *BlindedBeaconBlockBody) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *BlindedBeaconBlockBody) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *BlindedBeaconBlockBody) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
