// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 33918bde7cf67be2c0c301d3f7aa226544404ead1bced2468d87a11921c956fd
// Version: v0.0.4 (https://github.com/pk910/dynamic-ssz)
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *BlindedBeaconBlock) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *BlindedBeaconBlockBody) (err error) { // *electra.BlindedBeaconBlockBody
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn2 := func(t *BlindedBeaconBlock) (err error) { // *electra.BlindedBeaconBlock
		dstlen := len(dst)
		// Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
		// Field #1 'ProposerIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		dst = append(dst, t.ParentRoot[:]...)
		// Field #3 'StateRoot'
		dst = append(dst, t.StateRoot[:]...)
		// Offset #4 'Body'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #4 'Body'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		if err = fn1(t.Body); err != nil {
			return err
		}
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *BlindedBeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *BlindedBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *BlindedBeaconBlock) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t *BlindedBeaconBlockBody) (size int) { // *BlindedBeaconBlockBody
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn2 := func(t *BlindedBeaconBlock) (size int) { // *BlindedBeaconBlock
		size = 80
		size += 4 + sfn1(t.Body)
		return size
	}
	return sfn2(t)
}
func (t *BlindedBeaconBlock) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *BlindedBeaconBlock) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	fn1 := func(t *BlindedBeaconBlockBody, buf []byte) (*BlindedBeaconBlockBody, error) { // *BlindedBeaconBlockBody
		var err error
		if t == nil {
			t = new(BlindedBeaconBlockBody)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn2 := func(t *BlindedBeaconBlock, buf []byte) (*BlindedBeaconBlock, error) { // *BlindedBeaconBlock
		var err error
		if t == nil {
			t = new(BlindedBeaconBlock)
		}
		bufpos := 84
		buflen := len(buf)
		if buflen < 84 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #4 'Body'
		offset4 := int(sszutils.ReadOffset(buf[80:84]))
		// Field #0 'Slot'
		t.Slot = (phase0.Slot)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'ProposerIndex'
		t.ProposerIndex = (phase0.ValidatorIndex)(sszutils.UnmarshallUint64(buf[8:16]))
		// Field #2 'ParentRoot'
		copy(t.ParentRoot[:], buf[16:48])
		// Field #3 'StateRoot'
		copy(t.StateRoot[:], buf[48:80])
		// Dynamic Field #4 'Body'
		if offset4 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset4:]
			if t.Body, err = fn1(t.Body, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}
func (t *BlindedBeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *BlindedBeaconBlock) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t *BlindedBeaconBlockBody) (err error) { // *electra.BlindedBeaconBlockBody
		err = t.HashTreeRootWithDyn(ds, hh)
		return err
	}
	fn2 := func(t *BlindedBeaconBlock) (err error) { // *electra.BlindedBeaconBlock
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'Body'
		if err = fn1(t.Body); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *BlindedBeaconBlock) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *BlindedBeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *BlindedBeaconBlock) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
